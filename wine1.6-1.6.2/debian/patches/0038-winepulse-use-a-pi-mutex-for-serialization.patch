From 8513286932d086a28eeab6652b81990b7cb3f36d Mon Sep 17 00:00:00 2001
From: Maarten Lankhorst <maarten.lankhorst@canonical.com>
Date: Sat, 31 Aug 2013 08:36:03 +0200
Subject: [PATCH 38/41] winepulse: use a pi-mutex for serialization.

The winepulse thread is realtime, to prevent blocking it indefinitely
use priority inheritance. Only initialize and release are potentially
unsafe, the rest should be ok with -rt.
---
 dlls/winepulse.drv/mmdevdrv.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

Index: wine1.6-1.7.1-actually1.6/dlls/winepulse.drv/mmdevdrv.c
===================================================================
--- wine1.6-1.7.1-actually1.6.orig/dlls/winepulse.drv/mmdevdrv.c	2013-09-13 16:19:21.499219814 -0700
+++ wine1.6-1.7.1-actually1.6/dlls/winepulse.drv/mmdevdrv.c	2013-09-13 16:19:41.000000000 -0700
@@ -22,6 +22,8 @@
 
 #define NONAMELESSUNION
 #define COBJMACROS
+#define _GNU_SOURCE
+
 #include "config.h"
 #include <poll.h>
 #include <pthread.h>
@@ -30,6 +32,7 @@
 #include <unistd.h>
 #include <math.h>
 #include <stdio.h>
+#include <errno.h>
 
 #include <pulse/pulseaudio.h>
 
@@ -68,7 +71,7 @@
 static pa_mainloop *pulse_ml;
 
 static HANDLE pulse_thread;
-static pthread_mutex_t pulse_lock = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t pulse_lock;
 static pthread_cond_t pulse_cond = PTHREAD_COND_INITIALIZER;
 static struct list g_sessions = LIST_INIT(g_sessions);
 
@@ -93,6 +96,8 @@
 {
     if (reason == DLL_PROCESS_ATTACH) {
         HKEY key;
+        pthread_mutexattr_t attr;
+
         if (RegOpenKeyW(HKEY_CURRENT_USER, pulse_keyW, &key) == ERROR_SUCCESS) {
             DWORD size = sizeof(pulse_stream_volume);
             RegQueryValueExW(key, pulse_streamW, 0, NULL,
@@ -100,6 +105,12 @@
             RegCloseKey(key);
         }
         DisableThreadLibraryCalls(dll);
+
+        pthread_mutexattr_init(&attr);
+        pthread_mutexattr_setprotocol(&attr, PTHREAD_PRIO_INHERIT);
+
+        if (pthread_mutex_init(&pulse_lock, &attr) != 0)
+            pthread_mutex_init(&pulse_lock, NULL);
     } else if (reason == DLL_PROCESS_DETACH) {
         if (pulse_thread)
            SetThreadPriority(pulse_thread, 0);
