#!/bin/sh

# chkconfig: 345 99 01
# description: Service for autostart Squid processes
# processname: init.squid
#
# Control Method for Squid (/lib/svc/method/init.squid)
# using SMF or init SysV (Linux).
# Written by Yuri Voinov (C) 2007,2015
#
# ident "@(#)squid.sh    2.5    15/12/01 YV"
#

#############
# Variables #
#############

# Base Squid installation directory
BASE_DIR="/usr/local/squid"

# Squid files paths
SQUID_PATH="$BASE_DIR""/sbin"
SQUID_CONF_PATH="$BASE_DIR""/etc"

# Squid files
SQUID_BIN_FILE="squid"
SQUID_CONF_FILE="squid.conf"

# Squid effective user name
SQUID_USER="squid"

# Set file descriptors limit. See --with-maxfd/--with-filedescriptors option with squid configuration
MAXFD=131072

# LD_LIBRARY_PATH additional setting. Change if another bdb version is installed. Bdb uses by squidGuard
LD_ADD="/opt/csw/bdb48/lib/amd64:/opt/csw/lib/amd64"

# Linux lock directory
LOCK_DIR="/var/lock/subsys"
# Script name for Linux up/down workaround
SVC_SHORT_NAME="$SQUID_BIN_FILE"
SCRIPT_NAME="init.$SVC_SHORT_NAME"

# Log cache to syslog
# Set to Y, if your need
TO_SYSLOG="N"

#
# OS Commands location variables
#
CAT=`which cat`
CUT=`which cut`
ECHO=`which echo`
GETENT=`which getent`
GREP=`which grep`
NEWTASK=`which newtask`
PS=`which ps`
RM=`which rm`
TOUCH=`which touch`
ULIMIT=`which ulimit`
UNAME=`which uname`

# OS release
OS_VER=`$UNAME -r|$CUT -f2 -d"."`
OS_NAME=`$UNAME -s|$CUT -f1 -d" "`

###############
# Subroutines #
###############

check_squid ()
{
 # Check Squid installed
 program=$1
 if [ ! -f "$SQUID_PATH/$program" -a ! -x "$SQUID_PATH/$program" ]; then
  $ECHO "ERROR: Squid not found!"
  $ECHO "Exiting..."
  exit 1
 fi
}

check_os ()
{
 if [ "$OS_NAME" = "SunOS" -a "$OS_VER" -lt "10" ]; then
  if [ "$OS_NAME" != "Linux" ]; then
   $ECHO "ERROR: Unsupported $OS_NAME version $OS_VER. Exiting..."
   exit 1
  fi
 fi
}

checkuser ()
{
# Check squid user
 username=$1
 if [ ! -z "`$GETENT passwd $username`" ]; then
  $ECHO "1"
 else
  $ECHO "0"
 fi
}

checkconf ()
{
# Check Squid config file
 config=$1
 if [ -f "$SQUID_CONF_PATH"/"$config" ]; then
  $ECHO "1"
 else
  $ECHO "0"
 fi
}

checkrcapd ()
{
# Check if rcapd running
 if [ ! -z "$PS -ef|$GREP -v grep|$GREP rcapd" ]; then
  $ECHO "1"
 else
  $ECHO "0"
 fi
}

startproc()
{
# Start Squid
 program=$1

 # Set additional cache logging to syslog, if specified
 if [ "$TO_SYSLOG" = "Y" ]; then
  sl="s"
 else
  sl=""
 fi

 if [ "`checkconf $SQUID_CONF_FILE`" = "1" ]; then
  if [ "`checkuser $SQUID_USER`" = "1" ]; then
   LD_LIBRARY_PATH=$LD_ADD:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH
   $ULIMIT -Sn $MAXFD
   if [ ! -z "`$CAT /etc/project | $GREP "$SQUID_USER"`" -a "`checkrcapd`" -eq "1" ]; then
    $NEWTASK -p `$CAT /etc/project | $GREP "squid" | $CUT -f1 -d":"` $SQUID_PATH/$program -Y$sl
   else
   $SQUID_PATH/$program -Y$sl
   fi
  else
   $ECHO "ERROR: User $SQUID_USER not found."
   $ECHO "Exiting..."
   exit 3
  fi
 else
  $ECHO "ERROR: Config file $SQUID_CONF_PATH/$SQUID_CONF_FILE not found."
  $ECHO "Exiting..."
  exit 2
 fi
 if [ "$OS_NAME" = "Linux" ]; then
  # Linux up/down workaround
  $TOUCH "$LOCK_DIR"/"$SCRIPT_NAME"
 fi
}

stopproc()
{
# Stop Squid
 program=$1
 if [ "`checkconf $SQUID_CONF_FILE`" = "1" ]; then
  if [ "`checkuser $SQUID_USER`" = "1" ]; then
   $SQUID_PATH/$program -k shutdown
  else
   $ECHO "ERROR: User $SQUID_USER not found."
   $ECHO "Exiting..."
   exit 3
  fi
 else
  $ECHO "ERROR: Config file $SQUID_CONF_PATH/$SQUID_CONF_FILE not found."
  $ECHO "Exiting..."
  exit 2
 fi
 if [ "$OS_NAME" = "Linux" ]; then
 # Linux up/down workaround
  $RM -f "$LOCK_DIR"/"$SCRIPT_NAME"
 fi
}

refreshproc()
{
# Refresh Squid
 program=$1
 if [ "`checkconf $SQUID_CONF_FILE`" = "1" ]; then
  if [ "`checkuser $SQUID_USER`" = "1" ]; then
   $SQUID_PATH/$program -k reconfigure
  else
   $ECHO "ERROR: User $SQUID_USER not found."
   $ECHO "Exiting..."
   exit 2
  fi
 else
  $ECHO "ERROR: Config file $SQUID_CONF_PATH/$SQUID_CONF_FILE not found."
  $ECHO "Exiting..."
  exit 2
 fi
}

##############
# Main block #
##############

# Check Squid installed
check_squid $SQUID_BIN_FILE

# Check OS version
check_os

case "$1" in
"start")
  startproc $SQUID_BIN_FILE
  ;;
"stop")
  stopproc $SQUID_BIN_FILE
  ;;
"refresh")
  refreshproc $SQUID_BIN_FILE
  ;;
"restart")
  stopproc $SQUID_BIN_FILE
  startproc $SQUID_BIN_FILE
  ;;
*)
  $ECHO "Usage: $0 { start | stop | refresh | restart }"
  exit 1
esac

exit 0
##