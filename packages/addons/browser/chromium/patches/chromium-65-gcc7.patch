--- chromium-65.0.3325.51/ui/gfx/ipc/buffer_types/gfx_param_traits.cc.format	2018-02-06 21:06:22.000000000 +0100
+++ chromium-65.0.3325.51/ui/gfx/ipc/buffer_types/gfx_param_traits.cc	2018-02-17 02:35:15.445832776 +0100
@@ -30,7 +30,7 @@
 void ParamTraits<gfx::BufferUsageAndFormat>::Log(
     const gfx::BufferUsageAndFormat& p,
     std::string* l) {
-  l->append(base::StringPrintf("(%d, %d)", p.usage, p.format));
+  l->append(base::StringPrintf("(%d, %d)", int(p.usage), int(p.format)));
 }
 
 }  // namespace IPC
--- chromium-65.0.3325.51/components/assist_ranker/ranker_example_util.cc.gcc7	2018-02-06 21:05:28.000000000 +0100
+++ chromium-65.0.3325.51/components/assist_ranker/ranker_example_util.cc	2018-02-17 03:15:17.577865763 +0100
@@ -9,6 +9,8 @@
 #include "base/metrics/metrics_hashes.h"
 #include "base/strings/stringprintf.h"
 
+#include <cmath>
+
 namespace assist_ranker {
 namespace {
 const uint64_t MASK32Bits = (1LL << 32) - 1;
--- chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/IDBKey.h.gcc7	2018-02-06 21:06:04.000000000 +0100
+++ chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/IDBKey.h	2018-02-17 15:02:35.783560719 +0100
@@ -106,7 +106,7 @@
     return binary_;
   }
 
-  const String& String() const {
+  const String& getString() const {
     DCHECK_EQ(type_, kStringType);
     return string_;
   }
--- chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/IDBKeyPath.h.gcc7	2018-02-06 21:06:04.000000000 +0100
+++ chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/IDBKeyPath.h	2018-02-17 15:03:55.916146745 +0100
@@ -65,7 +65,7 @@
     return array_;
   }
 
-  const String& String() const {
+  const String& getString() const {
     DCHECK_EQ(type_, kStringType);
     return string_;
   }
--- chromium-65.0.3325.51/third_party/WebKit/Source/bindings/modules/v8/V8BindingForModules.cpp.gcc7	2018-02-06 21:06:02.000000000 +0100
+++ chromium-65.0.3325.51/third_party/WebKit/Source/bindings/modules/v8/V8BindingForModules.cpp	2018-02-17 17:27:35.594136748 +0100
@@ -68,7 +68,7 @@
     case IDBKeyPath::kNullType:
       return v8::Null(isolate);
     case IDBKeyPath::kStringType:
-      return V8String(isolate, value.String());
+      return V8String(isolate, value.getString());
     case IDBKeyPath::kArrayType:
       return ToV8(value.Array(), creation_context, isolate);
   }
@@ -97,7 +97,7 @@
     case IDBKey::kNumberType:
       return v8::Number::New(isolate, key->Number());
     case IDBKey::kStringType:
-      return V8String(isolate, key->String());
+      return V8String(isolate, key->getString());
     case IDBKey::kBinaryType:
       // https://w3c.github.io/IndexedDB/#convert-a-value-to-a-key
       return ToV8(DOMArrayBuffer::Create(key->Binary()), creation_context,
@@ -379,7 +379,7 @@
   }
 
   DCHECK_EQ(key_path.GetType(), IDBKeyPath::kStringType);
-  return CreateIDBKeyFromValueAndKeyPath(isolate, value, key_path.String(),
+  return CreateIDBKeyFromValueAndKeyPath(isolate, value, key_path.getString(),
                                          exception_state);
 }
 
@@ -483,7 +483,7 @@
   DCHECK(isolate->InContext());
 
   DCHECK_EQ(key_path.GetType(), IDBKeyPath::kStringType);
-  Vector<String> key_path_elements = ParseKeyPath(key_path.String());
+  Vector<String> key_path_elements = ParseKeyPath(key_path.getString());
 
   // The conbination of a key generator and an empty key path is forbidden by
   // spec.
@@ -569,7 +569,7 @@
                                     const IDBKeyPath& key_path) {
   IDB_TRACE("canInjectIDBKeyIntoScriptValue");
   DCHECK_EQ(key_path.GetType(), IDBKeyPath::kStringType);
-  Vector<String> key_path_elements = ParseKeyPath(key_path.String());
+  Vector<String> key_path_elements = ParseKeyPath(key_path.getString());
 
   if (!key_path_elements.size())
     return false;
--- chromium-65.0.3325.51/third_party/WebKit/Source/modules/exported/WebIDBKey.cpp.gcc7	2018-02-06 21:06:04.000000000 +0100
+++ chromium-65.0.3325.51/third_party/WebKit/Source/modules/exported/WebIDBKey.cpp	2018-02-17 17:44:10.502053024 +0100
@@ -56,7 +56,7 @@
 }
 
 WebString WebIDBKeyView::String() const {
-  return private_->String();
+  return private_->getString();
 }
 
 double WebIDBKeyView::Date() const {
--- chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/InspectorIndexedDBAgent.cpp.gcc7	2018-02-06 21:06:04.000000000 +0100
+++ chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/InspectorIndexedDBAgent.cpp	2018-02-17 17:51:05.499926984 +0100
@@ -399,7 +399,7 @@
     case IDBKeyPath::kStringType:
       key_path = KeyPath::create()
                      .setType(KeyPath::TypeEnum::String)
-                     .setString(idb_key_path.String())
+                     .setString(idb_key_path.getString())
                      .build();
       break;
     case IDBKeyPath::kArrayType: {
--- chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/IDBDatabase.cpp.gcc7	2018-02-06 21:06:04.000000000 +0100
+++ chromium-65.0.3325.51/third_party/WebKit/Source/modules/indexeddb/IDBDatabase.cpp	2018-02-17 17:54:17.727623958 +0100
@@ -297,7 +297,7 @@
   }
 
   if (auto_increment && ((key_path.GetType() == IDBKeyPath::kStringType &&
-                          key_path.String().IsEmpty()) ||
+                          key_path.getString().IsEmpty()) ||
                          key_path.GetType() == IDBKeyPath::kArrayType)) {
     exception_state.ThrowDOMException(
         kInvalidAccessError,
--- chromium-65.0.3325.51/chrome/browser/ui/libgtkui/settings_provider_gsettings.cc.gcc7	2018-02-06 21:05:24.000000000 +0100
+++ chromium-65.0.3325.51/chrome/browser/ui/libgtkui/settings_provider_gsettings.cc	2018-02-17 19:30:29.811957661 +0100
@@ -43,8 +43,8 @@
   const gchar* settings_schema =
       base::nix::GetDesktopEnvironment(env.get()) ==
               base::nix::DESKTOP_ENVIRONMENT_CINNAMON
-          ? settings_schema = kCinnamonPreferencesSchema
-          : settings_schema = kGnomePreferencesSchema;
+          ? kCinnamonPreferencesSchema
+          : kGnomePreferencesSchema;
 
   if (!g_settings_schema_source_lookup(g_settings_schema_source_get_default(),
                                        settings_schema, FALSE) ||
--- chromium-65.0.3325.51/chrome/browser/vr/sample_queue.h.gcc7	2018-02-06 21:05:25.000000000 +0100
+++ chromium-65.0.3325.51/chrome/browser/vr/sample_queue.h	2018-02-17 20:35:26.406726748 +0100
@@ -6,6 +6,7 @@
 #define CHROME_BROWSER_VR_SAMPLE_QUEUE_H_
 
 #include <vector>
+#include <cstdint>
 
 #include "base/macros.h"
 
--- chromium-65.0.3325.51/content/renderer/render_frame_impl.cc.gcc7	2018-02-06 21:05:32.000000000 +0100
+++ chromium-65.0.3325.51/content/renderer/render_frame_impl.cc	2018-02-17 21:18:53.041128200 +0100
@@ -3115,7 +3115,6 @@
   bool is_reload =
       FrameMsg_Navigate_Type::IsReload(common_params.navigation_type);
   bool is_history_navigation = request_params.page_state.IsValid();
-  auto cache_mode = blink::mojom::FetchCacheMode::kDefault;
   RenderFrameImpl::PrepareRenderViewForNavigation(common_params.url,
                                                   request_params);
 
@@ -3127,7 +3126,6 @@
     // We cannot reload if we do not have any history state.  This happens, for
     // example, when recovering from a crash.
     is_reload = false;
-    cache_mode = blink::mojom::FetchCacheMode::kValidateCache;
   }
 
   // If the navigation is for "view source", the WebLocalFrame needs to be put
