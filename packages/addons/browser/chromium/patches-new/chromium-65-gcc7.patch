--- chromium-65.0.3325.51/ui/gfx/ipc/buffer_types/gfx_param_traits.cc.format	2018-02-06 21:06:22.000000000 +0100
+++ chromium-65.0.3325.51/ui/gfx/ipc/buffer_types/gfx_param_traits.cc	2018-02-17 02:35:15.445832776 +0100
@@ -30,7 +30,7 @@
 void ParamTraits<gfx::BufferUsageAndFormat>::Log(
     const gfx::BufferUsageAndFormat& p,
     std::string* l) {
-  l->append(base::StringPrintf("(%d, %d)", p.usage, p.format));
+  l->append(base::StringPrintf("(%d, %d)", int(p.usage), int(p.format)));
 }
 
 }  // namespace IPC
--- chromium-65.0.3325.51/components/assist_ranker/ranker_example_util.cc.gcc7	2018-02-06 21:05:28.000000000 +0100
+++ chromium-65.0.3325.51/components/assist_ranker/ranker_example_util.cc	2018-02-17 03:15:17.577865763 +0100
@@ -9,6 +9,8 @@
 #include "base/metrics/metrics_hashes.h"
 #include "base/strings/stringprintf.h"
 
+#include <cmath>
+
 namespace assist_ranker {
 namespace {
 const uint64_t MASK32Bits = (1LL << 32) - 1;
--- chromium-65.0.3325.51/chrome/browser/ui/libgtkui/settings_provider_gsettings.cc.gcc7	2018-02-06 21:05:24.000000000 +0100
+++ chromium-65.0.3325.51/chrome/browser/ui/libgtkui/settings_provider_gsettings.cc	2018-02-17 19:30:29.811957661 +0100
@@ -43,8 +43,8 @@
   const gchar* settings_schema =
       base::nix::GetDesktopEnvironment(env.get()) ==
               base::nix::DESKTOP_ENVIRONMENT_CINNAMON
-          ? settings_schema = kCinnamonPreferencesSchema
-          : settings_schema = kGnomePreferencesSchema;
+          ? kCinnamonPreferencesSchema
+          : kGnomePreferencesSchema;
 
   if (!g_settings_schema_source_lookup(g_settings_schema_source_get_default(),
                                        settings_schema, FALSE) ||
--- chromium-65.0.3325.51/chrome/browser/vr/sample_queue.h.gcc7	2018-02-06 21:05:25.000000000 +0100
+++ chromium-65.0.3325.51/chrome/browser/vr/sample_queue.h	2018-02-17 20:35:26.406726748 +0100
@@ -6,6 +6,7 @@
 #define CHROME_BROWSER_VR_SAMPLE_QUEUE_H_
 
 #include <vector>
+#include <cstdint>
 
 #include "base/macros.h"
 
--- chromium-65.0.3325.51/content/renderer/render_frame_impl.cc.gcc7	2018-02-06 21:05:32.000000000 +0100
+++ chromium-65.0.3325.51/content/renderer/render_frame_impl.cc	2018-02-17 21:18:53.041128200 +0100
@@ -3115,7 +3115,6 @@
   bool is_reload =
       FrameMsg_Navigate_Type::IsReload(common_params.navigation_type);
   bool is_history_navigation = request_params.page_state.IsValid();
-  auto cache_mode = blink::mojom::FetchCacheMode::kDefault;
   RenderFrameImpl::PrepareRenderViewForNavigation(common_params.url,
                                                   request_params);
 
@@ -3127,7 +3126,6 @@
     // We cannot reload if we do not have any history state.  This happens, for
     // example, when recovering from a crash.
     is_reload = false;
-    cache_mode = blink::mojom::FetchCacheMode::kValidateCache;
   }
 
   // If the navigation is for "view source", the WebLocalFrame needs to be put
