--- chromium-70.0.3528.4/base/callback_internal.cc.gcc8	2018-08-21 11:49:22.000000000 +0200
+++ chromium-70.0.3528.4/base/callback_internal.cc	2018-08-22 03:08:10.825006053 +0200
@@ -21,6 +21,7 @@
       return true;
   }
   NOTREACHED();
+  return false;
 }
 
 }  // namespace
--- chromium-70.0.3528.4/base/bind_internal.h.gcc8	2018-08-21 11:49:22.000000000 +0200
+++ chromium-70.0.3528.4/base/bind_internal.h	2018-08-22 03:12:22.454435946 +0200
@@ -749,6 +749,7 @@
           functor, std::get<indices>(bound_args)...);
   }
   NOTREACHED();
+  return false;
 }
 
 // Relays |base| to corresponding CallbackCancellationTraits<>::Run(). Returns
--- chromium-70.0.3528.4/third_party/webrtc/modules/audio_processing/aec3/reverb_decay_estimator.cc.gcc8	2018-08-21 11:51:22.000000000 +0200
+++ chromium-70.0.3528.4/third_party/webrtc/modules/audio_processing/aec3/reverb_decay_estimator.cc	2018-08-22 10:02:10.195818523 +0200
@@ -269,7 +269,7 @@
   // Arithmetic sum of $2 \sum_{i=0.5}^{(N-1)/2}i^2$ calculated directly.
   nn_ = SymmetricArithmetricSum(N);
   // The linear regression approach assumes symmetric index around 0.
-  count_ = N > 0 ? count_ = -N * 0.5f + 0.5f : 0.f;
+  count_ = N > 0 ? -N * 0.5f + 0.5f : 0.f;
   N_ = N;
   n_ = 0;
 }
--- chromium-70.0.3528.4/net/third_party/quic/core/quic_framer.cc.gcc8	2018-08-22 02:56:37.112699039 +0200
+++ chromium-70.0.3528.4/net/third_party/quic/core/quic_framer.cc	2018-08-22 20:08:42.304813883 +0200
@@ -1208,11 +1208,13 @@
         if (remaining.length() >=
             sizeof(header->possible_stateless_reset_token)) {
           header->has_possible_stateless_reset_token = true;
+#pragma GCC diagnostic ignored "-Wclass-memaccess"
           memcpy(
               &header->possible_stateless_reset_token,
               &remaining.data()[remaining.length() -
                                 sizeof(header->possible_stateless_reset_token)],
               sizeof(header->possible_stateless_reset_token));
+#pragma GCC diagnostic pop
         }
       }
     }
--- chromium-70.0.3528.4/components/viz/common/gl_helper.cc.gcc8	2018-08-21 11:49:36.000000000 +0200
+++ chromium-70.0.3528.4/components/viz/common/gl_helper.cc	2018-08-22 20:20:05.439042583 +0200
@@ -476,7 +476,7 @@
 }
 
 bool GLHelper::CopyTextureToImpl::IsBGRAReadbackSupported() {
-  if (bgra_support_ == BGRA_PREFERENCE_UNKNOWN) {
+  if (bgra_support_ == BGRA_SUPPORT_UNKNOWN) {
     bgra_support_ = BGRA_NOT_SUPPORTED;
     if (auto* extensions = gl_->GetString(GL_EXTENSIONS)) {
       const std::string extensions_string =
--- chromium-70.0.3528.4/gpu/config/gpu_info.cc.gcc8	2018-08-21 11:49:39.000000000 +0200
+++ chromium-70.0.3528.4/gpu/config/gpu_info.cc	2018-08-22 20:36:09.344638527 +0200
@@ -73,6 +73,7 @@
     case OverlayFormat::kNV12:
       return "NV12";
   }
+  return "";
 }
 
 bool OverlayCapability::operator==(const OverlayCapability& other) const {
--- chromium-70.0.3528.4/components/autofill/core/browser/webdata/autofill_wallet_metadata_sync_bridge.cc.gcc8	2018-08-21 11:49:32.000000000 +0200
+++ chromium-70.0.3528.4/components/autofill/core/browser/webdata/autofill_wallet_metadata_sync_bridge.cc	2018-08-22 20:46:18.826814588 +0200
@@ -40,9 +40,10 @@
     case WalletMetadataSpecifics::CARD:
       return "card-" + specifics_id;
     case WalletMetadataSpecifics::UNKNOWN:
-      NOTREACHED();
-      return "";
+      break;
   }
+  NOTREACHED();
+  return "";
 }
 
 // Returns EntityData with common fields set based on |local_data_model|.
--- chromium-70.0.3528.4/components/autofill/core/browser/webdata/autofill_sync_bridge_util.cc.gcc8	2018-08-21 11:49:32.000000000 +0200
+++ chromium-70.0.3528.4/components/autofill/core/browser/webdata/autofill_sync_bridge_util.cc	2018-08-22 20:50:21.920501135 +0200
@@ -29,6 +29,7 @@
     case CreditCard::EXPIRED:
       return sync_pb::WalletMaskedCreditCard::EXPIRED;
   }
+  return sync_pb::WalletMaskedCreditCard::WalletCardStatus(0);
 }
 
 CreditCard::ServerStatus ServerToLocalStatus(
@@ -39,6 +40,7 @@
     case sync_pb::WalletMaskedCreditCard::EXPIRED:
       return CreditCard::EXPIRED;
   }
+  return CreditCard::ServerStatus(0);
 }
 
 sync_pb::WalletMaskedCreditCard::WalletCardType WalletCardTypeFromCardNetwork(
@@ -81,8 +83,9 @@
     case sync_pb::WalletMaskedCreditCard::SOLO:
     case sync_pb::WalletMaskedCreditCard::SWITCH:
     case sync_pb::WalletMaskedCreditCard::UNKNOWN:
-      return kGenericCard;
+      break;
   }
+  return kGenericCard;
 }
 
 sync_pb::WalletMaskedCreditCard::WalletCardClass WalletCardClassFromCardType(
@@ -97,6 +100,7 @@
     case CreditCard::CARD_TYPE_UNKNOWN:
       return sync_pb::WalletMaskedCreditCard::UNKNOWN_CARD_CLASS;
   }
+  return sync_pb::WalletMaskedCreditCard::WalletCardClass(0);
 }
 
 CreditCard::CardType CardTypeFromWalletCardClass(
@@ -109,8 +113,9 @@
     case sync_pb::WalletMaskedCreditCard::PREPAID:
       return CreditCard::CARD_TYPE_PREPAID;
     case sync_pb::WalletMaskedCreditCard::UNKNOWN_CARD_CLASS:
-      return CreditCard::CARD_TYPE_UNKNOWN;
+      break;
   }
+  return CreditCard::CARD_TYPE_UNKNOWN;
 }
 
 }  // namespace
@@ -142,9 +147,10 @@
     case sync_pb::AutofillWalletSpecifics::CUSTOMER_DATA:
       return "customer-" + wallet_data_specifics_id;
     case AutofillWalletSpecifics::UNKNOWN:
-      NOTREACHED();
-      return "";
+      break;
   }
+  NOTREACHED();
+  return "";
 }
 
 void SetAutofillWalletSpecificsFromServerProfile(
--- chromium-70.0.3528.4/components/policy/core/common/cloud/cloud_policy_util.cc.gcc8	2018-08-21 11:49:33.000000000 +0200
+++ chromium-70.0.3528.4/components/policy/core/common/cloud/cloud_policy_util.cc	2018-08-22 20:57:20.438070995 +0200
@@ -160,8 +160,6 @@
 
 em::Channel ConvertToProtoChannel(version_info::Channel channel) {
   switch (channel) {
-    case version_info::Channel::UNKNOWN:
-      return em::CHANNEL_UNKNOWN;
     case version_info::Channel::CANARY:
       return em::CHANNEL_CANARY;
     case version_info::Channel::DEV:
@@ -170,7 +168,10 @@
       return em::CHANNEL_BETA;
     case version_info::Channel::STABLE:
       return em::CHANNEL_STABLE;
+    case version_info::Channel::UNKNOWN:
+      break;
   }
+  return em::CHANNEL_UNKNOWN;
 }
 
 }  // namespace policy
--- chromium-70.0.3528.4/services/network/public/cpp/host_resolver_mojom_traits.cc.gcc8	2018-08-21 11:49:46.000000000 +0200
+++ chromium-70.0.3528.4/services/network/public/cpp/host_resolver_mojom_traits.cc	2018-08-22 21:04:36.936359195 +0200
@@ -15,12 +15,13 @@
                                                   input) {
   switch (input) {
     case net::HostResolver::DnsQueryType::UNSPECIFIED:
-      return ResolveHostParameters::DnsQueryType::UNSPECIFIED;
+      break;
     case net::HostResolver::DnsQueryType::A:
       return ResolveHostParameters::DnsQueryType::A;
     case net::HostResolver::DnsQueryType::AAAA:
       return ResolveHostParameters::DnsQueryType::AAAA;
   }
+  return ResolveHostParameters::DnsQueryType::UNSPECIFIED;
 }
 
 // static
@@ -39,6 +40,7 @@
       *output = net::HostResolver::DnsQueryType::AAAA;
       return true;
   }
+  return false;
 }
 
 }  // namespace mojo
--- chromium-70.0.3528.4/ui/aura/mus/in_flight_change.cc.gcc8	2018-08-21 11:50:32.000000000 +0200
+++ chromium-70.0.3528.4/ui/aura/mus/in_flight_change.cc	2018-08-22 21:28:23.681114458 +0200
@@ -58,6 +58,7 @@
     case ChangeType::VISIBLE:
       return "VISIBLE";
   }
+  return "";
 }
 
 // InFlightChange -------------------------------------------------------------
--- chromium-70.0.3528.4/chrome/browser/media/webrtc/media_stream_capture_indicator.cc.gcc8	2018-08-21 11:49:26.000000000 +0200
+++ chromium-70.0.3528.4/chrome/browser/media/webrtc/media_stream_capture_indicator.cc	2018-08-23 00:51:21.562436998 +0200
@@ -240,9 +240,11 @@
 
     case content::MEDIA_NO_SERVICE:
     case content::NUM_MEDIA_TYPES:
-      NOTREACHED();
-      return video_stream_count_;
+      break;
   }
+
+  NOTREACHED();
+  return video_stream_count_;
 }
 
 MediaStreamCaptureIndicator::MediaStreamCaptureIndicator() {}
--- chromium-70.0.3528.4/chrome/browser/ui/webui/media/media_engagement_ui.cc.gcc8	2018-08-21 11:49:28.000000000 +0200
+++ chromium-70.0.3528.4/chrome/browser/ui/webui/media/media_engagement_ui.cc	2018-08-23 01:36:02.540654647 +0200
@@ -99,6 +99,7 @@
       case content::AutoplayPolicy::kDocumentUserActivationRequired:
         return "document-user-activation-required";
     }
+    return "";
   }
 
   const std::string GetPreloadVersion() {
--- chromium-70.0.3528.4/chrome/browser/ui/autofill/save_card_bubble_controller_impl.cc.gcc8	2018-08-21 11:49:27.000000000 +0200
+++ chromium-70.0.3528.4/chrome/browser/ui/autofill/save_card_bubble_controller_impl.cc	2018-08-23 02:00:07.537955868 +0200
@@ -198,9 +198,10 @@
     case BubbleType::MANAGE_CARDS:
       return l10n_util::GetStringUTF16(IDS_AUTOFILL_CARD_SAVED);
     case BubbleType::INACTIVE:
-      NOTREACHED();
-      return base::string16();
+      break;
   }
+  NOTREACHED();
+  return base::string16();
 }
 
 base::string16 SaveCardBubbleControllerImpl::GetExplanatoryMessage() const {
--- chromium-70.0.3528.4/chrome/browser/ui/views/autofill/local_card_migration_dialog_view.cc.gcc8	2018-08-21 11:49:28.000000000 +0200
+++ chromium-70.0.3528.4/chrome/browser/ui/views/autofill/local_card_migration_dialog_view.cc	2018-08-23 02:06:24.710232264 +0200
@@ -146,6 +146,7 @@ bool LocalCardMigrationDialogView::Accep
     case LocalCardMigrationDialogState::kActionRequired:
       return true;
   }
+  return false;
 }
 
 bool LocalCardMigrationDialogView::Cancel() {
@@ -158,6 +159,7 @@ bool LocalCardMigrationDialogView::Cance
       OnViewCardsButtonClicked();
       return true;
   }
+  return false;
 }
 
 void LocalCardMigrationDialogView::OnWidgetClosing(views::Widget* widget) {
@@ -287,6 +289,7 @@ base::string16 LocalCardMigrationDialogV
       return l10n_util::GetStringUTF16(
           IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_FIX);
   }
+  return base::string16();
 }
 
 base::string16 LocalCardMigrationDialogView::GetDialogInstruction() const {
@@ -303,6 +306,7 @@ base::string16 LocalCardMigrationDialogV
       return l10n_util::GetStringUTF16(
           IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_FIX);
   }
+  return base::string16();
 }
 
 int LocalCardMigrationDialogView::GetHeaderImageId() const {
@@ -319,6 +323,7 @@ base::string16 LocalCardMigrationDialogV
       return l10n_util::GetStringUTF16(
           IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_DONE);
   }
+  return base::string16();
 }
 
 base::string16 LocalCardMigrationDialogView::GetCancelButtonLabel() const {
@@ -331,6 +336,7 @@ base::string16 LocalCardMigrationDialogV
       return l10n_util::GetStringUTF16(
           IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_VIEW_CARDS);
   }
+  return base::string16();
 }
 
 void LocalCardMigrationDialogView::OnSaveButtonClicked() {
--- chromium-70.0.3528.4/third_party/blink/renderer/modules/background_fetch/background_fetch_registration.cc.gcc8	2018-08-21 11:50:19.000000000 +0200
+++ chromium-70.0.3528.4/third_party/blink/renderer/modules/background_fetch/background_fetch_registration.cc	2018-08-24 01:23:50.677245606 +0200
@@ -259,17 +259,17 @@
     case mojom::BackgroundFetchState::SUCCESS:
       return "success";
     case mojom::BackgroundFetchState::FAILURE:
-      return "failure";
+      break;
     case mojom::BackgroundFetchState::PENDING:
       return "pending";
   }
-  NOTREACHED();
+  return "failure";
 }
 
 const String BackgroundFetchRegistration::failureReason() const {
   switch (failure_reason_) {
     case mojom::BackgroundFetchFailureReason::NONE:
-      return "";
+      break;
     case mojom::BackgroundFetchFailureReason::CANCELLED_FROM_UI:
     case mojom::BackgroundFetchFailureReason::CANCELLED_BY_DEVELOPER:
       return "aborted";
@@ -284,6 +284,7 @@
       return "total-download-exceeded";
   }
   NOTREACHED();
+  return "";
 }
 
 void BackgroundFetchRegistration::Dispose() {
--- chromium-70.0.3528.4/third_party/blink/renderer/modules/accessibility/ax_position.cc.gcc8	2018-08-21 11:50:19.000000000 +0200
+++ chromium-70.0.3528.4/third_party/blink/renderer/modules/accessibility/ax_position.cc	2018-08-24 01:39:59.717763044 +0200
@@ -696,7 +696,7 @@
         if (next_object && !next_object->AccessibilityIsIgnored())
           return next_object;
       }
-      return nullptr;
+      break;
     }
 
     case AXPositionAdjustmentBehavior::kMoveLeft: {
@@ -708,9 +708,10 @@
         if (previous_object && !previous_object->AccessibilityIsIgnored())
           return previous_object;
       }
-      return nullptr;
+      break;
     }
   }
+  return nullptr;
 }
 
 bool operator==(const AXPosition& a, const AXPosition& b) {
--- chromium-70.0.3528.4/third_party/blink/renderer/platform/scheduler/common/metrics_helper.cc.gcc8	2018-08-21 11:50:20.000000000 +0200
+++ chromium-70.0.3528.4/third_party/blink/renderer/platform/scheduler/common/metrics_helper.cc	2018-08-24 02:02:26.257496527 +0200
@@ -42,9 +42,10 @@
     case WebThreadType::kTestThread:
       return scheduling_metrics::ThreadType::kRendererOtherBlinkThread;
     case WebThreadType::kCount:
-      NOTREACHED();
-      return scheduling_metrics::ThreadType::kCount;
+      break;
   }
+  NOTREACHED();
+  return scheduling_metrics::ThreadType::kCount;
 }
 
 }  // namespace
--- chromium-70.0.3528.4/third_party/blink/renderer/modules/storage/cached_storage_area.cc.gcc8	2018-08-21 11:50:19.000000000 +0200
+++ chromium-70.0.3528.4/third_party/blink/renderer/modules/storage/cached_storage_area.cc	2018-08-24 02:21:38.087682075 +0200
@@ -625,6 +625,7 @@
     }
   }
   NOTREACHED();
+  return Vector<uint8_t>();
 }
 
 }  // namespace blink
--- chromium-70.0.3528.4/v8/src/interface-descriptors.h.gcc8	2018-08-24 20:21:09.588641771 +0200
+++ chromium-70.0.3528.4/v8/src/interface-descriptors.h	2018-08-24 20:24:49.422023115 +0200
@@ -328,8 +328,8 @@
       CallInterfaceDescriptorData::kNoFlags;              \
   static constexpr int kReturnCount = return_count;       \
   enum ParameterIndices {                                 \
-    __dummy = -1, /* to be able to pass zero arguments */ \
-    ##__VA_ARGS__,                                        \
+    __dummy = -1 __VA_OPT__(,) /* to be able to pass zero arguments */ \
+    __VA_ARGS__,                                        \
                                                           \
     kParameterCount,                                      \
     kContext = kParameterCount /* implicit parameter */   \
@@ -340,8 +340,8 @@
       CallInterfaceDescriptorData::kNoContext;                     \
   static constexpr int kReturnCount = return_count;                \
   enum ParameterIndices {                                          \
-    __dummy = -1, /* to be able to pass zero arguments */          \
-    ##__VA_ARGS__,                                                 \
+    __dummy = -1 __VA_OPT__(,) /* to be able to pass zero arguments */ \
+    __VA_ARGS__,                                                   \
                                                                    \
     kParameterCount                                                \
   };
@@ -374,8 +374,8 @@
   enum ParameterIndices {                               \
     kTarget,                                            \
     kNewTarget,                                         \
-    kActualArgumentsCount,                              \
-    ##__VA_ARGS__,                                      \
+    kActualArgumentsCount __VA_OPT__(,)                 \
+    __VA_ARGS__,                                        \
                                                         \
     kParameterCount,                                    \
     kContext = kParameterCount /* implicit parameter */ \
--- chromium-70.0.3528.4/content/browser/media/capture/mouse_cursor_overlay_controller_aura.cc.gcc8	2018-08-21 11:49:37.000000000 +0200
+++ chromium-70.0.3528.4/content/browser/media/capture/mouse_cursor_overlay_controller_aura.cc	2018-08-28 16:24:08.166914370 +0200
@@ -174,7 +174,7 @@
   if (auto* window = Observer::GetTargetWindow(observer_)) {
     const gfx::Size window_size = window->bounds().size();
     if (!window_size.IsEmpty()) {
-      if (auto* root_window = window->GetRootWindow()) {
+      if (window->GetRootWindow() != nullptr) {
         // Compute the cursor size in terms of DIP coordinates.
         const SkBitmap& bitmap = cursor.GetBitmap();
         const float scale_factor = cursor.device_scale_factor();
--- chromium-70.0.3528.4/third_party/blink/renderer/core/layout/layout_view.cc.gcc8	2018-08-21 11:50:18.000000000 +0200
+++ chromium-70.0.3528.4/third_party/blink/renderer/core/layout/layout_view.cc	2018-08-28 16:26:59.078801346 +0200
@@ -878,8 +878,7 @@
   if (result) {
     // Changing overflow should notify scrolling coordinator to ensures that it
     // updates non-fast scroll rects even if there is no layout.
-    if (ScrollingCoordinator* scrolling_coordinator =
-            GetDocument().GetPage()->GetScrollingCoordinator()) {
+    if (GetDocument().GetPage()->GetScrollingCoordinator() != nullptr) {
       GetFrameView()->GetScrollingContext()->SetScrollGestureRegionIsDirty(
           true);
     }
--- chromium-70.0.3534.4/components/download/internal/common/download_item_impl.cc.gcc8	2018-08-28 06:10:09.000000000 +0200
+++ chromium-70.0.3534.4/components/download/internal/common/download_item_impl.cc	2018-08-29 00:32:15.471092558 +0200
@@ -808,7 +808,7 @@
 }
 
 base::FilePath DownloadItemImpl::GetTemporaryFilePath() const {
-  if (state_ == TARGET_PENDING_INTERNAL || INTERRUPTED_TARGET_PENDING_INTERNAL)
+  if ((state_ == TARGET_PENDING_INTERNAL) || (state_ == INTERRUPTED_TARGET_PENDING_INTERNAL))
     return download_file_ ? download_file_->FullPath() : base::FilePath();
   return base::FilePath();
 }
--- chromium-70.0.3534.4/chrome/browser/ui/views/autofill/autofill_popup_view_native_views.cc.gcc8	2018-08-28 06:10:02.000000000 +0200
+++ chromium-70.0.3534.4/chrome/browser/ui/views/autofill/autofill_popup_view_native_views.cc	2018-09-02 20:11:43.836062117 +0200
@@ -101,6 +101,7 @@ PopupItemLayoutType GetLayoutType(int fr
           return PopupItemLayoutType::kTrailingIcon;
       }
   }
+  return PopupItemLayoutType::kTrailingIcon;
 }
 
 // Container view that holds one child view and limits its width to the
@@ -532,7 +533,7 @@ bool AutofillPopupSuggestionView::Should
     gfx::Font::Weight* font_weight) const {
   switch (autofill::GetForcedFontWeight()) {
     case ForcedFontWeight::kDefault:
-      return false;
+      break;
 
     case ForcedFontWeight::kMedium:
       *font_weight = views::TypographyProvider::MediumWeightForUI();
@@ -542,6 +543,7 @@ bool AutofillPopupSuggestionView::Should
       *font_weight = gfx::Font::Weight::BOLD;
       return true;
   }
+  return false;
 }
 
 AutofillPopupSuggestionView::AutofillPopupSuggestionView(
--- chromium-70.0.3534.4/content/browser/background_fetch/background_fetch_job_controller.cc.gcc8	2018-08-28 06:10:15.000000000 +0200
+++ chromium-70.0.3534.4/content/browser/background_fetch/background_fetch_job_controller.cc	2018-09-02 22:09:28.242971914 +0200
@@ -157,7 +157,7 @@
 BackgroundFetchJobController::MojoFailureReason() const {
   switch (reason_to_abort_) {
     case BackgroundFetchReasonToAbort::NONE:
-      return blink::mojom::BackgroundFetchFailureReason::NONE;
+      break;
     case BackgroundFetchReasonToAbort::CANCELLED_FROM_UI:
       return blink::mojom::BackgroundFetchFailureReason::CANCELLED_FROM_UI;
     case BackgroundFetchReasonToAbort::ABORTED_BY_DEVELOPER:
@@ -171,7 +171,7 @@
     case BackgroundFetchReasonToAbort::QUOTA_EXCEEDED:
       return blink::mojom::BackgroundFetchFailureReason::QUOTA_EXCEEDED;
   }
-  NOTREACHED();
+  return blink::mojom::BackgroundFetchFailureReason::NONE;
 }
 
 void BackgroundFetchJobController::Abort(
--- chromium-70.0.3534.4/pdf/pdfium/pdfium_mem_buffer_file_write.h.gcc8	2018-08-28 06:10:30.000000000 +0200
+++ chromium-70.0.3534.4/pdf/pdfium/pdfium_mem_buffer_file_write.h	2018-09-03 00:10:44.124607097 +0200
@@ -6,6 +6,7 @@
 #define PDF_PDFIUM_PDFIUM_MEM_BUFFER_FILE_WRITE_H_
 
 #include <stddef.h>
+#include <cstdint>
 
 #include <vector>
 
--- chromium-70.0.3534.4/third_party/pdfium/third_party/base/optional.h.gcc8	2018-08-28 06:12:17.000000000 +0200
+++ chromium-70.0.3534.4/third_party/pdfium/third_party/base/optional.h	2018-09-03 00:37:03.805402420 +0200
@@ -6,6 +6,8 @@
 #define PDFIUM_THIRD_PARTY_BASE_OPTIONAL_H_
 
 #include <type_traits>
+#include <utility>
+#include <functional>
 
 #include "third_party/base/logging.h"
 
--- chromium-70.0.3534.4/third_party/blink/renderer/core/animation/animation_time_delta.h.gcc8	2018-08-28 06:11:07.000000000 +0200
+++ chromium-70.0.3534.4/third_party/blink/renderer/core/animation/animation_time_delta.h	2018-09-03 01:38:14.169583523 +0200
@@ -53,7 +53,7 @@
     return AnimationTimeDelta(std::numeric_limits<double>::infinity());
   }
 
-  double InSecondsF() const { return delta_; }
+  constexpr double InSecondsF() const { return delta_; }
   double InMillisecondsF() const { return delta_ * 1000; }
 
   bool is_max() const {
--- chromium-70.0.3538.22/components/metrics/call_stack_profile_metrics_provider.cc.gcc8	2018-09-19 21:10:37.000000000 +0200
+++ chromium-70.0.3538.22/components/metrics/call_stack_profile_metrics_provider.cc	2018-09-23 20:01:07.435532483 +0200
@@ -74,9 +74,6 @@
   // provided to future invocations of CollectProfilesIfCollectionEnabled.
   void SetCollectionEnabled(bool enabled);
 
-  // True if profiles are being collected.
-  bool IsCollectionEnabled() const;
-
   // Adds |profile| to the list of profiles if collection is enabled; it is
   // not const& because it must be passed with std::move.
   void CollectProfilesIfCollectionEnabled(ProfileState profile);
@@ -135,11 +132,6 @@
   }
 }
 
-bool PendingProfiles::IsCollectionEnabled() const {
-  base::AutoLock scoped_lock(lock_);
-  return collection_enabled_;
-}
-
 void PendingProfiles::CollectProfilesIfCollectionEnabled(ProfileState profile) {
   base::AutoLock scoped_lock(lock_);
 
--- chromium-70.0.3538.22/media/audio/audio_processing.cc.gcc8	2018-09-19 21:10:51.000000000 +0200
+++ chromium-70.0.3538.22/media/audio/audio_processing.cc	2018-09-23 20:14:22.964158434 +0200
@@ -12,7 +12,7 @@
   auto agc_to_string = [](AutomaticGainControlType type) -> const char* {
     switch (type) {
       case AutomaticGainControlType::kDisabled:
-        return "disabled";
+        break;
       case AutomaticGainControlType::kDefault:
         return "default";
       case AutomaticGainControlType::kExperimental:
@@ -20,12 +20,13 @@
       case AutomaticGainControlType::kHybridExperimental:
         return "hybrid experimental";
     }
+    return "disabled";
   };
 
   auto aec_to_string = [](EchoCancellationType type) -> const char* {
     switch (type) {
       case EchoCancellationType::kDisabled:
-        return "disabled";
+        break;
       case EchoCancellationType::kAec2:
         return "aec2";
       case EchoCancellationType::kAec3:
@@ -33,17 +34,19 @@
       case EchoCancellationType::kSystemAec:
         return "system aec";
     }
+    return "disabled";
   };
 
   auto ns_to_string = [](NoiseSuppressionType type) -> const char* {
     switch (type) {
       case NoiseSuppressionType::kDisabled:
-        return "disabled";
+        break;
       case NoiseSuppressionType::kDefault:
         return "default";
       case NoiseSuppressionType::kExperimental:
         return "experimental";
     }
+    return "disabled";
   };
 
   auto bool_to_yes_no = [](bool b) -> const char* { return b ? "yes" : "no"; };
--- chromium-70.0.3538.22/components/viz/host/gpu_host_impl.cc.gcc8	2018-09-19 21:10:42.000000000 +0200
+++ chromium-70.0.3538.22/components/viz/host/gpu_host_impl.cc	2018-09-23 22:14:53.434515786 +0200
@@ -46,7 +46,6 @@ class FontRenderParams {
   friend class base::NoDestructor<FontRenderParams>;
 
   FontRenderParams();
-  ~FontRenderParams();
 
   THREAD_CHECKER(thread_checker_);
   base::Optional<gfx::FontRenderParams> params_;
@@ -66,10 +65,6 @@ const base::Optional<gfx::FontRenderPara
 
 FontRenderParams::FontRenderParams() = default;
 
-FontRenderParams::~FontRenderParams() {
-  NOTREACHED();
-}
-
 FontRenderParams& GetFontRenderParams() {
   static base::NoDestructor<FontRenderParams> instance;
   return *instance;
--- chromium-70.0.3538.22/chrome/browser/ui/views/omnibox/omnibox_text_view.cc.gcc8	2018-09-19 21:10:31.000000000 +0200
+++ chromium-70.0.3538.22/chrome/browser/ui/views/omnibox/omnibox_text_view.cc	2018-09-23 22:37:28.291834783 +0200
@@ -175,7 +175,7 @@ void ApplyTextStyleForType(SuggestionAns
       style = {part_color, .baseline = gfx::SUPERIOR};
       break;
     case SuggestionAnswer::TextStyle::BOLD:
-      style = {part_color, .weight = gfx::Font::Weight::BOLD};
+      style = {part_color, gfx::NORMAL_BASELINE, gfx::Font::Weight::BOLD};
       break;
     case SuggestionAnswer::TextStyle::NORMAL:
     case SuggestionAnswer::TextStyle::NORMAL_DIM:
--- chromium-70.0.3538.22/third_party/blink/renderer/platform/graphics/paint/scroll_paint_property_node.h.gcc8	2018-09-19 21:11:35.000000000 +0200
+++ chromium-70.0.3538.22/third_party/blink/renderer/platform/graphics/paint/scroll_paint_property_node.h	2018-09-24 00:24:20.825990817 +0200
@@ -99,7 +99,7 @@ class PLATFORM_EXPORT ScrollPaintPropert
     return state_.overscroll_behavior.y;
   }
 
-  base::Optional<SnapContainerData> SnapContainerData() const {
+  base::Optional<SnapContainerData> getSnapContainerData() const {
     return state_.snap_container_data;
   }
 
--- chromium-70.0.3538.22/third_party/blink/renderer/core/loader/mixed_content_checker.cc.gcc8	2018-09-19 21:11:34.000000000 +0200
+++ chromium-70.0.3538.22/third_party/blink/renderer/core/loader/mixed_content_checker.cc	2018-09-24 02:43:04.295333866 +0200
@@ -238,11 +238,12 @@ bool MixedContentChecker::IsMixedContent
     const KURL& url) {
   switch (settings.GetHttpsState()) {
     case HttpsState::kNone:
-      return false;
+      break;
 
     case HttpsState::kModern:
       return IsInsecureUrl(url);
   }
+  return false;
 }
 
 // static
--- chromium-70.0.3538.22/third_party/blink/renderer/platform/graphics/compositing/property_tree_manager.cc.gcc8	2018-09-19 21:11:35.000000000 +0200
+++ chromium-70.0.3538.22/third_party/blink/renderer/platform/graphics/compositing/property_tree_manager.cc	2018-09-24 03:27:36.289874239 +0200
@@ -299,7 +299,7 @@ void PropertyTreeManager::CreateComposit
           scroll_node->OverscrollBehaviorX()),
       static_cast<cc::OverscrollBehavior::OverscrollBehaviorType>(
           scroll_node->OverscrollBehaviorY()));
-  compositor_node.snap_container_data = scroll_node->SnapContainerData();
+  compositor_node.snap_container_data = scroll_node->getSnapContainerData();
 
   auto compositor_element_id = scroll_node->GetCompositorElementId();
   if (compositor_element_id) {
--- chromium-70.0.3538.22/third_party/blink/renderer/platform/graphics/paint/scroll_paint_property_node.cc.gcc8	2018-09-19 21:11:35.000000000 +0200
+++ chromium-70.0.3538.22/third_party/blink/renderer/platform/graphics/paint/scroll_paint_property_node.cc	2018-09-24 03:31:06.508249594 +0200
@@ -12,14 +12,13 @@ WTF::String OverscrollBehaviorTypeToStri
     OverscrollBehavior::OverscrollBehaviorType value) {
   switch (value) {
     case OverscrollBehavior::kOverscrollBehaviorTypeNone:
-      return "none";
+      break;
     case OverscrollBehavior::kOverscrollBehaviorTypeAuto:
       return "auto";
     case OverscrollBehavior::kOverscrollBehaviorTypeContain:
       return "contain";
-    default:
-      NOTREACHED();
   }
+  return "none";
 }
 
 }  // namespace
--- chromium-70.0.3538.22/content/renderer/media/stream/media_stream_audio_processor_options.cc.gcc8	2018-09-19 21:10:43.000000000 +0200
+++ chromium-70.0.3538.22/content/renderer/media/stream/media_stream_audio_processor_options.cc	2018-09-24 03:46:13.701580453 +0200
@@ -63,7 +63,7 @@ AudioProcessingProperties::ToAudioProces
       [](EchoCancellationType type) -> media::EchoCancellationType {
     switch (type) {
       case EchoCancellationType::kEchoCancellationDisabled:
-        return media::EchoCancellationType::kDisabled;
+        break;
       case EchoCancellationType::kEchoCancellationAec2:
         return media::EchoCancellationType::kAec2;
       case EchoCancellationType::kEchoCancellationAec3:
@@ -71,6 +71,7 @@ AudioProcessingProperties::ToAudioProces
       case EchoCancellationType::kEchoCancellationSystem:
         return media::EchoCancellationType::kSystemAec;
     }
+    return media::EchoCancellationType::kDisabled;
   };
 
   out.echo_cancellation = convert_type(echo_cancellation_type);
--- chromium-70.0.3538.22/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc.gcc8	2018-09-19 21:11:35.000000000 +0200
+++ chromium-70.0.3538.22/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc	2018-09-24 22:40:30.244928180 +0200
@@ -5141,10 +5141,6 @@ void WebGLRenderingContextBase::TexImage
     possible_direct_copy = Extensions3DUtil::CanUseCopyTextureCHROMIUM(target);
   }
 
-  GLint copy_x_offset = xoffset;
-  GLint copy_y_offset = yoffset;
-  GLenum copy_target = target;
-
   // if direct copy is not possible, create a temporary texture and then copy
   // from canvas to temporary texture to target texture.
   if (!possible_direct_copy) {
@@ -5160,9 +5156,6 @@ void WebGLRenderingContextBase::TexImage
                                GL_CLAMP_TO_EDGE);
     ContextGL()->TexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0,
                             GL_RGBA, GL_UNSIGNED_BYTE, nullptr);
-    copy_x_offset = 0;
-    copy_y_offset = 0;
-    copy_target = GL_TEXTURE_2D;
   }
 
   {
--- chromium-70.0.3538.77/components/autofill/core/browser/autofill_external_delegate.cc.gcc8	2018-10-24 23:53:53.000000000 +0200
+++ chromium-70.0.3538.77/components/autofill/core/browser/autofill_external_delegate.cc	2018-10-26 02:00:39.324314590 +0200
@@ -442,9 +442,10 @@ base::string16 AutofillExternalDelegate:
       return l10n_util::GetStringUTF16(IDS_AUTOFILL_MANAGE);
 
     case PopupType::kPasswords:
-      NOTREACHED();
-      return base::string16();
+    	break;
   }
+  NOTREACHED();
+  return base::string16();
 }
 
 }  // namespace autofill
