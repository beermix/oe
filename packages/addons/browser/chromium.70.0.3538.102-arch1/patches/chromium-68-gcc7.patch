--- chromium-68.0.3418.2/base/allocator/partition_allocator/partition_alloc_constants.h.gcc7	2018-05-04 06:05:09.000000000 +0200
+++ chromium-68.0.3418.2/base/allocator/partition_allocator/partition_alloc_constants.h	2018-05-07 23:44:01.047768997 +0200
@@ -9,6 +9,8 @@
 #include "base/bits.h"
 #include "base/logging.h"
 
+#include <climits>
+
 namespace base {
 
 // Allocation granularity of sizeof(void*) bytes.
--- chromium-68.0.3418.2/media/capture/video/video_capture_device_descriptor.cc.gcc7	2018-05-04 06:05:23.000000000 +0200
+++ chromium-68.0.3418.2/media/capture/video/video_capture_device_descriptor.cc	2018-05-08 01:07:51.984718931 +0200
@@ -93,6 +93,7 @@
     case VideoCaptureApi::VIRTUAL_DEVICE:
       return "Virtual Device";
     case VideoCaptureApi::UNKNOWN:
+    default:
       return "Unknown";
   }
 }
--- chromium-68.0.3418.2/net/nqe/network_quality_estimator.cc.gcc7	2018-05-04 06:05:25.000000000 +0200
+++ chromium-68.0.3418.2/net/nqe/network_quality_estimator.cc	2018-05-08 01:51:43.640113593 +0200
@@ -1307,6 +1307,7 @@
                              percentile, observations_count)
               .value_or(nqe::internal::INVALID_RTT_THROUGHPUT));
     case nqe::internal::OBSERVATION_CATEGORY_COUNT:
+    default:
       NOTREACHED();
       return base::TimeDelta();
   }
--- chromium-68.0.3418.2/components/cast_channel/cast_message_util.cc.gcc7	2018-05-04 06:05:16.000000000 +0200
+++ chromium-68.0.3418.2/components/cast_channel/cast_message_util.cc	2018-05-08 03:30:15.218856130 +0200
@@ -284,6 +284,7 @@
     case GetAppAvailabilityResult::kUnavailable:
       return "unavailable";
     case GetAppAvailabilityResult::kUnknown:
+    default:
       return "unknown";
   }
 }
--- chromium-68.0.3418.2/services/network/cross_origin_read_blocking.cc.gcc7	2018-05-04 06:05:26.000000000 +0200
+++ chromium-68.0.3418.2/services/network/cross_origin_read_blocking.cc	2018-05-08 04:58:22.484383246 +0200
@@ -729,6 +729,7 @@
     case kNeedToSniffMore:
       return sniffers_.empty() && !found_blockable_content_;
     case kBlock:
+    default:
       return false;
   }
 }
@@ -740,6 +741,7 @@
     case kNeedToSniffMore:
       return sniffers_.empty() && found_blockable_content_;
     case kBlock:
+    default:
       return true;
   }
 }
--- chromium-68.0.3418.2/third_party/blink/renderer/modules/webaudio/audio_param.cc.gcc7	2018-05-04 06:05:50.000000000 +0200
+++ chromium-68.0.3418.2/third_party/blink/renderer/modules/webaudio/audio_param.cc	2018-05-13 16:16:36.362212522 +0200
@@ -144,6 +144,7 @@
       return custom_param_name_;
     default:
       NOTREACHED();
+      return "";
   }
 }
 
--- chromium-68.0.3440.7/third_party/crashpad/crashpad/util/net/http_transport_socket.cc.gcc7	2018-05-31 12:46:18.000000000 +0200
+++ chromium-68.0.3440.7/third_party/crashpad/crashpad/util/net/http_transport_socket.cc	2018-06-02 15:30:05.860916765 +0200
@@ -210,8 +210,13 @@ bool WriteRequest(int sock,
   do {
     constexpr size_t kCRLFSize = arraysize(kCRLFTerminator) - 1;
     struct __attribute__((packed)) {
-      char size[8];
-      char crlf[2];
+      union {
+        struct {
+          char size[8];
+          char crlf[2];
+        };
+        char size_and_crlf[10];
+      };
       uint8_t data[32 * 1024 + kCRLFSize];
     } buf;
     static_assert(
@@ -238,7 +243,7 @@ bool WriteRequest(int sock,
 
       // Not snprintf because non-null terminated is desired.
       int rv = sprintf(
-          buf.size, "%08x", base::checked_cast<unsigned int>(data_bytes));
+          buf.size_and_crlf, "%08x", base::checked_cast<unsigned int>(data_bytes));
       DCHECK_GE(rv, 0);
       DCHECK_EQ(static_cast<size_t>(rv), sizeof(buf.size));
       DCHECK_NE(buf.size[sizeof(buf.size) - 1], '\0');
--- chromium-68.0.3440.7/services/audio/public/cpp/audio_system_to_service_adapter.cc.gcc7	2018-05-31 12:45:46.000000000 +0200
+++ chromium-68.0.3440.7/services/audio/public/cpp/audio_system_to_service_adapter.cc	2018-06-02 16:23:31.460186468 +0200
@@ -68,6 +68,7 @@
       return "AudioSystemToServiceAdapter::GetInputDeviceInfo";
   }
   NOTREACHED();
+  return NULL;
 }
 
 void LogUMA(Action action, base::TimeTicks start_time) {
--- chromium-68.0.3440.7/cc/input/snap_fling_controller.cc.gcc7	2018-05-31 12:45:27.000000000 +0200
+++ chromium-68.0.3440.7/cc/input/snap_fling_controller.cc	2018-06-02 16:44:43.320656957 +0200
@@ -27,6 +27,8 @@
       return state_ == State::kActive || state_ == State::kFinished;
     }
   }
+  // should not be reached
+  return false;
 }
 
 void SnapFlingController::ClearSnapFling() {
--- chromium-68.0.3440.7/components/bookmarks/browser/bookmark_storage.h.gcc7	2018-05-31 12:45:36.000000000 +0200
+++ chromium-68.0.3440.7/components/bookmarks/browser/bookmark_storage.h	2018-06-02 16:54:37.974209537 +0200
@@ -19,6 +19,7 @@
 #include "base/memory/weak_ptr.h"
 #include "components/bookmarks/browser/bookmark_node.h"
 #include "components/bookmarks/browser/titled_url_index.h"
+#include "components/bookmarks/browser/url_index.h"
 
 namespace base {
 class SequencedTaskRunner;
@@ -29,7 +30,6 @@
 class BookmarkClient;
 class BookmarkModel;
 class BookmarkNode;
-class UrlIndex;
 
 // A list of BookmarkPermanentNodes that owns them.
 using BookmarkPermanentNodeList =
--- chromium-68.0.3440.7/components/autofill/core/browser/autofill_manager.cc.gcc7	2018-05-31 12:45:36.000000000 +0200
+++ chromium-68.0.3440.7/components/autofill/core/browser/autofill_manager.cc	2018-06-02 17:06:51.007106694 +0200
@@ -303,6 +303,7 @@ PopupType AutofillManager::GetPopupType(
 
     default:
       NOTREACHED();
+      return PopupType::kUnspecified;
   }
 }
 
--- chromium-68.0.3440.7/content/browser/web_package/signed_exchange_handler.cc.gcc7	2018-05-31 12:45:40.000000000 +0200
+++ chromium-68.0.3440.7/content/browser/web_package/signed_exchange_handler.cc	2018-06-02 19:13:50.092986453 +0200
@@ -480,7 +480,7 @@
         base::StringPrintf(
             "OCSP check failed. response status: %d, revocation status: %d",
             cv_result.ocsp_result.response_status,
-            cv_result.ocsp_result.revocation_status),
+            int(cv_result.ocsp_result.revocation_status)),
         std::make_pair(0 /* signature_index */,
                        SignedExchangeError::Field::kSignatureCertUrl));
     RunErrorCallback(net::ERR_INVALID_SIGNED_EXCHANGE);
--- chromium-68.0.3440.7/content/browser/cache_storage/cache_storage_quota_client.cc.gcc7	2018-05-31 12:45:39.000000000 +0200
+++ chromium-68.0.3440.7/content/browser/cache_storage/cache_storage_quota_client.cc	2018-06-02 19:36:54.786503931 +0200
@@ -99,6 +99,7 @@
     case CacheStorageOwner::kBackgroundFetch:
       return kBackgroundFetch;
   }
+  return storage::QuotaClient::ID(0);
 }
 
 }  // namespace content
--- chromium-68.0.3440.7/content/browser/renderer_host/render_widget_host_view_base.cc.gcc7	2018-05-31 12:45:40.000000000 +0200
+++ chromium-68.0.3440.7/content/browser/renderer_host/render_widget_host_view_base.cc	2018-06-02 20:27:56.685605639 +0200
@@ -227,7 +227,7 @@
   if (default_background_color_ == color)
     return;
 
-  bool opaque = default_background_color_
+  int opaque = default_background_color_
                     ? SkColorGetA(*default_background_color_)
                     : SK_AlphaOPAQUE;
   default_background_color_ = color;
--- chromium-68.0.3440.7/ui/accessibility/platform/ax_platform_node_auralinux.cc.gcc7	2018-05-31 12:46:30.000000000 +0200
+++ chromium-68.0.3440.7/ui/accessibility/platform/ax_platform_node_auralinux.cc	2018-06-02 20:45:03.373900877 +0200
@@ -1289,6 +1289,8 @@ AtkRole AXPlatformNodeAuraLinux::GetAtkR
     case ax::mojom::Role::kUnknown:
       return ATK_ROLE_REDUNDANT_OBJECT;
   }
+  // should not be reached
+  return AtkRole(0);
 }
 
 void AXPlatformNodeAuraLinux::GetAtkState(AtkStateSet* atk_state_set) {
--- chromium-68.0.3440.7/ui/aura/hit_test_data_provider_aura.cc.gcc7	2018-05-31 12:46:30.000000000 +0200
+++ chromium-68.0.3440.7/ui/aura/hit_test_data_provider_aura.cc	2018-06-02 20:55:53.154472628 +0200
@@ -53,8 +53,8 @@
   hit_test_region_list->flags =
       event_targeting_policy ==
               ws::mojom::EventTargetingPolicy::DESCENDANTS_ONLY
-          ? viz::HitTestRegionFlags::kHitTestIgnore
-          : viz::HitTestRegionFlags::kHitTestMine;
+          ? uint32_t(viz::HitTestRegionFlags::kHitTestIgnore)
+          : uint32_t(viz::HitTestRegionFlags::kHitTestMine);
   // TODO(crbug.com/805416): Use pixels instead of DIP units for bounds.
   hit_test_region_list->bounds = window_->bounds();
 
--- chromium-68.0.3440.7/third_party/blink/renderer/modules/accessibility/ax_layout_object.cc.gcc7	2018-05-31 12:46:13.000000000 +0200
+++ chromium-68.0.3440.7/third_party/blink/renderer/modules/accessibility/ax_layout_object.cc	2018-06-03 01:23:30.476302728 +0200
@@ -1140,6 +1140,7 @@
     case EVerticalAlign::kSuper:
       return kAXTextPositionSuperscript;
   }
+  return AXTextPosition(0);
 }
 
 int AXLayoutObject::TextLength() const {
