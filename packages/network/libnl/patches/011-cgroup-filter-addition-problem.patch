commit daa4a68177a26dcf6c7185d82cafdee5fe22f2ec
Author: Thomas Haller <thaller@redhat.com>
Date:   Mon Feb 12 14:10:18 2018 +0100

    lib: merge implementations of nl_attr_end() and nl_attr_keep_empty()

    Both functions are almost identical. Merge them into a common helper
    function with an @keep_empty argument, so it is clear at which point
    they differ.

    Also, fix symbols versioning for nl_attr_keep_empty(). For symbol
    versioning, once released a version cannot be modifified/extended.

commit 52057832033ac8f6c6969e4ae3a7e65db1c9f540
Author: d0u9 <d0u9.su@outlook.com>
Date:   Tue Jan 23 14:13:43 2018 +0800

    Fix for cgroup filter addition problem.

    Currently, due to the incomplete netlink datagram sent by libnl, cgroup
    filter addition is not fully functional. The datagram generated by `tc`
    command includes an empty attribute section, which is stripped off
    in the libnl counterpart.

    In this commit, a new `interface nla_nest_end_keep_empty()` is added.
    This function closes attribute without stripping off empty attribute.

--- a/include/netlink/attr.h
+++ b/include/netlink/attr.h
@@ -143,6 +143,7 @@ extern int		nla_put_nested(struct nl_msg
 				       const struct nl_msg *);
 extern struct nlattr *	nla_nest_start(struct nl_msg *, int);
 extern int		nla_nest_end(struct nl_msg *, struct nlattr *);
+extern int		nla_nest_end_keep_empty(struct nl_msg *, struct nlattr *);
 extern void		nla_nest_cancel(struct nl_msg *, const struct nlattr *);
 extern int		nla_parse_nested(struct nlattr **, int, struct nlattr *,
 					 const struct nla_policy *);
--- a/lib/attr.c
+++ b/lib/attr.c
@@ -912,22 +912,14 @@ struct nlattr *nla_nest_start(struct nl_
 	return start;
 }
 
-/**
- * Finalize nesting of attributes.
- * @arg msg		Netlink message.
- * @arg start		Container attribute as returned from nla_nest_start().
- *
- * Corrects the container attribute header to include the appeneded attributes.
- *
- * @return 0 on success or a negative error code.
- */
-int nla_nest_end(struct nl_msg *msg, struct nlattr *start)
+static int _nest_end(struct nl_msg *msg, struct nlattr *start, int keep_empty)
 {
 	size_t pad, len;
 
 	len = (void *) nlmsg_tail(msg->nm_nlh) - (void *) start;
 
-	if (len == NLA_HDRLEN || len > USHRT_MAX) {
+	if (   len > USHRT_MAX
+	    || (!keep_empty && len == NLA_HDRLEN)) {
 		/*
 		 * Max nlattr size exceeded or empty nested attribute, trim the
 		 * attribute header again
@@ -962,6 +954,35 @@ int nla_nest_end(struct nl_msg *msg, str
 }
 
 /**
+ * Finalize nesting of attributes.
+ * @arg msg		Netlink message.
+ * @arg start		Container attribute as returned from nla_nest_start().
+ *
+ * Corrects the container attribute header to include the appeneded attributes.
+ *
+ * @return 0 on success or a negative error code.
+ */
+int nla_nest_end(struct nl_msg *msg, struct nlattr *start)
+{
+	return _nest_end (msg, start, 0);
+}
+
+/**
+ * Finalize nesting of attributes without stripping off empty attributes.
+ * @arg msg		Netlink message.
+ * @arg start		Container attribute as returned from nla_nest_start().
+ *
+ * Corrects the container attribute header to include the appeneded attributes.
+ * Keep empty attribute if NO actual attribute payload exists.
+ *
+ * @return 0 on success or a negative error code.
+ */
+int nla_nest_end_keep_empty(struct nl_msg *msg, struct nlattr *start)
+{
+	return _nest_end (msg, start, 1);
+}
+
+/**
  * Cancel the addition of a nested attribute
  * @arg msg		Netlink message
  * @arg attr		Nested netlink attribute
--- a/lib/route/tc.c
+++ b/lib/route/tc.c
@@ -226,7 +226,10 @@ int rtnl_tc_msg_build(struct rtnl_tc *tc
 			if ((err = ops->to_msg_fill(tc, data, msg)) < 0)
 				goto nla_put_failure;
 
-			nla_nest_end(msg, opts);
+			if (strcmp("cgroup", tc->tc_kind))
+				nla_nest_end(msg, opts);
+			else
+				nla_nest_end_keep_empty(msg, opts);
 		} else if ((err = ops->to_msg_fill_raw(tc, data, msg)) < 0)
 			goto nla_put_failure;
 	}
--- a/libnl-3.sym
+++ b/libnl-3.sym
@@ -358,3 +358,8 @@ global:
 	nl_cache_mngr_add_cache_v2;
 	nl_strerror_l;
 } libnl_3_2_28;
+
+libnl_3_5 {
+global:
+	nla_nest_end_keep_empty;
+} libnl_3_2_29;
