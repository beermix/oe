commit 76e5399dab25969e2e2513450aa800f8841d5b89
Author: Thomas Haller <thaller@redhat.com>
Date:   Tue Jan 16 07:23:51 2018 +0100

    route: free previous data in rtnl_netem_set_delay_distribution_data()

    Otherwise, calling rtnl_netem_set_delay_distribution_data() will
    leak memory, and that should just be supported.

    Also, handle failure to allocate memory.

commit 22f8e867bac80b8c2e0cd16165e0844bdd3d618b
Author: Thomas Haller <thaller@redhat.com>
Date:   Tue Jan 16 07:18:19 2018 +0100

    route: fix memleak in rtnl_netem_set_delay_distribution_data()

commit 11580c5564122ee6c282fe9cdcde7c8d88047c63
Author: Thomas Haller <thaller@redhat.com>
Date:   Tue Jan 16 07:14:47 2018 +0100

    route: mark data argument for rtnl_netem_set_delay_distribution_data() as const

commit cff8b15cc103c8293ea492c11f101ef414858a8e
Author: Thomas Haller <thaller@redhat.com>
Date:   Tue Jan 16 06:56:45 2018 +0100

    route: add rtnl_netem_set_delay_distribution_data() to linker script

    And some style fixes.

commit b590366ffbc759505dabe438bea18ce0c3bce515
Author: Steffen Vogel <post@steffenvogel.de>
Date:   Wed Dec 20 11:09:08 2017 +0100

    route: add separate function to set netem qdisc delay distribution

    A new function rtnl_netem_set_delay_distribution_data() has been added
    to allow the user to pass the delay distribution directly without loading
    it from a file.

    In conjunction with the maketable code (see iproute2 / NISTnet) this can
    be used to generate and load custom delay distributions on the fly.

--- a/include/netlink/route/qdisc/netem.h
+++ b/include/netlink/route/qdisc/netem.h
@@ -66,6 +66,7 @@ extern int rtnl_netem_get_delay_correlat
 /* Delay Distribution */
 #define MAXDIST 65536
 extern int rtnl_netem_set_delay_distribution(struct rtnl_qdisc *, const char *);
+extern int rtnl_netem_set_delay_distribution_data(struct rtnl_qdisc *, const int16_t *, size_t len);
 extern int rtnl_netem_get_delay_distribution_size(struct rtnl_qdisc *);
 extern int rtnl_netem_get_delay_distribution(struct rtnl_qdisc *, int16_t **);
 
--- a/lib/route/qdisc/netem.c
+++ b/lib/route/qdisc/netem.c
@@ -871,14 +871,42 @@ int rtnl_netem_get_delay_distribution(st
 }
 
 /**
- * Set the delay distribution. Latency/jitter must be set before applying.
+ * Set the delay distribution data. Latency/jitter must be set before applying.
  * @arg qdisc Netem qdisc.
- * @arg dist_type The name of the distribution (type, file, path/file).
  * @return 0 on success, error code on failure.
  */
-int rtnl_netem_set_delay_distribution(struct rtnl_qdisc *qdisc, const char *dist_type) {
+int rtnl_netem_set_delay_distribution_data(struct rtnl_qdisc *qdisc, const int16_t *data, size_t len) {
 	struct rtnl_netem *netem;
+	int16_t *new_data;
+
+	if (!(netem = rtnl_tc_data(TC_CAST(qdisc))))
+		BUG();
+
+	if (len > MAXDIST)
+		return -NLE_INVAL;
+
+	new_data = (int16_t *) calloc(len, sizeof(int16_t));
+	if (!new_data)
+		return -NLE_NOMEM;
+
+	free (netem->qnm_dist.dist_data);
+	netem->qnm_dist.dist_data = new_data;
+
+	memcpy(netem->qnm_dist.dist_data, data, len * sizeof(int16_t));
+
+	netem->qnm_dist.dist_size = len;
+	netem->qnm_mask |= SCH_NETEM_ATTR_DIST;
+
+	return 0;
+}
 
+/**
+ * Load the delay distribution from a file. Latency/jitter must be set before applying.
+ * @arg qdisc Netem qdisc.
+ * @arg dist_type The name of the distribution (type, file, path/file).
+ * @return 0 on success, error code on failure.
+ */
+int rtnl_netem_set_delay_distribution(struct rtnl_qdisc *qdisc, const char *dist_type) {
 	FILE *f;
 	int n = 0;
 	size_t i;
@@ -886,6 +914,7 @@ int rtnl_netem_set_delay_distribution(st
 	char *line;
 	char name[NAME_MAX];
 	char dist_suffix[] = ".dist";
+	int16_t *data;
 	char *test_suffix;
 
 	/* Check several locations for the dist file */
@@ -897,9 +926,6 @@ int rtnl_netem_set_delay_distribution(st
 		"/usr/local/lib/tc/",
 	};
 
-	if (!(netem = rtnl_tc_data(TC_CAST(qdisc))))
-		BUG();
-
 	/* If the given filename already ends in .dist, don't append it later */
 	test_suffix = strstr(dist_type, dist_suffix);
 
@@ -915,7 +941,7 @@ int rtnl_netem_set_delay_distribution(st
 	if (f == NULL)
 		return -nl_syserr2nlerr(errno);
 
-	netem->qnm_dist.dist_data = (int16_t *) calloc (MAXDIST, sizeof(int16_t));
+	data = (int16_t *) calloc (MAXDIST, sizeof(int16_t));
 
 	line = (char *) calloc (sizeof(char), len + 1);
 
@@ -934,17 +960,17 @@ int rtnl_netem_set_delay_distribution(st
 				fclose(f);
 				return -NLE_INVAL;
 			}
-			netem->qnm_dist.dist_data[n++] = x;
+			data[n++] = x;
 		}
 	}
 
 	free(line);
 
-	netem->qnm_dist.dist_size = n;
-	netem->qnm_mask |= SCH_NETEM_ATTR_DIST;
-
 	fclose(f);
-	return 0;
+
+	i = rtnl_netem_set_delay_distribution_data(qdisc, data, n);
+	free(data);
+	return i;
 }
 
 /** @} */
--- a/libnl-route-3.sym
+++ b/libnl-route-3.sym
@@ -1061,3 +1061,8 @@ global:
 	rtnl_route_get_ttl_propagate;
 	rtnl_route_nh_encap_mpls;
 } libnl_3_2_29;
+
+libnl_3_5 {
+global:
+	rtnl_netem_set_delay_distribution_data;
+} libnl_3_4;
