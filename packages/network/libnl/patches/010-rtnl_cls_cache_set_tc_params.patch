commit 7eeb29bc536a8bca21703e4fab817daeeaa890df
Author: Thomas Haller <thaller@redhat.com>
Date:   Thu Jan 18 07:54:27 2018 +0100

    route: rename rtnl_cls_cache_set_tcm_params() and fix symbol versioning

    After rethinking, "tcm_params" doesn't seem like a good name. Change it to
    "tc_params".

    Also, an already released section in the linker file must never be
    modified. It defeats the purpose of symbol versioning. Move the symbol
    to the right section.

commit ca02edd1014234e1260d6d7ff4f51ddb9d6f54f2
Author: d0u9 <d0u9.su@outlook.com>
Date:   Mon Jan 15 16:35:50 2018 +0800

    Add new function for setting ifindex and parent of a classifier cache.

    It is not good to give classifier cache users only one chance to
    set interface index and parent handle when allocte new cache.
    Sometimes we want to reuse classifier cache to reduce the overhead
    of allocating new memory everytime a new cache is created.

commit 2b11ab02ce24476f96c22b18e27f3737559010a2
Author: d0u9 <d0u9.su@outlook.com>
Date:   Mon Jan 15 16:04:54 2018 +0800

    Coding style format

    Fix incorrect code indent.

    https://github.com/thom311/libnl/pull/165

--- a/include/netlink/route/classifier.h
+++ b/include/netlink/route/classifier.h
@@ -27,6 +27,8 @@ extern void		rtnl_cls_put(struct rtnl_cl
 extern int		rtnl_cls_alloc_cache(struct nl_sock *, int, uint32_t,
 					     struct nl_cache **);
 
+extern void 		rtnl_cls_cache_set_tc_params(struct nl_cache *, int, uint32_t);
+
 extern int		rtnl_cls_build_add_request(struct rtnl_cls *, int,
 						   struct nl_msg **);
 extern int		rtnl_cls_add(struct nl_sock *, struct rtnl_cls *, int);
--- a/lib/route/cls.c
+++ b/lib/route/cls.c
@@ -324,7 +324,8 @@ int rtnl_cls_delete(struct nl_sock *sk,
  *
  * @return 0 on success or a negative error code.
  */
-int rtnl_cls_alloc_cache(struct nl_sock *sk, int ifindex, uint32_t parent,			 struct nl_cache **result)
+int rtnl_cls_alloc_cache(struct nl_sock *sk, int ifindex, uint32_t parent,
+			 struct nl_cache **result)
 {
 	struct nl_cache * cache;
 	int err;
@@ -344,6 +345,24 @@ int rtnl_cls_alloc_cache(struct nl_sock
 	return 0;
 }
 
+/**
+ * Set interface index and parent handle for classifier cache.
+ * @arg cache 		Pointer to cache
+ * @arg parent 		Parent qdisc/traffic class class
+ *
+ * Set the interface index and parent handle of a classifier cache.
+ * This is useful for reusing some existed classifier cache to reduce
+ * the overhead introduced by memory allocation.
+ *
+ * @return void.
+ */
+void rtnl_cls_cache_set_tc_params(struct nl_cache *cache,
+				  int ifindex, uint32_t parent)
+{
+	cache->c_iarg1 = ifindex;
+	cache->c_iarg2 = parent;
+}
+
 /** @} */
 
 static void cls_dump_line(struct rtnl_tc *tc, struct nl_dump_params *p)
--- a/libnl-route-3.sym
+++ b/libnl-route-3.sym
@@ -1064,5 +1064,6 @@ global:
 
 libnl_3_5 {
 global:
+	rtnl_cls_cache_set_tc_params;
 	rtnl_netem_set_delay_distribution_data;
 } libnl_3_4;
