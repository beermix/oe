Index: b/source/Doxyfile.in
===================================================================
--- a/source/Doxyfile.in
+++ b/source/Doxyfile.in
@@ -194,7 +194,7 @@ EXPAND_ONLY_PREDEF     = YES
 SEARCH_INCLUDES        = YES
 INCLUDE_PATH           = 
 INCLUDE_FILE_PATTERNS  = 
-PREDEFINED             = U_EXPORT2= U_STABLE= U_DRAFT= U_INTERNAL= U_SYSTEM= U_DEPRECATED= U_OBSOLETE= U_CALLCONV_FPTR= U_CALLCONV= U_CDECL_BEGIN= U_CDECL_END=  U_NO_THROW=\  "U_NAMESPACE_BEGIN=namespace icu{" "U_NAMESPACE_END=}" U_SHOW_CPLUSPLUS_API=1 U_DEFINE_LOCAL_OPEN_POINTER()= U_IN_DOXYGEN=1 U_OVERRIDE= U_FINAL=final UCONFIG_ENABLE_PLUGINS=1 U_CHAR16_IS_TYPEDEF=0 U_CPLUSPLUS_VERSION=11 U_WCHAR_IS_UTF16 U_NOEXCEPT=
+PREDEFINED             = U_EXPORT2= U_STABLE= U_DRAFT= U_INTERNAL= U_SYSTEM= U_DEPRECATED= U_OBSOLETE= U_CALLCONV_FPTR= U_CALLCONV= U_CDECL_BEGIN= U_CDECL_END=  U_NO_THROW=\  "U_NAMESPACE_BEGIN=namespace icu{" "U_NAMESPACE_END=}" U_SHOW_CPLUSPLUS_API=1 U_DEFINE_LOCAL_OPEN_POINTER()= U_IN_DOXYGEN=1 U_OVERRIDE= U_FINAL=final UCONFIG_ENABLE_PLUGINS=1 U_CHAR16_IS_TYPEDEF=0 U_CPLUSPLUS_VERSION=11 U_HAVE_RVALUE_REFERENCES=1 U_WCHAR_IS_UTF16 U_NOEXCEPT=
 EXPAND_AS_DEFINED      = 
 SKIP_FUNCTION_MACROS   = YES
 #---------------------------------------------------------------------------
Index: b/source/common/cmemory.h
===================================================================
--- a/source/common/cmemory.h
+++ b/source/common/cmemory.h
@@ -162,6 +162,7 @@ public:
      * @param p simple pointer to an array of T items that is adopted
      */
     explicit LocalMemory(T *p=NULL) : LocalPointerBase<T>(p) {}
+#if U_HAVE_RVALUE_REFERENCES
     /**
      * Move constructor, leaves src with isNull().
      * @param src source smart pointer
@@ -169,12 +170,14 @@ public:
     LocalMemory(LocalMemory<T> &&src) U_NOEXCEPT : LocalPointerBase<T>(src.ptr) {
         src.ptr=NULL;
     }
+#endif
     /**
      * Destructor deletes the memory it owns.
      */
     ~LocalMemory() {
         uprv_free(LocalPointerBase<T>::ptr);
     }
+#if U_HAVE_RVALUE_REFERENCES
     /**
      * Move assignment operator, leaves src with isNull().
      * The behavior is undefined if *this and src are the same object.
@@ -184,6 +187,7 @@ public:
     LocalMemory<T> &operator=(LocalMemory<T> &&src) U_NOEXCEPT {
         return moveFrom(src);
     }
+#endif
     /**
      * Move assignment, leaves src with isNull().
      * The behavior is undefined if *this and src are the same object.
Index: b/source/common/unicode/localpointer.h
===================================================================
--- a/source/common/unicode/localpointer.h
+++ b/source/common/unicode/localpointer.h
@@ -213,6 +213,7 @@ public:
             errorCode=U_MEMORY_ALLOCATION_ERROR;
         }
     }
+#if U_HAVE_RVALUE_REFERENCES
     /**
      * Move constructor, leaves src with isNull().
      * @param src source smart pointer
@@ -221,6 +222,7 @@ public:
     LocalPointer(LocalPointer<T> &&src) U_NOEXCEPT : LocalPointerBase<T>(src.ptr) {
         src.ptr=NULL;
     }
+#endif
     /**
      * Destructor deletes the object it owns.
      * @stable ICU 4.4
@@ -228,6 +230,7 @@ public:
     ~LocalPointer() {
         delete LocalPointerBase<T>::ptr;
     }
+#if U_HAVE_RVALUE_REFERENCES
     /**
      * Move assignment operator, leaves src with isNull().
      * The behavior is undefined if *this and src are the same object.
@@ -238,6 +241,7 @@ public:
     LocalPointer<T> &operator=(LocalPointer<T> &&src) U_NOEXCEPT {
         return moveFrom(src);
     }
+#endif
     // do not use #ifndef U_HIDE_DRAFT_API for moveFrom, needed by non-draft API
     /**
      * Move assignment, leaves src with isNull().
@@ -358,6 +362,7 @@ public:
             errorCode=U_MEMORY_ALLOCATION_ERROR;
         }
     }
+#if U_HAVE_RVALUE_REFERENCES
     /**
      * Move constructor, leaves src with isNull().
      * @param src source smart pointer
@@ -366,6 +371,7 @@ public:
     LocalArray(LocalArray<T> &&src) U_NOEXCEPT : LocalPointerBase<T>(src.ptr) {
         src.ptr=NULL;
     }
+#endif
     /**
      * Destructor deletes the array it owns.
      * @stable ICU 4.4
@@ -373,6 +379,7 @@ public:
     ~LocalArray() {
         delete[] LocalPointerBase<T>::ptr;
     }
+#if U_HAVE_RVALUE_REFERENCES
     /**
      * Move assignment operator, leaves src with isNull().
      * The behavior is undefined if *this and src are the same object.
@@ -383,6 +390,7 @@ public:
     LocalArray<T> &operator=(LocalArray<T> &&src) U_NOEXCEPT {
         return moveFrom(src);
     }
+#endif
     // do not use #ifndef U_HIDE_DRAFT_API for moveFrom, needed by non-draft API
     /**
      * Move assignment, leaves src with isNull().
@@ -484,6 +492,7 @@ public:
  * @see LocalPointer
  * @stable ICU 4.4
  */
+#if U_HAVE_RVALUE_REFERENCES
 #define U_DEFINE_LOCAL_OPEN_POINTER(LocalPointerClassName, Type, closeFunction) \
     class LocalPointerClassName : public LocalPointerBase<Type> { \
     public: \
@@ -517,6 +526,34 @@ public:
             ptr=p; \
         } \
     }
+#else
+#define U_DEFINE_LOCAL_OPEN_POINTER(LocalPointerClassName, Type, closeFunction) \
+    class LocalPointerClassName : public LocalPointerBase<Type> { \
+    public: \
+        using LocalPointerBase<Type>::operator*; \
+        using LocalPointerBase<Type>::operator->; \
+        explicit LocalPointerClassName(Type *p=NULL) : LocalPointerBase<Type>(p) {} \
+        ~LocalPointerClassName() { closeFunction(ptr); } \
+        LocalPointerClassName &moveFrom(LocalPointerClassName &src) U_NOEXCEPT { \
+            if (ptr != NULL) { closeFunction(ptr); } \
+            LocalPointerBase<Type>::ptr=src.ptr; \
+            src.ptr=NULL; \
+            return *this; \
+        } \
+        void swap(LocalPointerClassName &other) U_NOEXCEPT { \
+            Type *temp=LocalPointerBase<Type>::ptr; \
+            LocalPointerBase<Type>::ptr=other.ptr; \
+            other.ptr=temp; \
+        } \
+        friend inline void swap(LocalPointerClassName &p1, LocalPointerClassName &p2) U_NOEXCEPT { \
+            p1.swap(p2); \
+        } \
+        void adoptInstead(Type *p) { \
+            if (ptr != NULL) { closeFunction(ptr); } \
+            ptr=p; \
+        } \
+    }
+#endif
 
 U_NAMESPACE_END
 
Index: b/source/common/unicode/platform.h
===================================================================
--- a/source/common/unicode/platform.h
+++ b/source/common/unicode/platform.h
@@ -499,6 +499,22 @@ namespace std {
 #endif
 
 /**
+ * \def U_HAVE_RVALUE_REFERENCES
+ * Set to 1 if the compiler supports rvalue references.
+ * C++11 feature, necessary for move constructor & move assignment.
+ * @internal
+ */
+#ifdef U_HAVE_RVALUE_REFERENCES
+    /* Use the predefined value. */
+#elif U_CPLUSPLUS_VERSION >= 11 || __has_feature(cxx_rvalue_references) \
+        || defined(__GXX_EXPERIMENTAL_CXX0X__) \
+        || (defined(_MSC_VER) && _MSC_VER >= 1600)  /* Visual Studio 2010 */
+#   define U_HAVE_RVALUE_REFERENCES 1
+#else
+#   define U_HAVE_RVALUE_REFERENCES 0
+#endif
+
+/**
  * \def U_NOEXCEPT
  * "noexcept" if supported, otherwise empty.
  * Some code, especially STL containers, uses move semantics of objects only
Index: b/source/common/unicode/unistr.h
===================================================================
--- a/source/common/unicode/unistr.h
+++ b/source/common/unicode/unistr.h
@@ -1891,6 +1891,7 @@ public:
    */
   UnicodeString &fastCopyFrom(const UnicodeString &src);
 
+#if U_HAVE_RVALUE_REFERENCES
   /**
    * Move assignment operator, might leave src in bogus state.
    * This string will have the same contents and state that the source string had.
@@ -1902,7 +1903,7 @@ public:
   UnicodeString &operator=(UnicodeString &&src) U_NOEXCEPT {
     return moveFrom(src);
   }
-
+#endif
   // do not use #ifndef U_HIDE_DRAFT_API for moveFrom, needed by non-draft API
   /**
    * Move assignment, might leave src in bogus state.
@@ -3349,6 +3350,7 @@ public:
    */
   UnicodeString(const UnicodeString& that);
 
+#if U_HAVE_RVALUE_REFERENCES
   /**
    * Move constructor, might leave src in bogus state.
    * This string will have the same contents and state that the source string had.
@@ -3356,6 +3358,7 @@ public:
    * @stable ICU 56
    */
   UnicodeString(UnicodeString &&src) U_NOEXCEPT;
+#endif
 
   /**
    * 'Substring' constructor from tail of source string.
Index: b/source/common/unistr.cpp
===================================================================
--- a/source/common/unistr.cpp
+++ b/source/common/unistr.cpp
@@ -308,10 +308,12 @@ UnicodeString::UnicodeString(const Unico
   copyFrom(that);
 }
 
+#if U_HAVE_RVALUE_REFERENCES
 UnicodeString::UnicodeString(UnicodeString &&src) U_NOEXCEPT {
   fUnion.fFields.fLengthAndFlags = kShortString;
   moveFrom(src);
 }
+#endif
 
 UnicodeString::UnicodeString(const UnicodeString& that,
                              int32_t srcStart) {
Index: b/source/test/intltest/itutil.cpp
===================================================================
--- a/source/test/intltest/itutil.cpp
+++ b/source/test/intltest/itutil.cpp
@@ -375,6 +375,7 @@ void LocalPointerTest::TestLocalPointerM
     if(s3.getAlias() != p1 || s1.isValid()) {
         errln("LocalPointer.moveFrom() did not move");
     }
+#if U_HAVE_RVALUE_REFERENCES
     infoln("TestLocalPointerMoveSwap() with rvalue references");
     s1 = static_cast<LocalPointer<UnicodeString> &&>(s3);
     if(s1.getAlias() != p1 || s3.isValid()) {
@@ -384,6 +385,9 @@ void LocalPointerTest::TestLocalPointerM
     if(s4.getAlias() != p2 || s2.isValid()) {
         errln("LocalPointer move constructor did not move");
     }
+#else
+    infoln("TestLocalPointerMoveSwap() without rvalue references");
+#endif
 
     // Move self assignment leaves the object valid but in an undefined state.
     // Do it to make sure there is no crash,
@@ -468,6 +472,7 @@ void LocalPointerTest::TestLocalArrayMov
     if(a3.getAlias() != p1 || a1.isValid()) {
         errln("LocalArray.moveFrom() did not move");
     }
+#if U_HAVE_RVALUE_REFERENCES
     infoln("TestLocalArrayMoveSwap() with rvalue references");
     a1 = static_cast<LocalArray<UnicodeString> &&>(a3);
     if(a1.getAlias() != p1 || a3.isValid()) {
@@ -477,6 +482,9 @@ void LocalPointerTest::TestLocalArrayMov
     if(a4.getAlias() != p2 || a2.isValid()) {
         errln("LocalArray move constructor did not move");
     }
+#else
+    infoln("TestLocalArrayMoveSwap() without rvalue references");
+#endif
 
     // Move self assignment leaves the object valid but in an undefined state.
     // Do it to make sure there is no crash,
@@ -636,6 +644,7 @@ void LocalPointerTest::TestLocalXyzPoint
     if(f3.getAlias() != p1 || f1.isValid()) {
         errln("LocalUNormalizer2Pointer.moveFrom() did not move");
     }
+#if U_HAVE_RVALUE_REFERENCES
     infoln("TestLocalXyzPointerMoveSwap() with rvalue references");
     f1 = static_cast<LocalUNormalizer2Pointer &&>(f3);
     if(f1.getAlias() != p1 || f3.isValid()) {
@@ -645,6 +654,9 @@ void LocalPointerTest::TestLocalXyzPoint
     if(f4.getAlias() != p2 || f2.isValid()) {
         errln("LocalUNormalizer2Pointer move constructor did not move");
     }
+#else
+    infoln("TestLocalXyzPointerMoveSwap() without rvalue references");
+#endif
     // Move self assignment leaves the object valid but in an undefined state.
     // Do it to make sure there is no crash,
     // but do not check for any particular resulting value.
Index: b/source/test/intltest/ustrtest.cpp
===================================================================
--- a/source/test/intltest/ustrtest.cpp
+++ b/source/test/intltest/ustrtest.cpp
@@ -2160,6 +2160,7 @@ UnicodeStringTest::TestMoveSwap() {
     if(s6.getBuffer() != abc || s6.length() != 3) {
         errln("UnicodeString.moveFrom(alias) did not move");
     }
+#if U_HAVE_RVALUE_REFERENCES
     infoln("TestMoveSwap() with rvalue references");
     s1 = static_cast<UnicodeString &&>(s6);
     if(s1.getBuffer() != abc || s1.length() != 3) {
@@ -2169,6 +2170,10 @@ UnicodeStringTest::TestMoveSwap() {
     if(s7.getBuffer() != p || s7.length() != 100 || !s4.isBogus()) {
         errln("UnicodeString move constructor did not move");
     }
+#else
+    infoln("TestMoveSwap() without rvalue references");
+    UnicodeString s7;
+#endif
 
     // Move self assignment leaves the object valid but in an undefined state.
     // Do it to make sure there is no crash,
