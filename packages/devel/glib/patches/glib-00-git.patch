diff --git a/gio/gsocket.c b/gio/gsocket.c
index c5fc855ca..f69b5654d 100644
--- a/gio/gsocket.c
+++ b/gio/gsocket.c
@@ -249,14 +249,11 @@ struct _GSocketPrivate
   guint           connect_pending : 1;
 #ifdef G_OS_WIN32
   WSAEVENT        event;
-  gboolean        waiting;
-  DWORD           waiting_result;
   int             current_events;
   int             current_errors;
   int             selected_events;
   GList          *requested_conditions; /* list of requested GIOCondition * */
   GMutex          win32_source_lock;
-  GCond           win32_source_cond;
 #endif
 
   struct {
@@ -336,10 +333,8 @@ socket_strerror (int err)
 static void
 _win32_unset_event_mask (GSocket *socket, int mask)
 {
-  g_mutex_lock (&socket->priv->win32_source_lock);
   socket->priv->current_events &= ~mask;
   socket->priv->current_errors &= ~mask;
-  g_mutex_unlock (&socket->priv->win32_source_lock);
 }
 #else
 #define win32_unset_event_mask(_socket, _mask)
@@ -836,7 +831,6 @@ g_socket_finalize (GObject *object)
 
   g_assert (socket->priv->requested_conditions == NULL);
   g_mutex_clear (&socket->priv->win32_source_lock);
-  g_cond_clear (&socket->priv->win32_source_cond);
 #endif
 
   for (i = 0; i < RECV_ADDR_CACHE_SIZE; i++)
@@ -1064,7 +1058,6 @@ g_socket_init (GSocket *socket)
 #ifdef G_OS_WIN32
   socket->priv->event = WSA_INVALID_EVENT;
   g_mutex_init (&socket->priv->win32_source_lock);
-  g_cond_init (&socket->priv->win32_source_cond);
 #endif
 }
 
@@ -2448,8 +2441,6 @@ g_socket_accept (GSocket       *socket,
 
   while (TRUE)
     {
-      win32_unset_event_mask (socket, FD_ACCEPT);
-
       if ((ret = accept (socket->priv->fd, NULL, 0)) < 0)
 	{
 	  int errsv = get_socket_errno ();
@@ -2464,6 +2455,8 @@ g_socket_accept (GSocket       *socket,
               errsv == EAGAIN)
 #endif
             {
+              win32_unset_event_mask (socket, FD_ACCEPT);
+
               if (socket->priv->blocking)
                 {
                   if (!g_socket_condition_wait (socket,
@@ -2480,6 +2473,8 @@ g_socket_accept (GSocket       *socket,
       break;
     }
 
+  win32_unset_event_mask (socket, FD_ACCEPT);
+
 #ifdef G_OS_WIN32
   {
     /* The socket inherits the accepting sockets event mask and even object,
@@ -2568,8 +2563,6 @@ g_socket_connect (GSocket         *socket,
 
   while (1)
     {
-      win32_unset_event_mask (socket, FD_CONNECT);
-
       if (connect (socket->priv->fd, (struct sockaddr *) &buffer,
 		   g_socket_address_get_native_size (address)) < 0)
 	{
@@ -2584,6 +2577,8 @@ g_socket_connect (GSocket         *socket,
 	  if (errsv == WSAEWOULDBLOCK)
 #endif
 	    {
+              win32_unset_event_mask (socket, FD_CONNECT);
+
 	      if (socket->priv->blocking)
 		{
 		  if (g_socket_condition_wait (socket, G_IO_OUT, cancellable, error))
@@ -2609,6 +2604,8 @@ g_socket_connect (GSocket         *socket,
       break;
     }
 
+  win32_unset_event_mask (socket, FD_CONNECT);
+
   socket->priv->connected_read = TRUE;
   socket->priv->connected_write = TRUE;
 
@@ -2788,8 +2785,6 @@ g_socket_receive_with_timeout (GSocket       *socket,
 
   while (1)
     {
-      win32_unset_event_mask (socket, FD_READ);
-
       if ((ret = recv (socket->priv->fd, buffer, size, 0)) < 0)
 	{
 	  int errsv = get_socket_errno ();
@@ -2804,6 +2799,8 @@ g_socket_receive_with_timeout (GSocket       *socket,
               errsv == EAGAIN)
 #endif
             {
+              win32_unset_event_mask (socket, FD_READ);
+
               if (timeout != 0)
                 {
                   if (!block_on_timeout (socket, G_IO_IN, timeout, start_time,
@@ -2814,10 +2811,14 @@ g_socket_receive_with_timeout (GSocket       *socket,
                 }
             }
 
+	  win32_unset_event_mask (socket, FD_READ);
+
 	  socket_set_error_lazy (error, errsv, _("Error receiving data: %s"));
 	  return -1;
 	}
 
+      win32_unset_event_mask (socket, FD_READ);
+
       break;
     }
 
@@ -2983,8 +2984,6 @@ g_socket_send_with_timeout (GSocket       *socket,
 
   while (1)
     {
-      win32_unset_event_mask (socket, FD_WRITE);
-
       if ((ret = send (socket->priv->fd, buffer, size, G_SOCKET_DEFAULT_SEND_FLAGS)) < 0)
 	{
 	  int errsv = get_socket_errno ();
@@ -2999,6 +2998,8 @@ g_socket_send_with_timeout (GSocket       *socket,
               errsv == EAGAIN)
 #endif
             {
+              win32_unset_event_mask (socket, FD_WRITE);
+
               if (timeout != 0)
                 {
                   if (!block_on_timeout (socket, G_IO_OUT, timeout, start_time,
@@ -3413,7 +3414,7 @@ remove_condition_watch (GSocket      *socket,
 }
 
 static GIOCondition
-update_condition_unlocked (GSocket *socket)
+update_condition (GSocket *socket)
 {
   WSANETWORKEVENTS events;
   GIOCondition condition;
@@ -3480,16 +3481,6 @@ update_condition_unlocked (GSocket *socket)
 
   return condition;
 }
-
-static GIOCondition
-update_condition (GSocket *socket)
-{
-  GIOCondition res;
-  g_mutex_lock (&socket->priv->win32_source_lock);
-  res = update_condition_unlocked (socket);
-  g_mutex_unlock (&socket->priv->win32_source_lock);
-  return res;
-}
 #endif
 
 typedef struct {
@@ -3885,44 +3876,11 @@ g_socket_condition_timed_wait (GSocket       *socket,
     if (timeout == -1)
       timeout = WSA_INFINITE;
 
-    g_mutex_lock (&socket->priv->win32_source_lock);
-    current_condition = update_condition_unlocked (socket);
+    current_condition = update_condition (socket);
     while ((condition & current_condition) == 0)
       {
-        if (!socket->priv->waiting)
-          {
-            socket->priv->waiting = TRUE;
-            socket->priv->waiting_result = 0;
-            g_mutex_unlock (&socket->priv->win32_source_lock);
-
-            res = WSAWaitForMultipleEvents (num_events, events, FALSE, timeout, FALSE);
-
-            g_mutex_lock (&socket->priv->win32_source_lock);
-            socket->priv->waiting = FALSE;
-            socket->priv->waiting_result = res;
-            g_cond_broadcast (&socket->priv->win32_source_cond);
-          }
-        else
-          {
-            if (timeout != WSA_INFINITE)
-              {
-                if (!g_cond_wait_until (&socket->priv->win32_source_cond, &socket->priv->win32_source_lock, timeout))
-                  {
-                    res = WSA_WAIT_TIMEOUT;
-                    break;
-                  }
-                else
-                  {
-                    res = socket->priv->waiting_result;
-                  }
-              }
-            else
-              {
-                g_cond_wait (&socket->priv->win32_source_cond, &socket->priv->win32_source_lock);
-                res = socket->priv->waiting_result;
-              }
-          }
-
+	res = WSAWaitForMultipleEvents (num_events, events,
+					FALSE, timeout, FALSE);
 	if (res == WSA_WAIT_FAILED)
 	  {
 	    int errsv = get_socket_errno ();
@@ -3943,7 +3901,7 @@ g_socket_condition_timed_wait (GSocket       *socket,
 	if (g_cancellable_set_error_if_cancelled (cancellable, error))
 	  break;
 
-        current_condition = update_condition_unlocked (socket);
+	current_condition = update_condition (socket);
 
 	if (timeout != WSA_INFINITE)
 	  {
@@ -3952,7 +3910,6 @@ g_socket_condition_timed_wait (GSocket       *socket,
 	      timeout = 0;
 	  }
       }
-    g_mutex_unlock (&socket->priv->win32_source_lock);
     remove_condition_watch (socket, &condition);
     if (num_events > 1)
       g_cancellable_release_fd (cancellable);
@@ -4448,8 +4405,6 @@ g_socket_send_message_with_timeout (GSocket                *socket,
 
     while (1)
       {
-        win32_unset_event_mask (socket, FD_WRITE);
-
 	if (address)
 	  result = WSASendTo (socket->priv->fd,
 			      bufs, num_vectors,
@@ -4471,6 +4426,8 @@ g_socket_send_message_with_timeout (GSocket                *socket,
 
 	    if (errsv == WSAEWOULDBLOCK)
               {
+                win32_unset_event_mask (socket, FD_WRITE);
+
                 if (timeout != 0)
                   {
                     if (!block_on_timeout (socket, G_IO_OUT, timeout,
@@ -4918,8 +4875,6 @@ g_socket_receive_message_with_timeout (GSocket                 *socket,
     /* do it */
     while (1)
       {
-        win32_unset_event_mask (socket, FD_READ);
-
 	addrlen = sizeof addr;
 	if (address)
 	  result = WSARecvFrom (socket->priv->fd,
@@ -4941,6 +4896,8 @@ g_socket_receive_message_with_timeout (GSocket                 *socket,
 
             if (errsv == WSAEWOULDBLOCK)
               {
+                win32_unset_event_mask (socket, FD_READ);
+
                 if (timeout != 0)
                   {
                     if (!block_on_timeout (socket, G_IO_IN, timeout,
@@ -4954,6 +4911,7 @@ g_socket_receive_message_with_timeout (GSocket                 *socket,
 	    socket_set_error_lazy (error, errsv, _("Error receiving message: %s"));
 	    return -1;
 	  }
+	win32_unset_event_mask (socket, FD_READ);
 	break;
       }
 
diff --git a/gio/gunixmounts.c b/gio/gunixmounts.c
index 0c73a5689..b4fa2a499 100644
--- a/gio/gunixmounts.c
+++ b/gio/gunixmounts.c
@@ -404,9 +404,6 @@ _g_get_unix_mounts (void)
       unsigned long mount_flags = 0;
       gboolean is_read_only = FALSE;
 
-      if (!mnt_table_is_fs_mounted (table, fs))
-        continue;
-
       device_path = mnt_fs_get_source (fs);
       if (g_strcmp0 (device_path, "/dev/root") == 0)
         device_path = _resolve_dev_root ();
diff --git a/gio/gwin32registrykey.c b/gio/gwin32registrykey.c
index 313980bc0..ab03a469f 100644
--- a/gio/gwin32registrykey.c
+++ b/gio/gwin32registrykey.c
@@ -89,18 +89,18 @@ typedef NTSTATUS
                          PULONG                result_size);
 
 typedef NTSTATUS
-(* NtNotifyChangeMultipleKeysFunc)(HANDLE             key_handle,
-                                   ULONG              subkey_count,
-                                   POBJECT_ATTRIBUTES subkeys,
-                                   HANDLE             event,
-                                   PIO_APC_ROUTINE    apc_routine,
-                                   PVOID              apc_closure,
-                                   PIO_STATUS_BLOCK   status_block,
-                                   ULONG              filter,
-                                   BOOLEAN            watch_tree,
-                                   PVOID              buffer,
-                                   ULONG              buffer_size,
-                                   BOOLEAN            async);
+(NTAPI * NtNotifyChangeMultipleKeysFunc)(HANDLE             key_handle,
+                                         ULONG              subkey_count,
+                                         POBJECT_ATTRIBUTES subkeys,
+                                         HANDLE             event,
+                                         PIO_APC_ROUTINE    apc_routine,
+                                         PVOID              apc_closure,
+                                         PIO_STATUS_BLOCK   status_block,
+                                         ULONG              filter,
+                                         BOOLEAN            watch_tree,
+                                         PVOID              buffer,
+                                         ULONG              buffer_size,
+                                         BOOLEAN            async);
 
 static NtQueryKeyFunc nt_query_key = NULL;
 static NtNotifyChangeMultipleKeysFunc nt_notify_change_multiple_keys = NULL;
diff --git a/glib/gmain.c b/glib/gmain.c
index ab2908e52..27c0234ec 100644
--- a/glib/gmain.c
+++ b/glib/gmain.c
@@ -277,7 +277,8 @@ struct _GMainContext
 
   guint next_id;
   GList *source_lists;
-  gint in_check_or_prepare;
+  gboolean in_check_or_prepare;
+  gboolean need_wakeup;
 
   GPollRec *poll_records;
   guint n_poll_records;
@@ -651,6 +652,7 @@ g_main_context_new (void)
   
   context->pending_dispatches = g_ptr_array_new ();
   
+  context->need_wakeup = FALSE;
   context->time_is_fresh = FALSE;
   
   context->wakeup = g_wakeup_new ();
@@ -1127,17 +1129,11 @@ source_remove_from_context (GSource      *source,
 static void
 conditional_wakeup (GMainContext *context)
 {
-  /* We want to signal wakeups in two cases:
-   *  1 When the context is owned by another thread
-   *  2 When the context owner is NULL (two subcases)
-   *   2a Possible if the context has never been acquired
-   *   2b Or if the context has no current owner
-   *
-   * At least case 2a) is necessary to ensure backwards compatibility with
-   * qemu's use of GMainContext.
-   * https://bugzilla.gnome.org/show_bug.cgi?id=761102#c14
+  /* This flag is set if at the start of prepare() we have no other ready
+   * sources, and hence would wait in poll(). In that case, any other threads
+   * attaching sources will need to signal a wakeup.
    */
-  if (context->owner != G_THREAD_SELF)
+  if (context->need_wakeup)
     g_wakeup_signal (context->wakeup);
 }
 
@@ -2116,11 +2112,15 @@ g_source_unref_internal (GSource      *source,
 
       if (source->source_funcs->finalize)
 	{
+          /* Temporarily increase the ref count again so that GSource methods
+           * can be called from finalize(). */
+          source->ref_count++;
 	  if (context)
 	    UNLOCK_CONTEXT (context);
 	  source->source_funcs->finalize (source);
 	  if (context)
 	    LOCK_CONTEXT (context);
+          source->ref_count--;
 	}
 
       g_free (source->name);
@@ -2680,7 +2680,7 @@ g_get_real_time (void)
  * Since: 2.28
  **/
 #if defined (G_OS_WIN32)
-static ULONGLONG (*g_GetTickCount64) (void) = NULL;
+static ULONGLONG (WINAPI *g_GetTickCount64) (void) = NULL;
 static guint32 g_win32_tick_epoch = 0;
 
 void
@@ -3469,6 +3469,10 @@ g_main_context_prepare (GMainContext *context,
   
   LOCK_CONTEXT (context);
 
+  /* context->need_wakeup is protected by LOCK_CONTEXT/UNLOCK_CONTEXT,
+   * so need not set it yet.
+   */
+
   context->time_is_fresh = FALSE;
 
   if (context->in_check_or_prepare)
@@ -3594,6 +3598,8 @@ g_main_context_prepare (GMainContext *context,
 	}
     }
   g_source_iter_clear (&iter);
+  /* See conditional_wakeup() where this is used */
+  context->need_wakeup = (n_ready == 0);
 
   TRACE (GLIB_MAIN_CONTEXT_AFTER_PREPARE (context, current_priority, n_ready));
 
@@ -3728,6 +3734,12 @@ g_main_context_check (GMainContext *context,
 
   TRACE (GLIB_MAIN_CONTEXT_BEFORE_CHECK (context, max_priority, fds, n_fds));
 
+  /* We don't need to wakeup during check or dispatch, because
+   * all sources will be re-evaluated during prepare/query.
+   */
+  context->need_wakeup = FALSE;
+
+  /* And if we have a wakeup pending, acknowledge it */
   for (i = 0; i < n_fds; i++)
     {
       if (fds[i].fd == context->wake_up_rec.fd)
diff --git a/glib/gmain.h b/glib/gmain.h
index e8cdeed7a..26400d44b 100644
--- a/glib/gmain.h
+++ b/glib/gmain.h
@@ -104,7 +104,10 @@ typedef struct _GSourceCallbackFuncs    GSourceCallbackFuncs;
  *     are needed for this type of event source. The return value of the
  *     @dispatch function should be #G_SOURCE_REMOVE if the source should be
  *     removed or #G_SOURCE_CONTINUE to keep it.
- * @finalize: Called when the source is finalized.
+ * @finalize: Called when the source is finalized. At this point, the source
+ *     will have been destroyed, had its callback cleared, and have been removed
+ *     from its #GMainContext, but it will still have its final reference count;
+ *     so methods can be called on it from within this function.
  *
  * The `GSourceFuncs` struct contains a table of
  * functions used to handle event sources in a generic manner.
diff --git a/win32/Makefile.am b/win32/Makefile.am
index 3a08bd59b..b19d5607d 100644
--- a/win32/Makefile.am
+++ b/win32/Makefile.am
@@ -3,4 +3,5 @@ SUBDIRS = vs9 vs10 vs11 vs12 vs14 vs15
 EXTRA_DIST = 		\
 	glibpc.py	\
 	pc_base.py	\
-	replace.py
+	replace.py	\
+	gen_util_scripts.py
diff --git a/win32/gen_util_scripts.py b/win32/gen_util_scripts.py
new file mode 100644
index 000000000..50525056e
--- /dev/null
+++ b/win32/gen_util_scripts.py
@@ -0,0 +1,33 @@
+# Simple Python script to generate the full .schema.xml files
+
+import os
+import sys
+import argparse
+
+from replace import replace_multi
+
+def main(argv):
+    srcroot = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..')
+    parser = argparse.ArgumentParser(description='Generate Utility Scripts')
+    parser.add_argument('-t', '--type', help='Script Type (glib-mkenums or gdbus-codegen)', required=True)
+    parser.add_argument('--version', help='Package Version', required=True)
+    args = parser.parse_args()
+
+    replace_items = {'@PYTHON@': 'python',
+                     '@PERL_PATH@': 'perl',
+                     '@GLIB_VERSION@': args.version}
+
+    if args.type == 'glib-mkenums':
+        replace_multi(srcroot + '/gobject/glib-mkenums.in',
+                      srcroot + '/gobject/glib-mkenums',
+                      replace_items)
+    elif args.type == 'gdbus-codegen':
+        replace_multi(srcroot + '/gio/gdbus-2.0/codegen/gdbus-codegen.in',
+                      srcroot + '/gio/gdbus-2.0/codegen/gdbus-codegen',
+                      replace_items)
+
+    else:
+        raise ValueError('Type must be glib-mkenums or gdbus-codegen')
+
+if __name__ == '__main__':
+    sys.exit(main(sys.argv))
diff --git a/win32/replace.py b/win32/replace.py
index 0cb269a87..3aeceb1f7 100644
--- a/win32/replace.py
+++ b/win32/replace.py
@@ -21,9 +21,15 @@ valid_actions = ['remove-prefix',
                  'replace-str',
                  'remove-str']
 
+def open_file(filename, mode):
+    if sys.version_info[0] < 3:
+        return open(filename, mode=mode)
+    else:
+        return open(filename, mode=mode, encoding='utf-8')
+
 def replace_multi(src, dest, replace_items):
-    with open(src, 'r') as s:
-        with open(dest, 'w') as d:
+    with open_file(src, 'r') as s:
+        with open_file(dest, 'w') as d:
             for line in s:
                 replace_dict = dict((re.escape(key), value) \
                                for key, value in replace_items.items())
diff --git a/win32/vs10/glib-gen-srcs.props b/win32/vs10/glib-gen-srcs.props
index a9fc09ad5..ff15ea0b3 100644
--- a/win32/vs10/glib-gen-srcs.props
+++ b/win32/vs10/glib-gen-srcs.props
@@ -8,7 +8,6 @@
     <GenGLibConfigH>copy ..\..\glib\glibconfig.h.win32 ..\..\glib\glibconfig.h</GenGLibConfigH>
     <GenGModuleConfH>copy ..\..\gmodule\gmoduleconf.h.win32 ..\..\gmodule\gmoduleconf.h</GenGModuleConfH>
     <GenGNetworkingH>copy ..\..\gio\gnetworking.h.win32 ..\..\gio\gnetworking.h</GenGNetworkingH>
-    <GenGLibMKEnums>if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\replace.py --action=replace-var --input=..\..\gobject\glib-mkenums.in --output=..\..\gobject\glib-mkenums --var=GLIB_VERSION --outstring=$(GlibVersion)</GenGLibMKEnums>
   </PropertyGroup>
   <PropertyGroup>
     <_PropertySheetDisplayName>glibgensrcsprops</_PropertySheetDisplayName>
@@ -26,8 +25,5 @@
     <BuildMacro Include="GenGNetworkingH">
       <Value>$(GenGNetworkingH)</Value>
     </BuildMacro>
-    <BuildMacro Include="GenGLibMKEnums">
-      <Value>$(GenGLibMKEnums)</Value>
-    </BuildMacro>
   </ItemGroup>
 </Project>
diff --git a/win32/vs10/glib-install.propsin b/win32/vs10/glib-install.propsin
index eeb2965f1..c5b43bb21 100644
--- a/win32/vs10/glib-install.propsin
+++ b/win32/vs10/glib-install.propsin
@@ -36,8 +36,8 @@ copy $(BinDir)\gdbus.exe $(CopyDir)\bin
 copy $(BinDir)\gdbus.pdb $(CopyDir)\bin
 copy $(BinDir)\gio.exe $(CopyDir)\bin
 copy $(BinDir)\gio.pdb $(CopyDir)\bin
-copy ..\..\gio\gdbus-2.0\codegen\gdbus-codegen.in $(CopyDir)\bin\gdbus-codegen
 
+if exist ..\..\gio\gdbus-2.0\codegen\gdbus-codegen copy ..\..\gio\gdbus-2.0\codegen\gdbus-codegen $(CopyDir)\bin
 if exist ..\..\gobject\glib-mkenums copy ..\..\gobject\glib-mkenums $(CopyDir)\bin
 
 mkdir $(CopyDir)\include\glib-$(ApiVersion)\glib\deprecated
@@ -83,7 +83,10 @@ copy ..\..\gio\gschema.dtd $(CopyDir)\share\glib-$(ApiVersion)\schemas
 mkdir $(CopyDir)\share\glib-$(ApiVersion)\codegen
 copy ..\..\gio\gdbus-2.0\codegen\*.py $(CopyDir)\share\glib-$(ApiVersion)\codegen
 </GlibDoInstall>
+    <GlibUtilScripts>..\..\gobject\glib-mkenums;..\..\gio\gdbus-2.0\codegen\gdbus-codegen</GlibUtilScripts>
     <GlibPCFiles>..\gio-windows-2.0.pc;..\gio-2.0.pc;..\gobject-2.0.pc;..\gmodule-no-export-2.0.pc;..\gmodule-export-2.0.pc;..\gmodule-2.0.pc;..\gthread-2.0.pc;..\glib-2.0.pc</GlibPCFiles>
+    <GenGLibMKEnums>if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\gen_util_scripts.py --type=glib-mkenums --version=$(GlibVersion)</GenGLibMKEnums>
+    <GenGDBusCodegen>if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\gen_util_scripts.py --type=gdbus-codegen --version=$(GlibVersion)</GenGDBusCodegen>
     <GlibGenPC>(if not exist $(CopyDir) mkdir $(CopyDir)) &amp; (if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\glibpc.py --prefix=$(CopyDir) --version=$(GlibVersion))</GlibGenPC>
   </PropertyGroup>
   <PropertyGroup>
@@ -96,9 +99,18 @@ copy ..\..\gio\gdbus-2.0\codegen\*.py $(CopyDir)\share\glib-$(ApiVersion)\codege
     <BuildMacro Include="GlibDoInstall">
       <Value>$(GlibDoInstall)</Value>
     </BuildMacro>
+    <BuildMacro Include="GlibUtilScripts">
+      <Value>$(GlibUtilScripts)</Value>
+    </BuildMacro>
     <BuildMacro Include="GlibPCFiles">
       <Value>$(GlibPCFiles)</Value>
     </BuildMacro>
+    <BuildMacro Include="GenGLibMKEnums">
+      <Value>$(GenGLibMKEnums)</Value>
+    </BuildMacro>
+    <BuildMacro Include="GenGDBusCodegen">
+      <Value>$(GenGDBusCodegen)</Value>
+    </BuildMacro>
     <BuildMacro Include="GlibGenPC">
       <Value>$(GlibGenPC)</Value>
     </BuildMacro>
diff --git a/win32/vs10/glib-install.vcxproj b/win32/vs10/glib-install.vcxproj
index cb13a848a..41009b749 100644
--- a/win32/vs10/glib-install.vcxproj
+++ b/win32/vs10/glib-install.vcxproj
@@ -89,13 +89,29 @@
       <Command Condition="'$(Configuration)'=='Release'">$(GlibGenPC)</Command>
       <Outputs Condition="'$(Configuration)'=='Release'">$(GlibPCFiles);%(Outputs)</Outputs>
     </CustomBuild>
-    <CustomBuild Include="..\..\config.h.win32">
+    <CustomBuild Include="..\..\gobject\glib-mkenums.in">
+      <Message Condition="'$(Configuration)'=='Debug'">Generating glib-mkenums...</Message>
+      <Command Condition="'$(Configuration)'=='Debug'">$(GenGLibMKEnums)</Command>
+      <Outputs Condition="'$(Configuration)'=='Debug'">..\..\gobject\glib-mkenums;%(Outputs)</Outputs>
+      <Message Condition="'$(Configuration)'=='Release'">Generating glib-mkenums...</Message>
+      <Command Condition="'$(Configuration)'=='Release'">$(GenGLibMKEnums)</Command>
+      <Outputs Condition="'$(Configuration)'=='Release'">..\..\gobject\glib-mkenums;%(Outputs)</Outputs>
+    </CustomBuild>
+    <CustomBuild Include="..\..\gio\gdbus-2.0\codegen\gdbus-codegen.in">
+      <Message Condition="'$(Configuration)'=='Debug'">Generating gdbus-codegen...</Message>
+      <Command Condition="'$(Configuration)'=='Debug'">$(GenGDBusCodegen)</Command>
+      <Outputs Condition="'$(Configuration)'=='Debug'">..\..\gio\gdbus-2.0\codegen\gdbus-codegen;%(Outputs)</Outputs>
+      <Message Condition="'$(Configuration)'=='Release'">Generating gdbus-codegen...</Message>
+      <Command Condition="'$(Configuration)'=='Release'">$(GenGDBusCodegen)</Command>
+      <Outputs Condition="'$(Configuration)'=='Release'">..\..\gio\gdbus-2.0\codegen\gdbus-codegen;%(Outputs)</Outputs>
+    </CustomBuild>
+    <CustomBuild Include="glib_install_placeholder">
       <Message Condition="'$(Configuration)'=='Debug'">Installing Build Results...</Message>
-      <AdditionalInputs Condition="'$(Configuration)'=='Debug'">$(GlibPCFiles)</AdditionalInputs>
+      <AdditionalInputs Condition="'$(Configuration)'=='Debug'">$(GlibPCFiles);$(GlibUtilScripts)</AdditionalInputs>
       <Command Condition="'$(Configuration)'=='Debug'">$(GlibDoInstall)</Command>
       <Outputs Condition="'$(Configuration)'=='Debug'">blah;%(Outputs)</Outputs>
       <Message Condition="'$(Configuration)'=='Release'">Installing Build Results...</Message>
-      <AdditionalInputs Condition="'$(Configuration)'=='Release'">$(GlibPCFiles)</AdditionalInputs>
+      <AdditionalInputs Condition="'$(Configuration)'=='Release'">$(GlibPCFiles);$(GlibUtilScripts)</AdditionalInputs>
       <Command Condition="'$(Configuration)'=='Release'">$(GlibDoInstall)</Command>
       <Outputs Condition="'$(Configuration)'=='Release'">blah;%(Outputs)</Outputs>
     </CustomBuild>
diff --git a/win32/vs10/glib-install.vcxproj.filters b/win32/vs10/glib-install.vcxproj.filters
index 2c5e00c4a..6748dcf8f 100644
--- a/win32/vs10/glib-install.vcxproj.filters
+++ b/win32/vs10/glib-install.vcxproj.filters
@@ -7,7 +7,9 @@
     </Filter>
   </ItemGroup>
   <ItemGroup>
-    <CustomBuild Include="..\..\config.h.win32"><Filter>Resource Files</Filter></CustomBuild>
+    <CustomBuild Include="..\..\gobject\glib-mkenums.in"><Filter>Resource Files</Filter></CustomBuild>
+    <CustomBuild Include="..\..\gio\gdbus-2.0\codegen\gdbus-codegen.in"><Filter>Resource Files</Filter></CustomBuild>
+    <CustomBuild Include="glib_install_placeholder"><Filter>Resource Files</Filter></CustomBuild>
     <CustomBuild Include="..\glibpc.py"><Filter>Resource Files</Filter></CustomBuild>
   </ItemGroup>
 </Project>
diff --git a/win32/vs10/gobject.vcxproj.filtersin b/win32/vs10/gobject.vcxproj.filtersin
index b9f83075e..85af63ff2 100644
--- a/win32/vs10/gobject.vcxproj.filtersin
+++ b/win32/vs10/gobject.vcxproj.filtersin
@@ -18,11 +18,6 @@
 #include "gobject.vs10.sourcefiles.filters"
   </ItemGroup>
   <ItemGroup>
-    <CustomBuild Include="..\..\gobject\glib-mkenums.in"><Filter>Resource Files</Filter></CustomBuild>
-  </ItemGroup>
-  <ItemGroup>
-    <ResourceCompile Include="..\..\gobject\gobject.rc">
-      <Filter>Resource Files</Filter>
-    </ResourceCompile>
+    <ResourceCompile Include="..\..\gobject\gobject.rc"><Filter>Resource Files</Filter></ResourceCompile>
   </ItemGroup>
 </Project>
diff --git a/win32/vs10/gobject.vcxprojin b/win32/vs10/gobject.vcxprojin
index c61ef8fd9..0820b0789 100644
--- a/win32/vs10/gobject.vcxprojin
+++ b/win32/vs10/gobject.vcxprojin
@@ -51,19 +51,19 @@
   </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-    <Import Project="glib-gen-srcs.props" />
+    <Import Project="glib-build-defines.props" />
   </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-    <Import Project="glib-gen-srcs.props" />
+    <Import Project="glib-build-defines.props" />
   </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-    <Import Project="glib-gen-srcs.props" />
+    <Import Project="glib-build-defines.props" />
   </ImportGroup>
   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-    <Import Project="glib-gen-srcs.props" />
+    <Import Project="glib-build-defines.props" />
   </ImportGroup>
   <PropertyGroup Label="UserMacros" />
   <PropertyGroup>
@@ -172,16 +172,6 @@
 #include "gobject.vs10.sourcefiles"
   </ItemGroup>
   <ItemGroup>
-    <CustomBuild Include="..\..\gobject\glib-mkenums.in">
-      <Message Condition="'$(Configuration)'=='Debug'">Generating glib-mkenums...</Message>
-      <Command Condition="'$(Configuration)'=='Debug'">$(GenGLibMKEnums)</Command>
-      <Outputs Condition="'$(Configuration)'=='Debug'">..\..\gobject\glib-mkenums;%(Outputs)</Outputs>
-      <Message Condition="'$(Configuration)'=='Release'">Generating glib-mkenums...</Message>
-      <Command Condition="'$(Configuration)'=='Release'">$(GenGLibMKEnums)</Command>
-      <Outputs Condition="'$(Configuration)'=='Release'">..\..\gobject\glib-mkenums;%(Outputs)</Outputs>
-    </CustomBuild>
-  </ItemGroup>
-  <ItemGroup>
     <ResourceCompile Include="..\..\gobject\gobject.rc" />
   </ItemGroup>
   <ItemGroup>
diff --git a/win32/vs9/glib-gen-srcs.vsprops b/win32/vs9/glib-gen-srcs.vsprops
index de0b1b965..02a6a5a8c 100644
--- a/win32/vs9/glib-gen-srcs.vsprops
+++ b/win32/vs9/glib-gen-srcs.vsprops
@@ -21,8 +21,4 @@
 		Name="GenGNetworkingH"
 		Value="copy ..\..\gio\gnetworking.h.win32 ..\..\gio\gnetworking.h"
 	/>
-	<UserMacro
-		Name="GenGLibMKEnums"
-		Value="if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\replace.py --action=replace-var --input=..\..\gobject\glib-mkenums.in --output=..\..\gobject\glib-mkenums --var=GLIB_VERSION --outstring=$(GlibVersion)"
-	/>
 </VisualStudioPropertySheet>
diff --git a/win32/vs9/glib-install.vcproj b/win32/vs9/glib-install.vcproj
index 7324f0f72..a2e31a4b7 100644
--- a/win32/vs9/glib-install.vcproj
+++ b/win32/vs9/glib-install.vcproj
@@ -114,6 +114,74 @@
 					/>
 				</FileConfiguration>
 			</File>
+			<File RelativePath="..\..\gobject\glib-mkenums.in">
+				<FileConfiguration Name="Debug|Win32">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating glib-mkenums..."
+						CommandLine="$(GenGLibMKEnums)"
+						Outputs="..\..\gobject\glib-mkenums"
+					/>
+				</FileConfiguration>
+				<FileConfiguration Name="Release|Win32">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating glib-mkenums..."
+						CommandLine="$(GenGLibMKEnums)"
+						Outputs="..\..\gobject\glib-mkenums"
+					/>
+				</FileConfiguration>
+				<FileConfiguration Name="Debug|x64">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating glib-mkenums..."
+						CommandLine="$(GenGLibMKEnums)"
+						Outputs="..\..\gobject\glib-mkenums"
+					/>
+				</FileConfiguration>
+				<FileConfiguration Name="Release|x64">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating glib-mkenums..."
+						CommandLine="$(GenGLibMKEnums)"
+						Outputs="..\..\gobject\glib-mkenums"
+					/>
+				</FileConfiguration>
+			</File>
+			<File RelativePath="..\..\gio\gdbus-2.0\codegen\gdbus-codegen.in">
+				<FileConfiguration Name="Debug|Win32">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating gdbus-codegen..."
+						CommandLine="$(GenGDBusCodegen)"
+						Outputs="..\..\gio\gdbus-2.0\codegen\gdbus-codegen"
+					/>
+				</FileConfiguration>
+				<FileConfiguration Name="Release|Win32">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating gdbus-codegen..."
+						CommandLine="$(GenGDBusCodegen)"
+						Outputs="..\..\gio\gdbus-2.0\codegen\gdbus-codegen"
+					/>
+				</FileConfiguration>
+				<FileConfiguration Name="Debug|x64">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating gdbus-codegen..."
+						CommandLine="$(GenGDBusCodegen)"
+						Outputs="..\..\gio\gdbus-2.0\codegen\gdbus-codegen"
+					/>
+				</FileConfiguration>
+				<FileConfiguration Name="Release|x64">
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Generating gdbus-codegen..."
+						CommandLine="$(GenGDBusCodegen)"
+						Outputs="..\..\gio\gdbus-2.0\codegen\gdbus-codegen"
+					/>
+				</FileConfiguration>
+			</File>
 		</Filter>
 	</Files>
 </VisualStudioProject>
diff --git a/win32/vs9/glib-install.vspropsin b/win32/vs9/glib-install.vspropsin
index dec524eca..c7b024a9a 100644
--- a/win32/vs9/glib-install.vspropsin
+++ b/win32/vs9/glib-install.vspropsin
@@ -38,7 +38,7 @@ copy $(SolutionDir)$(ConfigurationName)\$(PlatformName)\bin\gdbus.exe $(CopyDir)
 copy $(SolutionDir)$(ConfigurationName)\$(PlatformName)\bin\gdbus.pdb $(CopyDir)\bin&#x0D;&#x0A;
 copy $(SolutionDir)$(ConfigurationName)\$(PlatformName)\bin\gio.exe $(CopyDir)\bin&#x0D;&#x0A;
 copy $(SolutionDir)$(ConfigurationName)\$(PlatformName)\bin\gio.pdb $(CopyDir)\bin&#x0D;&#x0A;
-copy ..\..\gio\gdbus-2.0\codegen\gdbus-codegen.in $(CopyDir)\bin\gdbus-codegen&#x0D;&#x0A;
+if exist ..\..\gio\gdbus-2.0\codegen\gdbus-codegen copy ..\..\gio\gdbus-2.0\codegen\gdbus-codegen $(CopyDir)\bin&#x0D;&#x0A;
 if exist ..\..\gobject\glib-mkenums copy ..\..\gobject\glib-mkenums $(CopyDir)\bin&#x0D;&#x0A;
 
 mkdir $(CopyDir)\include\glib-$(ApiVersion)\glib\deprecated&#x0D;&#x0A;
@@ -86,6 +86,14 @@ copy ..\..\gio\gdbus-2.0\codegen\*.py $(CopyDir)\share\glib-$(ApiVersion)\codege
 "
 	/>
 	<UserMacro
+		Name="GenGLibMKEnums"
+		Value="if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\gen_util_scripts.py --type=glib-mkenums --version=$(GlibVersion)"
+	/>
+	<UserMacro
+		Name="GenGDBusCodegen"
+		Value="if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\gen_util_scripts.py --type=gdbus-codegen --version=$(GlibVersion)"
+	/>
+	<UserMacro
 		Name="GlibGenPC"
 		Value="(if not exist $(CopyDir) mkdir $(CopyDir)) &amp; (if exist $(PythonPath)\python.exe $(PythonPath)\python.exe ..\glibpc.py --prefix=$(CopyDir) --version=$(GlibVersion))"
 	/>
diff --git a/win32/vs9/gobject.vcprojin b/win32/vs9/gobject.vcprojin
index bc6ce88df..1e2e97e2c 100644
--- a/win32/vs9/gobject.vcprojin
+++ b/win32/vs9/gobject.vcprojin
@@ -21,7 +21,7 @@
 	<Configurations>
 		<Configuration
 			Name="Debug|Win32"
-			InheritedPropertySheets=".\glib-gen-srcs.vsprops"
+			InheritedPropertySheets=".\glib-build-defines.vsprops"
 			ConfigurationType="2"
 			CharacterSet="2"
 			>
@@ -51,7 +51,7 @@
 		</Configuration>
 		<Configuration
 			Name="Release|Win32"
-			InheritedPropertySheets=".\glib-gen-srcs.vsprops"
+			InheritedPropertySheets=".\glib-build-defines.vsprops"
 			ConfigurationType="2"
 			CharacterSet="2"
 			WholeProgramOptimization="1"
@@ -81,7 +81,7 @@
 		</Configuration>
 		<Configuration
 			Name="Debug|x64"
-			InheritedPropertySheets=".\glib-gen-srcs.vsprops"
+			InheritedPropertySheets=".\glib-build-defines.vsprops"
 			ConfigurationType="2"
 			CharacterSet="2"
 			>
@@ -111,7 +111,7 @@
 		</Configuration>
 		<Configuration
 			Name="Release|x64"
-			InheritedPropertySheets=".\glib-gen-srcs.vsprops"
+			InheritedPropertySheets=".\glib-build-defines.vsprops"
 			ConfigurationType="2"
 			CharacterSet="2"
 			WholeProgramOptimization="1"
@@ -161,40 +161,6 @@
 			Filter="rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav"
 			UniqueIdentifier="{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}"
 			>
-			<File RelativePath="..\..\gobject\glib-mkenums.in">
-				<FileConfiguration Name="Debug|Win32">
-					<Tool
-						Name="VCCustomBuildTool"
-						Description="Generating glib-mkenums..."
-						CommandLine="$(GenGLibMKEnums)"
-						Outputs="..\..\gobject\glib-mkenums"
-					/>
-				</FileConfiguration>
-				<FileConfiguration Name="Release|Win32">
-					<Tool
-						Name="VCCustomBuildTool"
-						Description="Generating glib-mkenums..."
-						CommandLine="$(GenGLibMKEnums)"
-						Outputs="..\..\gobject\glib-mkenums"
-					/>
-				</FileConfiguration>
-				<FileConfiguration Name="Debug|x64">
-					<Tool
-						Name="VCCustomBuildTool"
-						Description="Generating glib-mkenums..."
-						CommandLine="$(GenGLibMKEnums)"
-						Outputs="..\..\gobject\glib-mkenums"
-					/>
-				</FileConfiguration>
-				<FileConfiguration Name="Release|x64">
-					<Tool
-						Name="VCCustomBuildTool"
-						Description="Generating glib-mkenums..."
-						CommandLine="$(GenGLibMKEnums)"
-						Outputs="..\..\gobject\glib-mkenums"
-					/>
-				</FileConfiguration>
-			</File>
 			<File RelativePath="..\..\gobject\gobject.rc" />
 		</Filter>
 	</Files>
