Description: Fix conflict between chrono/duration.hpp and apache2/httpd.h
 The former defines a type named "CR" while the latter #defines CR.
Author: Kirill Spitsin <tn@0x746e.org.ua>
Bug: 703325
Forwarded: no

--- boost1.60-1.60.0+dfsg.orig/boost/chrono/duration.hpp
+++ boost1.60-1.60.0+dfsg/boost/chrono/duration.hpp
@@ -572,9 +572,9 @@
     >::type
     operator*(const duration<Rep1, Period>& d, const Rep2& s)
     {
-      typedef typename common_type<Rep1, Rep2>::type CR;
-      typedef duration<CR, Period> CD;
-      return CD(CD(d).count()*static_cast<CR>(s));
+      typedef typename common_type<Rep1, Rep2>::type CRRRRR;
+      typedef duration<CRRRRR, Period> CD;
+      return CD(CD(d).count()*static_cast<CRRRRR>(s));
     }
 
     template <class Rep1, class Period, class Rep2>
@@ -601,10 +601,10 @@
     >::type
     operator/(const duration<Rep1, Period>& d, const Rep2& s)
     {
-        typedef typename common_type<Rep1, Rep2>::type CR;
-        typedef duration<CR, Period> CD;
+        typedef typename common_type<Rep1, Rep2>::type CRRRRR;
+        typedef duration<CRRRRR, Period> CD;
 
-      return CD(CD(d).count()/static_cast<CR>(s));
+      return CD(CD(d).count()/static_cast<CRRRRR>(s));
     }
 
     template <class Rep1, class Period1, class Rep2, class Period2>
@@ -626,10 +626,10 @@
       >::type
     operator/(const Rep1& s, const duration<Rep2, Period>& d)
     {
-        typedef typename common_type<Rep1, Rep2>::type CR;
-        typedef duration<CR, Period> CD;
+        typedef typename common_type<Rep1, Rep2>::type CRRRRR;
+        typedef duration<CRRRRR, Period> CD;
 
-      return static_cast<CR>(s)/CD(d).count();
+      return static_cast<CRRRRR>(s)/CD(d).count();
     }
     #endif
     // Duration %
@@ -642,10 +642,10 @@
     >::type
     operator%(const duration<Rep1, Period>& d, const Rep2& s)
     {
-        typedef typename common_type<Rep1, Rep2>::type CR;
-        typedef duration<CR, Period> CD;
+        typedef typename common_type<Rep1, Rep2>::type CRRRRR;
+        typedef duration<CRRRRR, Period> CD;
 
-      return CD(CD(d).count()%static_cast<CR>(s));
+      return CD(CD(d).count()%static_cast<CRRRRR>(s));
     }
 
     template <class Rep1, class Period1, class Rep2, class Period2>
