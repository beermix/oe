From 8340be855ada2c8a6bdeee46df63f176ad9485ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johannes=20L=C3=B6thberg?= <johannes@kyriasis.com>
Date: Fri, 22 Mar 2019 19:04:42 +0100
Subject: [PATCH 2/2] Remove GNU branding
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

To comply with trademark requirements.

Signed-off-by: Johannes LÃ¶thberg <johannes@kyriasis.com>
---
 src/parallel | 40 ++++++++++++++++++++--------------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/src/parallel b/src/parallel
index b7af99c..222ff11 100755
--- a/src/parallel
+++ b/src/parallel
@@ -1846,7 +1846,7 @@ sub parse_replacement_string_options() {
 sub parse_semaphore() {
     # Semaphore defaults
     # Must be done before computing number of processes and max_line_length
-    # because when running as a semaphore GNU Parallel does not read args
+    # because when running as a semaphore Parallel does not read args
     # Uses:
     #   $opt::semaphore
     #   $Global::semaphore
@@ -2665,7 +2665,7 @@ sub __RUNNING_THE_JOBS_AND_PRINTING_PROGRESS__() {}
 #    $Global::total_started = total number of jobs started
 #    $Global::joblog = filehandle of joblog
 #    $Global::debug = Is debugging on?
-#    $Global::exitstatus = status code of GNU Parallel
+#    $Global::exitstatus = status code of Parallel
 #    $Global::quoting = quote the command to run
 
 sub init_run_jobs() {
@@ -3620,14 +3620,14 @@ sub run_parallel() {
 }
 
 sub _run_parallel() {
-    # Run GNU Parallel
+    # Run Parallel
     # This should ideally just fork an internal copy
     # and not start it through a shell
     # Input:
-    #   $stdin = data to provide on stdin for GNU Parallel
+    #   $stdin = data to provide on stdin for Parallel
     #   @args = command line arguments
     # Returns:
-    #   $exitstatus = exitcode of GNU Parallel run
+    #   $exitstatus = exitcode of Parallel run
     #   \@stdout = standard output
     #   \@stderr = standard error
     my ($stdin,@args) = @_;
@@ -4003,7 +4003,7 @@ sub onall($@) {
 	);
     ::debug("init", "| $0 $options\n");
     open(my $parallel_fh, "|-", "$0 -0 --will-cite -j0 $options") ||
-	::die_bug("This does not run GNU Parallel: $0 $options");
+	::die_bug("This does not run Parallel: $0 $options");
     my @joblogs;
     for my $host (sort keys %Global::host) {
 	my $sshlogin = $Global::host{$host};
@@ -4067,14 +4067,14 @@ sub sigpipe() {
 
 sub signal_children() {
     # Send signal to all children process groups
-    # and GNU Parallel itself
+    # and Parallel itself
     # Uses:
     #   %SIG
     # Returns: N/A
     my $signal = shift;
     debug("run", "Sending $signal ");
     kill $signal, map { -$_ } keys %Global::running;
-    # Use default signal handler for GNU Parallel itself
+    # Use default signal handler for Parallel itself
     $SIG{$signal} = undef;
     kill $signal, $$;
 }
@@ -4396,11 +4396,11 @@ sub version() {
     # Returns: N/A
     print join
 	("\n",
-	 "GNU $Global::progname $Global::version",
+	 "$Global::progname $Global::version",
 	 "Copyright (C) 2007-2019 Ole Tange and Free Software Foundation, Inc.",
 	 "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>",
 	 "This is free software: you are free to change and redistribute it.",
-	 "GNU $Global::progname comes with no warranty.\n",
+	 "$Global::progname comes with no warranty.\n",
         );
 }
 
@@ -4415,7 +4415,7 @@ sub show_limits() {
 }
 
 sub embed() {
-    # Give an embeddable version of GNU Parallel
+    # Give an embeddable version of Parallel
     # Tested with: bash, zsh, ksh, ash, dash, sh
     my $randomstring = "cut-here-".join"",
 	map { (0..9,"a".."z","A".."Z")[rand(62)] } (1..20);
@@ -4460,9 +4460,9 @@ sub embed() {
 ";
 
 	print q!
-# Embedded GNU Parallel created with --embed
+# Embedded Parallel created with --embed
 parallel() {
-    # Start GNU Parallel without leaving temporary files
+    # Start Parallel without leaving temporary files
     #
     # Not all shells support 'perl <(cat ...)'
     # This is a complex way of doing:
@@ -5891,7 +5891,7 @@ sub loadavg($) {
     #   Recompute a new one in the background
     # The load average is computed as the number of processes waiting for disk
     # or CPU right now. So it is the server load this instant and not averaged over
-    # several minutes. This is needed so GNU Parallel will at most start one job
+    # several minutes. This is needed so Parallel will at most start one job
     # that will push the load over the limit.
     #
     # Returns:
@@ -8110,8 +8110,8 @@ sub base64_zip_eval() {
     # Returns:
     #   $script = 1-liner for perl -e
     my $script = ::spacefree(0,q{
-        @GNU_Parallel = split /_/, "use_IPC::Open3;_use_MIME::Base64";
-        eval"@GNU_Parallel";
+        @Parallel = split /_/, "use_IPC::Open3;_use_MIME::Base64";
+        eval"@Parallel";
         $chld = $SIG{CHLD};
 	$SIG{CHLD} = "IGNORE";
 	# Search for bzip2. Not found => use default path
@@ -8163,13 +8163,13 @@ sub base64_eval($) {
     # Will be wrapped in ' so single quote is forbidden.
     # Spaces are stripped so spaces cannot be significant.
     # The funny 'use IPC::Open3'-syntax is to avoid spaces and
-    # to make it clear that this is a GNU Parallel command
+    # to make it clear that this is a Parallel command
     # when looking at the process table.
     # Returns:
     #   $script = 1-liner for perl -e
     my $script = ::spacefree(0,q{
-        @GNU_Parallel=("use","IPC::Open3;","use","MIME::Base64");
-        eval "@GNU_Parallel";
+        @Parallel=("use","IPC::Open3;","use","MIME::Base64");
+        eval "@Parallel";
         my $eval = decode_base64(join"",@ARGV);
 	eval $eval;
 			     });
@@ -10794,7 +10794,7 @@ sub get($) {
     my $ret = $self->{'arg_sub_queue'}->get();
     if($ret) {
 	if(grep { index($_->orig(),"\0") > 0 } @$ret) {
-	    # Allow for \0 in position 0 because GNU Parallel uses "\0noarg"
+	    # Allow for \0 in position 0 because Parallel uses "\0noarg"
 	    # to mean no-string
 	    ::warning("A NUL character in the input was replaced with \\0.",
 		      "NUL cannot be passed through in the argument list.",
-- 
2.21.0

