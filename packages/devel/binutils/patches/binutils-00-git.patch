commit b8440a913ad431f633aa1f5a4257418162cd4b7a
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Sat Sep 16 00:01:38 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index f7c691669a..37b7b5fa9e 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170915
+#define BFD_VERSION_DATE 20170916
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit 9ef3b238bb698b3ab71798ded230522d4957150b
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Sun Sep 17 00:01:29 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 37b7b5fa9e..fac62ae6b4 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170916
+#define BFD_VERSION_DATE 20170917
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit 7a31b38ef87d133d8204cae67a97f1989d25fa18
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Mon Sep 18 00:01:24 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index fac62ae6b4..5912b00ceb 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170917
+#define BFD_VERSION_DATE 20170918
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit e6ff33ca50c1180725dde11c84ee93fcdb4235ef
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Sep 18 13:05:25 2017 -0700

    Check error return from bfd_canonicalize_dynamic_reloc
    
    Since bfd_canonicalize_dynamic_reloc returns -1 on error, check it in
    elf_i386_get_synthetic_symtab and elf_x86_64_get_synthetic_symtab.
    
            PR ld/22148
            * elf32-i386.c (elf_i386_get_synthetic_symtab): Check error
            return from bfd_canonicalize_dynamic_reloc.
            * elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
    
    (cherry picked from commit 94670f6cf11fc29cc6db6814b38c4305d9bcac96)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index c302aadf44..d08844e569 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,10 @@
+2017-09-18  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/22148
+	* elf32-i386.c (elf_i386_get_synthetic_symtab): Check error
+	return from bfd_canonicalize_dynamic_reloc.
+	* elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
+
 2017-09-15  Nick Clifton  <nickc@redhat.com>
 
 	2.29.1 Release
diff --git a/bfd/elf32-i386.c b/bfd/elf32-i386.c
index 00a6397913..5c1c3ff790 100644
--- a/bfd/elf32-i386.c
+++ b/bfd/elf32-i386.c
@@ -6342,6 +6342,8 @@ elf_i386_get_synthetic_symtab (bfd *abfd,
 
   dynrelcount = bfd_canonicalize_dynamic_reloc (abfd, dynrelbuf,
 						dynsyms);
+  if (dynrelcount < 0)
+    return -1;
 
   /* Sort the relocs by address.  */
   qsort (dynrelbuf, dynrelcount, sizeof (arelent *), compare_relocs);
diff --git a/bfd/elf64-x86-64.c b/bfd/elf64-x86-64.c
index 6bc1898a96..80dd791d25 100644
--- a/bfd/elf64-x86-64.c
+++ b/bfd/elf64-x86-64.c
@@ -6717,6 +6717,8 @@ elf_x86_64_get_synthetic_symtab (bfd *abfd,
 
   dynrelcount = bfd_canonicalize_dynamic_reloc (abfd, dynrelbuf,
 						dynsyms);
+  if (dynrelcount < 0)
+    return -1;
 
   /* Sort the relocs by address.  */
   qsort (dynrelbuf, dynrelcount, sizeof (arelent *), compare_relocs);

commit 00109687cb48c33965afbc6d821f3f0e3fec365c
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Tue Aug 8 20:20:43 2017 -0700

    ld: Require GCC 5 or above for 3 x86 tests
    
    Require GCC 5 or above for 3 x86 tests which fail with GCC 4.9.3.
    
            PR ld/21924
            * testsuite/ld-i386/i386.exp: Require GCC 5 or above for
            "weakundef1 with PIE" test.
            * testsuite/ld-x86-64/tls.exp: Require GCC 5 or above for
            "tlsdesc1" and "tlsdesc1 with PIE" tests.
    
    (cherry picked from commit 25d28c91b89d8f4a7e78b98b01e2c2382cea3e60)

diff --git a/ld/ChangeLog b/ld/ChangeLog
index 406e72c112..552f7067be 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,3 +1,11 @@
+2017-09-18  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/21924
+	* testsuite/ld-i386/i386.exp: Require GCC 5 or above for
+	"weakundef1 with PIE" test.
+	* testsuite/ld-x86-64/tls.exp: Require GCC 5 or above for
+	"tlsdesc1" and "tlsdesc1 with PIE" tests.
+
 2017-09-15  Nick Clifton  <nickc@redhat.com>
 
 	2.29.1 Release
diff --git a/ld/testsuite/ld-i386/i386.exp b/ld/testsuite/ld-i386/i386.exp
index 1734d67a37..1a35a572b2 100644
--- a/ld/testsuite/ld-i386/i386.exp
+++ b/ld/testsuite/ld-i386/i386.exp
@@ -1251,16 +1251,20 @@ if { [isnative]
 	    "pass.out" \
 	    "$NOPIE_CFLAGS" \
 	] \
-	[list \
-	    "Run weakundef1 with PIE" \
-	    "-pie" \
-	    "" \
-	    { weakundef1.c } \
-	    "weakundef1pie" \
-	    "pass.out" \
-	    "-fPIE" \
-	] \
     ]
+    if { [at_least_gcc_version 5 0] } {
+	run_ld_link_exec_tests [list \
+	    [list \
+		"Run weakundef1 with PIE" \
+		"-pie" \
+		"" \
+		{ weakundef1.c } \
+		"weakundef1pie" \
+		"pass.out" \
+		"-fPIE" \
+	    ] \
+	]
+    }
 }
 
 if { !([istarget "i?86-*-linux*"]
diff --git a/ld/testsuite/ld-x86-64/tls.exp b/ld/testsuite/ld-x86-64/tls.exp
index 4263d95bd1..7896451c01 100644
--- a/ld/testsuite/ld-x86-64/tls.exp
+++ b/ld/testsuite/ld-x86-64/tls.exp
@@ -206,16 +206,30 @@ if { ![check_gnu2_tls_available] } {
     return
 }
 
+if { [at_least_gcc_version 5 0] } {
+    run_ld_link_exec_tests [list \
+	[list \
+	    "Run tlsdesc1" \
+	    "-Wl,--no-as-needed tmpdir/libtlsdesc1.so" \
+	    "" \
+	    { tlsdesc1a.c } \
+	    "tlsdesc1a" \
+	    "pass.out" \
+	    "$GNU2_CFLAGS" \
+	] \
+	[list \
+	    "Run tlsdesc1 with PIE" \
+	    "-pie -Wl,--no-as-needed tmpdir/libtlsdesc1.so" \
+	    "" \
+	    { tlsdesc1a.c } \
+	    "tlsdesc1c" \
+	    "pass.out" \
+	    "-fPIE $GNU2_CFLAGS" \
+	] \
+    ]
+}
+
 run_ld_link_exec_tests [list \
-    [list \
-	"Run tlsdesc1" \
-	"-Wl,--no-as-needed tmpdir/libtlsdesc1.so" \
-	"" \
-	{ tlsdesc1a.c } \
-	"tlsdesc1a" \
-	"pass.out" \
-	"$GNU2_CFLAGS" \
-    ] \
     [list \
 	"Run tlsdesc1 (-z now)" \
 	"-Wl,-z,now -Wl,--no-as-needed tmpdir/libtlsdesc1n.so" \
@@ -225,15 +239,6 @@ run_ld_link_exec_tests [list \
 	"pass.out" \
 	"$GNU2_CFLAGS" \
     ] \
-    [list \
-	"Run tlsdesc1 with PIE" \
-	"-pie -Wl,--no-as-needed tmpdir/libtlsdesc1.so" \
-	"" \
-	{ tlsdesc1a.c } \
-	"tlsdesc1c" \
-	"pass.out" \
-	"-fPIE $GNU2_CFLAGS" \
-    ] \
     [list \
 	"Run tlsdesc1 with PIE (-z now)" \
 	"-pie -Wl,-z,now -Wl,--no-as-needed tmpdir/libtlsdesc1n.so" \

commit 583043c2b8c641612e93b02b9266ca8adc349952
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Tue Sep 19 00:01:22 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 5912b00ceb..3405e424f4 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170918
+#define BFD_VERSION_DATE 20170919
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit 1ae8e2374e736ae90901ec9165b8cb113131bc23
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Sep 19 14:22:26 2017 +0930

    Revert "Import patch from mainline to improve padding of .eh_frame sections."
    
    This reverts commit 35e01275b59ac867d342379d457e732b5acda6a3.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index d08844e569..40bcac93e3 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,5 @@
+2017-09-04  Nick Clifton  <nickc@redhat.com>
+
 2017-09-18  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/22148
@@ -120,12 +122,6 @@
 	(elfcore_grok_freebsd_prstatus): Add checks to make sure that
 	there is enough data present in the note.
 
-	PR 21441
-	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Don't add
-	alignment padding here.
-	* elflink.c (bfd_elf_discard_info): Add .eh_frame padding here
-	in a reverse pass over sections.
-
 2017-09-04  Alan Modra  <amodra@gmail.com>
 
 	PR 22067
diff --git a/bfd/elf-eh-frame.c b/bfd/elf-eh-frame.c
index cd81b608d3..52ba9c6213 100644
--- a/bfd/elf-eh-frame.c
+++ b/bfd/elf-eh-frame.c
@@ -619,6 +619,15 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,
 
   REQUIRE (bfd_malloc_and_get_section (abfd, sec, &ehbuf));
 
+  if (sec->size >= 4
+      && bfd_get_32 (abfd, ehbuf) == 0
+      && cookie->rel == cookie->relend)
+    {
+      /* Empty .eh_frame section.  */
+      free (ehbuf);
+      return;
+    }
+
   /* If .eh_frame section size doesn't fit into int, we cannot handle
      it (it would need to use 64-bit .eh_frame format anyway).  */
   REQUIRE (sec->size == (unsigned int) sec->size);
@@ -660,11 +669,8 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,
   REQUIRE (sec_info);
 
   /* We need to have a "struct cie" for each CIE in this section.  */
-  if (num_cies)
-    {
-      local_cies = (struct cie *) bfd_zmalloc (num_cies * sizeof (*local_cies));
-      REQUIRE (local_cies);
-    }
+  local_cies = (struct cie *) bfd_zmalloc (num_cies * sizeof (*local_cies));
+  REQUIRE (local_cies);
 
   /* FIXME: octets_per_byte.  */
 #define ENSURE_NO_RELOCS(buf)				\
@@ -718,9 +724,7 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,
       if (hdr_length == 0)
 	{
 	  /* A zero-length CIE should only be found at the end of
-	     the section, but allow multiple terminators.  */
-	  while (skip_bytes (&buf, ehbuf + sec->size, 4))
-	    REQUIRE (bfd_get_32 (abfd, buf - 4) == 0);
+	     the section.  */
 	  REQUIRE ((bfd_size_type) (buf - ehbuf) == sec->size);
 	  ENSURE_NO_RELOCS (buf);
 	  sec_info->count++;
@@ -1335,7 +1339,7 @@ offset_adjust (bfd_vma offset, const asection *sec)
   struct eh_frame_sec_info *sec_info
     = (struct eh_frame_sec_info *) elf_section_data (sec)->sec_info;
   unsigned int lo, hi, mid;
-  struct eh_cie_fde *ent = NULL;
+  struct eh_cie_fde *ent;
   bfd_signed_vma delta;
 
   lo = 0;
@@ -1590,7 +1594,16 @@ _bfd_elf_discard_section_eh_frame
 	offset += size_of_output_cie_fde (ent);
       }
 
+  /* Pad the last FDE out to the output section alignment if there are
+     following sections, in order to ensure no padding between this
+     section and the next.  (Relies on the output section alignment
+     being the maximum of all input sections alignments, which is the
+     case unless someone is overriding alignment via scripts.)  */
   eh_alignment = 4;
+  if (sec->map_head.s != NULL
+      && (sec->map_head.s->size != 4
+	  || sec->map_head.s->map_head.s != NULL))
+    eh_alignment = 1 << sec->output_section->alignment_power;
   offset = (offset + eh_alignment - 1) & -eh_alignment;
   sec->rawsize = sec->size;
   sec->size = offset;
diff --git a/bfd/elflink.c b/bfd/elflink.c
index 301cf03436..736fb4c2f7 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -13831,7 +13831,6 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)
     {
       asection *i;
       int eh_changed = 0;
-      unsigned int eh_alignment;
 
       for (i = o->map_head.s; i != NULL; i = i->map_head.s)
 	{
@@ -13857,37 +13856,6 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)
 
 	  fini_reloc_cookie_for_section (&cookie, i);
 	}
-
-      eh_alignment = 1 << o->alignment_power;
-      /* Skip over zero terminator, and prevent empty sections from
-	 adding alignment padding at the end.  */
-      for (i = o->map_tail.s; i != NULL; i = i->map_tail.s)
-	if (i->size == 0)
-	  i->flags |= SEC_EXCLUDE;
-	else if (i->size > 4)
-	  break;
-      /* The last non-empty eh_frame section doesn't need padding.  */
-      if (i != NULL)
-	i = i->map_tail.s;
-      /* Any prior sections must pad the last FDE out to the output
-	 section alignment.  Otherwise we might have zero padding
-	 between sections, which would be seen as a terminator.  */
-      for (; i != NULL; i = i->map_tail.s)
-	if (i->size == 4)
-	  /* All but the last zero terminator should have been removed.  */
-	  BFD_FAIL ();
-	else
-	  {
-	    bfd_size_type size
-	      = (i->size + eh_alignment - 1) & -eh_alignment;
-	    if (i->size != size)
-	      {
-		i->size = size;
-		changed = 1;
-		eh_changed = 1;
-	      }
-	  }
-
       if (eh_changed)
 	elf_link_hash_traverse (elf_hash_table (info),
 				_bfd_elf_adjust_eh_frame_global_symbol, NULL);
diff --git a/ld/ChangeLog b/ld/ChangeLog
index 552f7067be..f513008c2e 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -30,17 +30,6 @@
 	* testsuite/ld-powerpc/relbrlt.d: Pass --no-plt-align.
 	* testsuite/ld-powerpc/elfv2so.d: Adjust expected output.
 
-2017-09-04  Nick Clifton  <nickc@redhat.com>
-
-	Import from mainline:
-
-	* testsuite/ld-elf/eh3.d: Update.
-	* testsuite/ld-elf/eh4.d: Update.
-
-	PR 21441
-	* testsuite/ld-x86-64/pr21038a.d: Adjust.
-	* testsuite/ld-x86-64/pr21038a-now.d: Adjust.
-
 2017-09-01  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/22064
diff --git a/ld/testsuite/ld-elf/eh3.d b/ld/testsuite/ld-elf/eh3.d
index 6ac584a622..3811341158 100644
--- a/ld/testsuite/ld-elf/eh3.d
+++ b/ld/testsuite/ld-elf/eh3.d
@@ -23,12 +23,20 @@ Contents of the .eh_frame section:
   DW_CFA_nop
   DW_CFA_nop
 
-0+0018 0+001c 0+001c FDE cie=0+0000 pc=0+400078\.\.0+400090
+0+0018 0+0024 0+001c FDE cie=0+0000 pc=0+400078\.\.0+400090
   DW_CFA_advance_loc: 8 to 0+400080
   DW_CFA_def_cfa_offset: 16
   DW_CFA_offset: r6 \(rbp\) at cfa-16
   DW_CFA_advance_loc: 8 to 0+400088
   DW_CFA_def_cfa_register: r6 \(rbp\)
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
 
-0+0038 ZERO terminator
+0+0040 ZERO terminator
 #pass
diff --git a/ld/testsuite/ld-elf/eh4.d b/ld/testsuite/ld-elf/eh4.d
index 6c1cb320d1..b5eec2f4d1 100644
--- a/ld/testsuite/ld-elf/eh4.d
+++ b/ld/testsuite/ld-elf/eh4.d
@@ -28,12 +28,14 @@ Contents of the .eh_frame section:
   DW_CFA_set_loc: 0+0417
   DW_CFA_def_cfa_offset: 80
 
-0+0048 0+002[04] 0+004c FDE cie=0+0000 pc=[0-9a-f]+\.\.[0-9a-f]+
+0+0048 0+0024 0+004c FDE cie=0+0000 pc=[0-9a-f]+\.\.[0-9a-f]+
   DW_CFA_def_cfa_offset: 16
   DW_CFA_advance_loc: [0-9a-f]+ to [0-9a-f]+
   DW_CFA_def_cfa_offset: 24
   DW_CFA_advance_loc: [0-9a-f]+ to [0-9a-f]+
   DW_CFA_def_cfa_expression \(DW_OP_breg7 \(rsp\): 8; DW_OP_breg16 \(rip\): 0;.*
+  DW_CFA_nop
 #...
+
 [0-9a-f]+ ZERO terminator
 #pass
diff --git a/ld/testsuite/ld-x86-64/pr21038a-now.d b/ld/testsuite/ld-x86-64/pr21038a-now.d
index 1d5bec1854..ebc512887a 100644
--- a/ld/testsuite/ld-x86-64/pr21038a-now.d
+++ b/ld/testsuite/ld-x86-64/pr21038a-now.d
@@ -1,7 +1,7 @@
 #name: PR ld/21038 (.plt.got, -z now)
 #source: pr21038a.s
 #as: --64
-#ld: -z now -z bndplt -melf_x86_64 -shared -z relro --ld-generated-unwind-info --hash-style=sysv
+#ld: -z now -z bndplt -melf_x86_64 -shared -z relro --ld-generated-unwind-info
 #objdump: -dw -Wf
 
 .*: +file format .*
@@ -41,7 +41,11 @@ Contents of the .eh_frame section:
   DW_CFA_nop
   DW_CFA_nop
 
-0+58 0000000000000010 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
+0+58 0000000000000014 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
   DW_CFA_nop
   DW_CFA_nop
   DW_CFA_nop
diff --git a/ld/testsuite/ld-x86-64/pr21038a.d b/ld/testsuite/ld-x86-64/pr21038a.d
index 01770ec671..81b26cb53c 100644
--- a/ld/testsuite/ld-x86-64/pr21038a.d
+++ b/ld/testsuite/ld-x86-64/pr21038a.d
@@ -1,6 +1,6 @@
 #name: PR ld/21038 (.plt.got)
 #as: --64
-#ld: -z bndplt -melf_x86_64 -shared -z relro --ld-generated-unwind-info --hash-style=sysv
+#ld: -z bndplt -melf_x86_64 -shared -z relro --ld-generated-unwind-info
 #objdump: -dw -Wf
 
 .*: +file format .*
@@ -40,7 +40,11 @@ Contents of the .eh_frame section:
   DW_CFA_nop
   DW_CFA_nop
 
-0+58 0000000000000010 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
+0+58 0000000000000014 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
   DW_CFA_nop
   DW_CFA_nop
   DW_CFA_nop

commit 8fd7cca5b0ed5a2f2099428586359f5cdff2063d
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Aug 14 09:25:17 2017 +0930

    PR21441, Unnecessary padding of .eh_frame section
    
    Until all .eh_frame sections have been edited we don't know their
    sizes.  So it isn't possible to properly decide whether a non-empty
    .eh_frame section follows a given section until editing is complete.
    
    bfd/
            PR 21441
            * elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Don't add
            alignment padding here.
            * elflink.c (bfd_elf_discard_info): Add .eh_frame padding here
            in a reverse pass over sections.
    ld/
            PR 21441
            * testsuite/ld-x86-64/pr21038a.d: Adjust.
            * testsuite/ld-x86-64/pr21038a-now.d: Adjust.
    
    (cherry picked from commit 79a94a2ad1e6e2f227de07427481e4bb8be84504)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 40bcac93e3..73377b9173 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,11 @@
+2017-08-14  Alan Modra  <amodra@gmail.com>
+
+	PR 21441
+	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Don't add
+	alignment padding here.
+	* elflink.c (bfd_elf_discard_info): Add .eh_frame padding here
+	in a reverse pass over sections.
+
 2017-09-04  Nick Clifton  <nickc@redhat.com>
 
 2017-09-18  H.J. Lu  <hongjiu.lu@intel.com>
diff --git a/bfd/elf-eh-frame.c b/bfd/elf-eh-frame.c
index 52ba9c6213..7e0d63f569 100644
--- a/bfd/elf-eh-frame.c
+++ b/bfd/elf-eh-frame.c
@@ -1594,16 +1594,7 @@ _bfd_elf_discard_section_eh_frame
 	offset += size_of_output_cie_fde (ent);
       }
 
-  /* Pad the last FDE out to the output section alignment if there are
-     following sections, in order to ensure no padding between this
-     section and the next.  (Relies on the output section alignment
-     being the maximum of all input sections alignments, which is the
-     case unless someone is overriding alignment via scripts.)  */
   eh_alignment = 4;
-  if (sec->map_head.s != NULL
-      && (sec->map_head.s->size != 4
-	  || sec->map_head.s->map_head.s != NULL))
-    eh_alignment = 1 << sec->output_section->alignment_power;
   offset = (offset + eh_alignment - 1) & -eh_alignment;
   sec->rawsize = sec->size;
   sec->size = offset;
diff --git a/bfd/elflink.c b/bfd/elflink.c
index 736fb4c2f7..6bab097b05 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -13831,6 +13831,7 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)
     {
       asection *i;
       int eh_changed = 0;
+      unsigned int eh_alignment;
 
       for (i = o->map_head.s; i != NULL; i = i->map_head.s)
 	{
@@ -13856,6 +13857,34 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)
 
 	  fini_reloc_cookie_for_section (&cookie, i);
 	}
+      eh_alignment = 1 << o->alignment_power;
+      if (eh_alignment > 4)
+	{
+	  /* Skip over zero terminator, and prevent empty sections
+	     from adding alignment padding at the end.  */
+	  for (i = o->map_tail.s; i != NULL; i = i->map_tail.s)
+	    if (i->size == 0)
+	      i->flags |= SEC_EXCLUDE;
+	    else if (i->size > 4)
+	      break;
+	  /* The last non-empty eh_frame section doesn't need padding.  */
+	  if (i != NULL)
+	    i = i->map_tail.s;
+	  /* Any prior sections must pad the last FDE out to the
+	     output section alignment.  Otherwise we might have zero
+	     padding between sections, which would be seen as a
+	     terminator.  */
+	  for (; i != NULL; i = i->map_tail.s)
+	    {
+	      bfd_size_type size = (i->size + eh_alignment - 1) & -eh_alignment;
+	      if (i->size != size)
+		{
+		  i->size = size;
+		  changed = 1;
+		  eh_changed = 1;
+		}
+	    }
+	}
       if (eh_changed)
 	elf_link_hash_traverse (elf_hash_table (info),
 				_bfd_elf_adjust_eh_frame_global_symbol, NULL);
diff --git a/ld/ChangeLog b/ld/ChangeLog
index f513008c2e..56ce18b85a 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,3 +1,9 @@
+2017-08-14  Alan Modra  <amodra@gmail.com>
+
+	PR 21441
+	* testsuite/ld-x86-64/pr21038a.d: Adjust.
+	* testsuite/ld-x86-64/pr21038a-now.d: Adjust.
+
 2017-09-18  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/21924
diff --git a/ld/testsuite/ld-x86-64/pr21038a-now.d b/ld/testsuite/ld-x86-64/pr21038a-now.d
index ebc512887a..6948ded162 100644
--- a/ld/testsuite/ld-x86-64/pr21038a-now.d
+++ b/ld/testsuite/ld-x86-64/pr21038a-now.d
@@ -41,11 +41,7 @@ Contents of the .eh_frame section:
   DW_CFA_nop
   DW_CFA_nop
 
-0+58 0000000000000014 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
+0+58 0000000000000010 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
   DW_CFA_nop
   DW_CFA_nop
   DW_CFA_nop
diff --git a/ld/testsuite/ld-x86-64/pr21038a.d b/ld/testsuite/ld-x86-64/pr21038a.d
index 81b26cb53c..7b1b7dcd4c 100644
--- a/ld/testsuite/ld-x86-64/pr21038a.d
+++ b/ld/testsuite/ld-x86-64/pr21038a.d
@@ -40,11 +40,7 @@ Contents of the .eh_frame section:
   DW_CFA_nop
   DW_CFA_nop
 
-0+58 0000000000000014 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
+0+58 0000000000000010 0000005c FDE cie=00000000 pc=0000000000000230..0000000000000238
   DW_CFA_nop
   DW_CFA_nop
   DW_CFA_nop

commit 3bf3f89d9d6f3a09def722d010695c35bffb4a48
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Aug 31 12:48:37 2017 +0930

    PR22048, Incorrect .eh_frame section in libc.so
    
            PR 21441
            PR 22048
            * elflink.c (bfd_elf_discard_info): Don't pad embedded zero
            terminators.
    
    (cherry picked from commit af471f828cc74d65b50a7531ba2c69522266cfe9)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 73377b9173..268f187f56 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,10 @@
+2017-08-31  Alan Modra  <amodra@gmail.com>
+
+	PR 21441
+	PR 22048
+	* elflink.c (bfd_elf_discard_info): Don't pad embedded zero
+	terminators.
+
 2017-08-14  Alan Modra  <amodra@gmail.com>
 
 	PR 21441
diff --git a/bfd/elflink.c b/bfd/elflink.c
index 6bab097b05..d02aff9741 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -13873,17 +13873,22 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)
 	  /* Any prior sections must pad the last FDE out to the
 	     output section alignment.  Otherwise we might have zero
 	     padding between sections, which would be seen as a
-	     terminator.  */
+	     terminator.  If there is a terminator in the middle of
+	     FDEs, don't increase its size as that will write bogus
+	     data of whatever was after the terminator in the input
+	     file, to the output file.  */
 	  for (; i != NULL; i = i->map_tail.s)
-	    {
-	      bfd_size_type size = (i->size + eh_alignment - 1) & -eh_alignment;
-	      if (i->size != size)
-		{
-		  i->size = size;
-		  changed = 1;
-		  eh_changed = 1;
-		}
-	    }
+	    if (i->size != 4)
+	      {
+		bfd_size_type size
+		  = (i->size + eh_alignment - 1) & -eh_alignment;
+		if (i->size != size)
+		  {
+		    i->size = size;
+		    changed = 1;
+		    eh_changed = 1;
+		  }
+	      }
 	}
       if (eh_changed)
 	elf_link_hash_traverse (elf_hash_table (info),

commit 8deff86b8c66a2f2e7792d99748e6c40911e02f2
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Aug 31 19:39:14 2017 +0930

    Remove .eh_frame zero terminators
    
    The machinery to do this was there, but not enabled if the terminator
    was the only thing in the section.
    
    bfd/
            * elf-eh-frame.c (_bfd_elf_parse_eh_frame): Don't exit early
            for a section containing just a terminator.  Allow multiple
            terminators at end of section.
            * elflink.c (bfd_elf_discard_info): Iterate over .eh_frame
            sections when not adding alignment.  Assert on terminator in
            the middle of FDEs.
    ld/
            * testsuite/ld-elf/eh3.d: Update.
            * testsuite/ld-elf/eh4.d: Update.
    
    (cherry picked from commit 9866ffe25a0fe73f5153f2720650baf0dd9cc828)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 268f187f56..6dce8cc3a7 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,12 @@
+2017-08-31  Alan Modra  <amodra@gmail.com>
+
+	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Don't exit early
+	for a section containing just a terminator.  Allow multiple
+	terminators at end of section.
+	* elflink.c (bfd_elf_discard_info): Iterate over .eh_frame
+	sections when not adding alignment.  Assert on terminator in
+	the middle of FDEs.
+
 2017-08-31  Alan Modra  <amodra@gmail.com>
 
 	PR 21441
diff --git a/bfd/elf-eh-frame.c b/bfd/elf-eh-frame.c
index 7e0d63f569..f0ede2d6f7 100644
--- a/bfd/elf-eh-frame.c
+++ b/bfd/elf-eh-frame.c
@@ -619,15 +619,6 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,
 
   REQUIRE (bfd_malloc_and_get_section (abfd, sec, &ehbuf));
 
-  if (sec->size >= 4
-      && bfd_get_32 (abfd, ehbuf) == 0
-      && cookie->rel == cookie->relend)
-    {
-      /* Empty .eh_frame section.  */
-      free (ehbuf);
-      return;
-    }
-
   /* If .eh_frame section size doesn't fit into int, we cannot handle
      it (it would need to use 64-bit .eh_frame format anyway).  */
   REQUIRE (sec->size == (unsigned int) sec->size);
@@ -669,8 +660,11 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,
   REQUIRE (sec_info);
 
   /* We need to have a "struct cie" for each CIE in this section.  */
-  local_cies = (struct cie *) bfd_zmalloc (num_cies * sizeof (*local_cies));
-  REQUIRE (local_cies);
+  if (num_cies)
+    {
+      local_cies = (struct cie *) bfd_zmalloc (num_cies * sizeof (*local_cies));
+      REQUIRE (local_cies);
+    }
 
   /* FIXME: octets_per_byte.  */
 #define ENSURE_NO_RELOCS(buf)				\
@@ -724,7 +718,9 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,
       if (hdr_length == 0)
 	{
 	  /* A zero-length CIE should only be found at the end of
-	     the section.  */
+	     the section, but allow multiple terminators.  */
+	  while (skip_bytes (&buf, ehbuf + sec->size, 4))
+	    REQUIRE (bfd_get_32 (abfd, buf - 4) == 0);
 	  REQUIRE ((bfd_size_type) (buf - ehbuf) == sec->size);
 	  ENSURE_NO_RELOCS (buf);
 	  sec_info->count++;
diff --git a/bfd/elflink.c b/bfd/elflink.c
index d02aff9741..e8527627a1 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -13857,39 +13857,36 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)
 
 	  fini_reloc_cookie_for_section (&cookie, i);
 	}
+
       eh_alignment = 1 << o->alignment_power;
-      if (eh_alignment > 4)
-	{
-	  /* Skip over zero terminator, and prevent empty sections
-	     from adding alignment padding at the end.  */
-	  for (i = o->map_tail.s; i != NULL; i = i->map_tail.s)
-	    if (i->size == 0)
-	      i->flags |= SEC_EXCLUDE;
-	    else if (i->size > 4)
-	      break;
-	  /* The last non-empty eh_frame section doesn't need padding.  */
-	  if (i != NULL)
-	    i = i->map_tail.s;
-	  /* Any prior sections must pad the last FDE out to the
-	     output section alignment.  Otherwise we might have zero
-	     padding between sections, which would be seen as a
-	     terminator.  If there is a terminator in the middle of
-	     FDEs, don't increase its size as that will write bogus
-	     data of whatever was after the terminator in the input
-	     file, to the output file.  */
-	  for (; i != NULL; i = i->map_tail.s)
-	    if (i->size != 4)
+      /* Skip over zero terminator, and prevent empty sections from
+	 adding alignment padding at the end.  */
+      for (i = o->map_tail.s; i != NULL; i = i->map_tail.s)
+	if (i->size == 0)
+	  i->flags |= SEC_EXCLUDE;
+	else if (i->size > 4)
+	  break;
+      /* The last non-empty eh_frame section doesn't need padding.  */
+      if (i != NULL)
+	i = i->map_tail.s;
+      /* Any prior sections must pad the last FDE out to the output
+	 section alignment.  Otherwise we might have zero padding
+	 between sections, which would be seen as a terminator.  */
+      for (; i != NULL; i = i->map_tail.s)
+	if (i->size == 4)
+	  /* All but the last zero terminator should have been removed.  */
+	  BFD_FAIL ();
+	else
+	  {
+	    bfd_size_type size
+	      = (i->size + eh_alignment - 1) & -eh_alignment;
+	    if (i->size != size)
 	      {
-		bfd_size_type size
-		  = (i->size + eh_alignment - 1) & -eh_alignment;
-		if (i->size != size)
-		  {
-		    i->size = size;
-		    changed = 1;
-		    eh_changed = 1;
-		  }
+		i->size = size;
+		changed = 1;
+		eh_changed = 1;
 	      }
-	}
+	  }
       if (eh_changed)
 	elf_link_hash_traverse (elf_hash_table (info),
 				_bfd_elf_adjust_eh_frame_global_symbol, NULL);
diff --git a/ld/ChangeLog b/ld/ChangeLog
index 56ce18b85a..65641fc5d6 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,3 +1,8 @@
+2017-08-31  Alan Modra  <amodra@gmail.com>
+
+	* testsuite/ld-elf/eh3.d: Update.
+	* testsuite/ld-elf/eh4.d: Update.
+
 2017-08-14  Alan Modra  <amodra@gmail.com>
 
 	PR 21441
diff --git a/ld/testsuite/ld-elf/eh3.d b/ld/testsuite/ld-elf/eh3.d
index 3811341158..6ac584a622 100644
--- a/ld/testsuite/ld-elf/eh3.d
+++ b/ld/testsuite/ld-elf/eh3.d
@@ -23,20 +23,12 @@ Contents of the .eh_frame section:
   DW_CFA_nop
   DW_CFA_nop
 
-0+0018 0+0024 0+001c FDE cie=0+0000 pc=0+400078\.\.0+400090
+0+0018 0+001c 0+001c FDE cie=0+0000 pc=0+400078\.\.0+400090
   DW_CFA_advance_loc: 8 to 0+400080
   DW_CFA_def_cfa_offset: 16
   DW_CFA_offset: r6 \(rbp\) at cfa-16
   DW_CFA_advance_loc: 8 to 0+400088
   DW_CFA_def_cfa_register: r6 \(rbp\)
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
-  DW_CFA_nop
 
-0+0040 ZERO terminator
+0+0038 ZERO terminator
 #pass
diff --git a/ld/testsuite/ld-elf/eh4.d b/ld/testsuite/ld-elf/eh4.d
index b5eec2f4d1..6c1cb320d1 100644
--- a/ld/testsuite/ld-elf/eh4.d
+++ b/ld/testsuite/ld-elf/eh4.d
@@ -28,14 +28,12 @@ Contents of the .eh_frame section:
   DW_CFA_set_loc: 0+0417
   DW_CFA_def_cfa_offset: 80
 
-0+0048 0+0024 0+004c FDE cie=0+0000 pc=[0-9a-f]+\.\.[0-9a-f]+
+0+0048 0+002[04] 0+004c FDE cie=0+0000 pc=[0-9a-f]+\.\.[0-9a-f]+
   DW_CFA_def_cfa_offset: 16
   DW_CFA_advance_loc: [0-9a-f]+ to [0-9a-f]+
   DW_CFA_def_cfa_offset: 24
   DW_CFA_advance_loc: [0-9a-f]+ to [0-9a-f]+
   DW_CFA_def_cfa_expression \(DW_OP_breg7 \(rsp\): 8; DW_OP_breg16 \(rip\): 0;.*
-  DW_CFA_nop
 #...
-
 [0-9a-f]+ ZERO terminator
 #pass

commit 2b5d4106a015cb50bfe8189f575a9a7a04ee9be0
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Sep 19 11:45:51 2017 +0930

    [GOLD, PowerPC] Add --no-stub-group-multi
    
    The trouble with stubs per output section is that ppc32 uses a plt
    stub as the address of a global function.  This needs to be unique,
    otherwise we'll get multiple addresses for a function.
    
    Obviously this is only a partial solution, since ppc32 will get
    multiple stubs when code is larger than 33M.  A proper fix will
    involve selecting a unique stub to use for non-branch relocs.
    
            * options.h (stub-group-multi): Default to true.  Add
            --no-stub-group-multi.
    
    (cherry picked from commit ab502e635e78a6c6c9c8abf3072bfeedaca9c26f)

diff --git a/gold/ChangeLog b/gold/ChangeLog
index cee2289a23..6071f8977a 100644
--- a/gold/ChangeLog
+++ b/gold/ChangeLog
@@ -1,3 +1,8 @@
+2017-09-19  Alan Modra  <amodra@gmail.com>
+
+	* options.h (stub-group-multi): Default to true.  Add
+	--no-stub-group-multi.
+
 2017-09-15  Nick Clifton  <nickc@redhat.com>
 
 	2.29.1 Release
diff --git a/gold/options.h b/gold/options.h
index c7c032bbd7..576b2a3c53 100644
--- a/gold/options.h
+++ b/gold/options.h
@@ -1234,9 +1234,10 @@ class General_options
 		"stubs are always after the group. 1 means use default size"),
 	     N_("SIZE"));
 
-  DEFINE_bool(stub_group_multi, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(stub_group_multi, options::TWO_DASHES, '\0', true,
 	      N_("(PowerPC only) Allow a group of stubs to serve multiple "
-		 "output sections"), NULL);
+		 "output sections"),
+	      N_("(PowerPC only) Each output section has its own stubs"));
 
   DEFINE_uint(split_stack_adjust_size, options::TWO_DASHES, '\0', 0x4000,
 	      N_("Stack size when -fsplit-stack function calls non-split"),

commit c01ee74d3ad56a25272dfd5607ce4a807223e7e5
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Sep 19 11:59:30 2017 +0930

    PR22150, ld keeps a version reference for gc'd symbols
    
    elf_gc_sweep_symbol should run after verdefs are calculated, since
    the verdef code creates symbols for the versions.  However,
    elf_gc_sweep_symbol needs to run before verrefs so as to not emit
    useless verrefs for symbols that are gc'd.
    
    I've also removed a _bfd_elf_link_renumber_dynsyms calls added by
    Maciej after I fussed about it when reviewing.  On further examination
    the call appears to be unnecessary.  Looking at renumber_dynsyms also
    made me realize that the test to exclude .gnu.version has been wrong
    since 2016-04-26 (git commit d5486c4372), so fix that too.
    
            PR 22150
            * elflink.c (bfd_elf_size_dynamic_sections): Garbage collect
            symbols before calculating verrefs.  Don't renumber dynsyms
            after gc.  Exclude .gnu.version when zero or one dynsym.
            Localize some vars and reindent.
    
    (cherry picked from commit 3d13f3e9bda5aada68915f5d958f731ae79ed41d)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 6dce8cc3a7..fac315012a 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,11 @@
+2017-09-19  Alan Modra  <amodra@gmail.com>
+
+	PR 22150
+	* elflink.c (bfd_elf_size_dynamic_sections): Garbage collect
+	symbols before calculating verrefs.  Don't renumber dynsyms
+	after gc.  Exclude .gnu.version when zero or one dynsym.
+	Localize some vars and reindent.
+
 2017-08-31  Alan Modra  <amodra@gmail.com>
 
 	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Don't exit early
diff --git a/bfd/elflink.c b/bfd/elflink.c
index e8527627a1..02713a5956 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -6000,19 +6000,18 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,
       struct elf_info_failed asvinfo;
       struct bfd_elf_version_tree *t;
       struct bfd_elf_version_expr *d;
-      struct elf_info_failed eif;
-      bfd_boolean all_defined;
       asection *s;
       size_t soname_indx;
 
-      eif.info = info;
-      eif.failed = FALSE;
-
       /* If we are supposed to export all symbols into the dynamic symbol
 	 table (this is not the normal case), then do so.  */
       if (info->export_dynamic
 	  || (bfd_link_executable (info) && info->dynamic))
 	{
+	  struct elf_info_failed eif;
+
+	  eif.info = info;
+	  eif.failed = FALSE;
 	  elf_link_hash_traverse (elf_hash_table (info),
 				  _bfd_elf_export_symbol,
 				  &eif);
@@ -6096,7 +6095,7 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,
       if (!info->allow_undefined_version)
 	{
 	  /* Check if all global versions have a definition.  */
-	  all_defined = TRUE;
+	  bfd_boolean all_defined = TRUE;
 	  for (t = info->version_info; t != NULL; t = t->next)
 	    for (d = t->globals.list; d != NULL; d = d->next)
 	      if (d->literal && !d->symver && !d->script)
@@ -6349,134 +6348,128 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,
 
 	  elf_tdata (output_bfd)->cverdefs = cdefs;
 	}
+    }
+
+  bed = get_elf_backend_data (output_bfd);
+
+  if (info->gc_sections && bed->can_gc_sections)
+    {
+      struct elf_gc_sweep_symbol_info sweep_info;
+
+      /* Remove the symbols that were in the swept sections from the
+	 dynamic symbol table.  */
+      sweep_info.info = info;
+      sweep_info.hide_symbol = bed->elf_backend_hide_symbol;
+      elf_link_hash_traverse (elf_hash_table (info), elf_gc_sweep_symbol,
+			      &sweep_info);
+    }
+
+  if (dynobj != NULL && elf_hash_table (info)->dynamic_sections_created)
+    {
+      asection *s;
+      struct elf_find_verdep_info sinfo;
 
       /* Work out the size of the version reference section.  */
 
       s = bfd_get_linker_section (dynobj, ".gnu.version_r");
       BFD_ASSERT (s != NULL);
-      {
-	struct elf_find_verdep_info sinfo;
-
-	sinfo.info = info;
-	sinfo.vers = elf_tdata (output_bfd)->cverdefs;
-	if (sinfo.vers == 0)
-	  sinfo.vers = 1;
-	sinfo.failed = FALSE;
 
-	elf_link_hash_traverse (elf_hash_table (info),
-				_bfd_elf_link_find_version_dependencies,
-				&sinfo);
-	if (sinfo.failed)
-	  return FALSE;
+      sinfo.info = info;
+      sinfo.vers = elf_tdata (output_bfd)->cverdefs;
+      if (sinfo.vers == 0)
+	sinfo.vers = 1;
+      sinfo.failed = FALSE;
 
-	if (elf_tdata (output_bfd)->verref == NULL)
-	  s->flags |= SEC_EXCLUDE;
-	else
-	  {
-	    Elf_Internal_Verneed *vn;
-	    unsigned int size;
-	    unsigned int crefs;
-	    bfd_byte *p;
-
-	    /* Build the version dependency section.  */
-	    size = 0;
-	    crefs = 0;
-	    for (vn = elf_tdata (output_bfd)->verref;
-		 vn != NULL;
-		 vn = vn->vn_nextref)
-	      {
-		Elf_Internal_Vernaux *a;
+      elf_link_hash_traverse (elf_hash_table (info),
+			      _bfd_elf_link_find_version_dependencies,
+			      &sinfo);
+      if (sinfo.failed)
+	return FALSE;
 
-		size += sizeof (Elf_External_Verneed);
-		++crefs;
-		for (a = vn->vn_auxptr; a != NULL; a = a->vna_nextptr)
-		  size += sizeof (Elf_External_Vernaux);
-	      }
+      if (elf_tdata (output_bfd)->verref == NULL)
+	s->flags |= SEC_EXCLUDE;
+      else
+	{
+	  Elf_Internal_Verneed *vn;
+	  unsigned int size;
+	  unsigned int crefs;
+	  bfd_byte *p;
 
-	    s->size = size;
-	    s->contents = (unsigned char *) bfd_alloc (output_bfd, s->size);
-	    if (s->contents == NULL)
-	      return FALSE;
+	  /* Build the version dependency section.  */
+	  size = 0;
+	  crefs = 0;
+	  for (vn = elf_tdata (output_bfd)->verref;
+	       vn != NULL;
+	       vn = vn->vn_nextref)
+	    {
+	      Elf_Internal_Vernaux *a;
 
-	    p = s->contents;
-	    for (vn = elf_tdata (output_bfd)->verref;
-		 vn != NULL;
-		 vn = vn->vn_nextref)
-	      {
-		unsigned int caux;
-		Elf_Internal_Vernaux *a;
-		size_t indx;
-
-		caux = 0;
-		for (a = vn->vn_auxptr; a != NULL; a = a->vna_nextptr)
-		  ++caux;
-
-		vn->vn_version = VER_NEED_CURRENT;
-		vn->vn_cnt = caux;
-		indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,
-					    elf_dt_name (vn->vn_bfd) != NULL
-					    ? elf_dt_name (vn->vn_bfd)
-					    : lbasename (vn->vn_bfd->filename),
-					    FALSE);
-		if (indx == (size_t) -1)
-		  return FALSE;
-		vn->vn_file = indx;
-		vn->vn_aux = sizeof (Elf_External_Verneed);
-		if (vn->vn_nextref == NULL)
-		  vn->vn_next = 0;
-		else
-		  vn->vn_next = (sizeof (Elf_External_Verneed)
-				+ caux * sizeof (Elf_External_Vernaux));
+	      size += sizeof (Elf_External_Verneed);
+	      ++crefs;
+	      for (a = vn->vn_auxptr; a != NULL; a = a->vna_nextptr)
+		size += sizeof (Elf_External_Vernaux);
+	    }
 
-		_bfd_elf_swap_verneed_out (output_bfd, vn,
-					   (Elf_External_Verneed *) p);
-		p += sizeof (Elf_External_Verneed);
+	  s->size = size;
+	  s->contents = (unsigned char *) bfd_alloc (output_bfd, s->size);
+	  if (s->contents == NULL)
+	    return FALSE;
 
-		for (a = vn->vn_auxptr; a != NULL; a = a->vna_nextptr)
-		  {
-		    a->vna_hash = bfd_elf_hash (a->vna_nodename);
-		    indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,
-						a->vna_nodename, FALSE);
-		    if (indx == (size_t) -1)
-		      return FALSE;
-		    a->vna_name = indx;
-		    if (a->vna_nextptr == NULL)
-		      a->vna_next = 0;
-		    else
-		      a->vna_next = sizeof (Elf_External_Vernaux);
+	  p = s->contents;
+	  for (vn = elf_tdata (output_bfd)->verref;
+	       vn != NULL;
+	       vn = vn->vn_nextref)
+	    {
+	      unsigned int caux;
+	      Elf_Internal_Vernaux *a;
+	      size_t indx;
 
-		    _bfd_elf_swap_vernaux_out (output_bfd, a,
-					       (Elf_External_Vernaux *) p);
-		    p += sizeof (Elf_External_Vernaux);
-		  }
-	      }
+	      caux = 0;
+	      for (a = vn->vn_auxptr; a != NULL; a = a->vna_nextptr)
+		++caux;
 
-	    elf_tdata (output_bfd)->cverrefs = crefs;
-	  }
-      }
-    }
+	      vn->vn_version = VER_NEED_CURRENT;
+	      vn->vn_cnt = caux;
+	      indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,
+					  elf_dt_name (vn->vn_bfd) != NULL
+					  ? elf_dt_name (vn->vn_bfd)
+					  : lbasename (vn->vn_bfd->filename),
+					  FALSE);
+	      if (indx == (size_t) -1)
+		return FALSE;
+	      vn->vn_file = indx;
+	      vn->vn_aux = sizeof (Elf_External_Verneed);
+	      if (vn->vn_nextref == NULL)
+		vn->vn_next = 0;
+	      else
+		vn->vn_next = (sizeof (Elf_External_Verneed)
+			       + caux * sizeof (Elf_External_Vernaux));
 
-  bed = get_elf_backend_data (output_bfd);
+	      _bfd_elf_swap_verneed_out (output_bfd, vn,
+					 (Elf_External_Verneed *) p);
+	      p += sizeof (Elf_External_Verneed);
 
-  if (info->gc_sections && bed->can_gc_sections)
-    {
-      struct elf_gc_sweep_symbol_info sweep_info;
-      unsigned long section_sym_count;
+	      for (a = vn->vn_auxptr; a != NULL; a = a->vna_nextptr)
+		{
+		  a->vna_hash = bfd_elf_hash (a->vna_nodename);
+		  indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,
+					      a->vna_nodename, FALSE);
+		  if (indx == (size_t) -1)
+		    return FALSE;
+		  a->vna_name = indx;
+		  if (a->vna_nextptr == NULL)
+		    a->vna_next = 0;
+		  else
+		    a->vna_next = sizeof (Elf_External_Vernaux);
 
-      /* Remove the symbols that were in the swept sections from the
-	 dynamic symbol table.  GCFIXME: Anyone know how to get them
-	 out of the static symbol table as well?  */
-      sweep_info.info = info;
-      sweep_info.hide_symbol = bed->elf_backend_hide_symbol;
-      elf_link_hash_traverse (elf_hash_table (info), elf_gc_sweep_symbol,
-			      &sweep_info);
+		  _bfd_elf_swap_vernaux_out (output_bfd, a,
+					     (Elf_External_Vernaux *) p);
+		  p += sizeof (Elf_External_Vernaux);
+		}
+	    }
 
-      /* We need to reassign dynsym indices now that symbols may have
-	 been removed.  See the call in `bfd_elf_size_dynsym_hash_dynstr'
-	 for the details of the conditions used here.  */
-      if (elf_hash_table (info)->dynamic_sections_created
-	  || bed->always_renumber_dynsyms)
-	_bfd_elf_link_renumber_dynsyms (output_bfd, info, &section_sym_count);
+	  elf_tdata (output_bfd)->cverrefs = crefs;
+	}
     }
 
   /* Any syms created from now on start with -1 in
@@ -6786,7 +6779,7 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,
       if ((elf_tdata (output_bfd)->cverrefs == 0
 	   && elf_tdata (output_bfd)->cverdefs == 0)
 	  || _bfd_elf_link_renumber_dynsyms (output_bfd, info,
-					     &section_sym_count) == 0)
+					     &section_sym_count) <= 1)
 	{
 	  asection *s;
 

commit 910201669dca1cb57c583e0d63d1369388a3375d
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Sep 19 13:22:49 2017 +0930

    PowerPC64 stubs don't match calculated size
    
    After the PR 21411 fix, the linker generated .eh_frame for ppc64 glink
    can be edited by the generic code.  The sequence of events goes
    something like:
    1) Some object file adds .eh_frame aligned to 8, making the output
       .eh_frame aligned to at least 8, so linker generated .eh_frame FDE
       is padded to an 8 byte boundary.
    2) All .eh_frame past the glink .eh_frame is garbage collected.
    3) Generic code detects that last FDE (the glink .eh_frame) doesn't
       need to be padded to an 8 byte boundary, reducing size from 88 to
       84.
    4) elf64-ppc.c check fails.
    
            PR 21441
            * elf64-ppc.c (ppc64_elf_build_stubs): Don't check glink_eh_frame
            size.
    
    (cherry picked from commit 25516cc573ff3551a7ac0538e1d3de5811c7199e)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index fac315012a..87b7973ec1 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,9 @@
+2017-09-19  Alan Modra  <amodra@gmail.com>
+
+	PR 21441
+	* elf64-ppc.c (ppc64_elf_build_stubs): Don't check glink_eh_frame
+	size.
+
 2017-09-19  Alan Modra  <amodra@gmail.com>
 
 	PR 22150
diff --git a/bfd/elf64-ppc.c b/bfd/elf64-ppc.c
index 3f01ae62a1..277bb0ef5d 100644
--- a/bfd/elf64-ppc.c
+++ b/bfd/elf64-ppc.c
@@ -13407,12 +13407,7 @@ ppc64_elf_build_stubs (struct bfd_link_info *info,
 	  break;
       }
 
-  /* Note that the glink_eh_frame check here is not only testing that
-     the generated size matched the calculated size but also that
-     bfd_elf_discard_info didn't make any changes to the section.  */
-  if (group != NULL
-      || (htab->glink_eh_frame != NULL
-	  && htab->glink_eh_frame->rawsize != htab->glink_eh_frame->size))
+  if (group != NULL)
     {
       htab->stub_error = TRUE;
       info->callbacks->einfo (_("%P: stubs don't match calculated size\n"));

commit 50d637ff75789d922cf523920817a631705fbfe5
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Sep 19 18:00:58 2017 +0930

    ChangeLog fixes

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 87b7973ec1..8ee7fa58ad 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -12,8 +12,8 @@
 	after gc.  Exclude .gnu.version when zero or one dynsym.
 	Localize some vars and reindent.
 
-2017-08-31  Alan Modra  <amodra@gmail.com>
-
+	Apply from master
+	2017-08-31  Alan Modra  <amodra@gmail.com>
 	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Don't exit early
 	for a section containing just a terminator.  Allow multiple
 	terminators at end of section.
@@ -21,23 +21,19 @@
 	sections when not adding alignment.  Assert on terminator in
 	the middle of FDEs.
 
-2017-08-31  Alan Modra  <amodra@gmail.com>
-
+	2017-08-31  Alan Modra  <amodra@gmail.com>
 	PR 21441
 	PR 22048
 	* elflink.c (bfd_elf_discard_info): Don't pad embedded zero
 	terminators.
 
-2017-08-14  Alan Modra  <amodra@gmail.com>
-
+	2017-08-14  Alan Modra  <amodra@gmail.com>
 	PR 21441
 	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Don't add
 	alignment padding here.
 	* elflink.c (bfd_elf_discard_info): Add .eh_frame padding here
 	in a reverse pass over sections.
 
-2017-09-04  Nick Clifton  <nickc@redhat.com>
-
 2017-09-18  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/22148

commit 8161f998b6c3b3d4720e8a4438cfefa67fd23a33
Author: Nick Clifton <nickc@redhat.com>
Date:   Tue Sep 19 14:59:01 2017 +0100

    Import xtensa patches from the mainline sources to fix name lookup and sorting.
    
            * xtensa-isa.c (xtensa_isa_init): Don't update lookup table
            entries for sysregs with negative indices.
    
            * emultempl/xtensaelf.em (xtensa_wild_group_interleave_callback):
            Only check for by_name sorting.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 8ee7fa58ad..f699b2ffc6 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,18 @@
+2017-09-19  Nick Clifton  <nickc@redhat.com>
+
+	2.29.1 Release
+
+	* version.m4: Bump version to 2.29.1
+	* configure: Regenerate.
+	* po/bfd.pot: Regenerate.
+
+2017-09-19  Nick Clifton  <nickc@redhat.com>
+
+	Import from maiknline:
+
+	* xtensa-isa.c (xtensa_isa_init): Don't update lookup table
+	entries for sysregs with negative indices.
+
 2017-09-19  Alan Modra  <amodra@gmail.com>
 
 	PR 21441
@@ -41,14 +56,6 @@
 	return from bfd_canonicalize_dynamic_reloc.
 	* elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
 
-2017-09-15  Nick Clifton  <nickc@redhat.com>
-
-	2.29.1 Release
-
-	* version.m4: Bump version to 2.29.1
-	* configure: Regenerate.
-	* po/bfd.pot: Regenerate.
-
 2017-09-14  Nick Clifton  <nickc@redhat.com>
 
 	Import from mainline:
diff --git a/bfd/xtensa-isa.c b/bfd/xtensa-isa.c
index 8da75bea81..5656062646 100644
--- a/bfd/xtensa-isa.c
+++ b/bfd/xtensa-isa.c
@@ -292,7 +292,8 @@ xtensa_isa_init (xtensa_isa_status *errno_p, char **error_msg_p)
       xtensa_sysreg_internal *sreg = &isa->sysregs[n];
       is_user = sreg->is_user;
 
-      isa->sysreg_table[is_user][sreg->number] = n;
+      if (sreg->number >= 0)
+	isa->sysreg_table[is_user][sreg->number] = n;
     }
 
   /* Set up the interface lookup table.  */
@@ -1790,4 +1791,3 @@ xtensa_funcUnit_num_copies (xtensa_isa isa, xtensa_funcUnit fun)
   CHECK_FUNCUNIT (intisa, fun, XTENSA_UNDEFINED);
   return intisa->funcUnits[fun].num_copies;
 }
-
diff --git a/ld/ChangeLog b/ld/ChangeLog
index 65641fc5d6..058755e475 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,3 +1,18 @@
+2017-09-19  Nick Clifton  <nickc@redhat.com>
+
+	2.29.1 Release
+
+	* configure: Regenerate.
+	* po/ld.pot: Regenerate.
+
+2017-09-19  Nick Clifton  <nickc@redhat.com>
+
+	Import from mainline:
+
+	* emultempl/xtensaelf.em (xtensa_wild_group_interleave_callback):
+	Only check for by_name sorting.
+
+
 2017-08-31  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-elf/eh3.d: Update.
@@ -17,13 +32,6 @@
 	* testsuite/ld-x86-64/tls.exp: Require GCC 5 or above for
 	"tlsdesc1" and "tlsdesc1 with PIE" tests.
 
-2017-09-15  Nick Clifton  <nickc@redhat.com>
-
-	2.29.1 Release
-
-	* configure: Regenerate.
-	* po/ld.pot: Regenerate.
-
 2017-08-21  Hans-Peter Nilsson  <hp@bitrange.com>
 
 	Import from mainline:
diff --git a/ld/emultempl/xtensaelf.em b/ld/emultempl/xtensaelf.em
index 1447d526a2..3827d91b62 100644
--- a/ld/emultempl/xtensaelf.em
+++ b/ld/emultempl/xtensaelf.em
@@ -1432,7 +1432,7 @@ xtensa_wild_group_interleave_callback (lang_statement_union_type *statement)
 	  struct wildcard_list *l;
 	  for (l = w->section_list; l != NULL; l = l->next)
 	    {
-	      if (l->spec.sorted != none)
+	      if (l->spec.sorted == by_name)
 		{
 		  no_reorder = TRUE;
 		  break;

commit d1a6e7195b9bb0255fa77588985b969ad8aaacf5
Author: Nick Clifton <nickc@redhat.com>
Date:   Tue Sep 19 15:18:16 2017 +0100

    Fix spelling ypos in changelog entries

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index f699b2ffc6..417ed273ab 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -8,7 +8,7 @@
 
 2017-09-19  Nick Clifton  <nickc@redhat.com>
 
-	Import from maiknline:
+	Import from mainline:
 
 	* xtensa-isa.c (xtensa_isa_init): Don't update lookup table
 	entries for sysregs with negative indices.
diff --git a/ld/ChangeLog b/ld/ChangeLog
index 058755e475..73e05b618e 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -12,7 +12,6 @@
 	* emultempl/xtensaelf.em (xtensa_wild_group_interleave_callback):
 	Only check for by_name sorting.
 
-
 2017-08-31  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-elf/eh3.d: Update.

commit f625a739e567f0110b2675539b7a0e5d5f67c5dc
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Wed Sep 20 00:01:22 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 3405e424f4..955269f804 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170919
+#define BFD_VERSION_DATE 20170920
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit 437ea1e4871b36e879ff8dcc821b04411e03e600
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Sep 20 09:17:56 2017 +0930

    [GOLD] PowerPC function address in non-PIC
    
    ppc32, like many targets, defines the address of a function as the PLT
    call stub code for functions referenced but not defined in a non-PIC
    executable.  ppc32 gold, unlike other targets, inherits the ppc64
    multiple stub capability for dealing with very large binaries where
    one set of stubs can't be reached from all code locations.  This means
    there can be multiple choices of address for a function, which might
    cause function pointer comparison failures.  So for ppc32, make
    non-branch references always use the first stub group.
    
    (PowerPC64 ELFv1 is always PIC so doesn't need to define the address
    of an external function as the PLT stub.  PowerPC64 ELFv2 needs a
    special set of global entry stubs to serve as the address of external
    functions, so it too is not affected by this bug.)
    
            * powerpc.cc (Target_powerpc::Branch_info::make_stub): Put
            stubs for ppc32 non-branch relocs in first stub table.
            (Target_powerpc::Relocate::relocate): Resolve similarly.
    
    (cherry picked from commit 64b5d6d785eb4c337b7c071ab9607186541a8b14)

diff --git a/gold/ChangeLog b/gold/ChangeLog
index 6071f8977a..795837b64a 100644
--- a/gold/ChangeLog
+++ b/gold/ChangeLog
@@ -1,3 +1,9 @@
+2017-09-20  Alan Modra  <amodra@gmail.com>
+
+	* powerpc.cc (Target_powerpc::Branch_info::make_stub): Put
+	stubs for ppc32 non-branch relocs in first stub table.
+	(Target_powerpc::Relocate::relocate): Resolve similarly.
+
 2017-09-19  Alan Modra  <amodra@gmail.com>
 
 	* options.h (stub-group-multi): Default to true.  Add
diff --git a/gold/powerpc.cc b/gold/powerpc.cc
index 629da4f8a1..ba20ef1ad7 100644
--- a/gold/powerpc.cc
+++ b/gold/powerpc.cc
@@ -3065,11 +3065,17 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(
 	target->glink_section()->add_global_entry(gsym);
       else
 	{
-	  if (stub_table == NULL)
+	  if (stub_table == NULL
+	      && !(size == 32
+		   && gsym != NULL
+		   && !parameters->options().output_is_position_independent()
+		   && !is_branch_reloc(this->r_type_)))
 	    stub_table = this->object_->stub_table(this->shndx_);
 	  if (stub_table == NULL)
 	    {
-	      // This is a ref from a data section to an ifunc symbol.
+	      // This is a ref from a data section to an ifunc symbol,
+	      // or a non-branch reloc for which we always want to use
+	      // one set of stubs for resolving function addresses.
 	      stub_table = ifunc_stub_table;
 	    }
 	  gold_assert(stub_table != NULL);
@@ -8052,11 +8058,20 @@ Target_powerpc<size, big_endian>::Relocate::relocate(
 	}
       else
 	{
-	  Stub_table<size, big_endian>* stub_table
-	    = object->stub_table(relinfo->data_shndx);
+	  Stub_table<size, big_endian>* stub_table = NULL;
+	  if (target->stub_tables().size() == 1)
+	    stub_table = target->stub_tables()[0];
+	  if (stub_table == NULL
+	      && !(size == 32
+		   && gsym != NULL
+		   && !parameters->options().output_is_position_independent()
+		   && !is_branch_reloc(r_type)))
+	    stub_table = object->stub_table(relinfo->data_shndx);
 	  if (stub_table == NULL)
 	    {
-	      // This is a ref from a data section to an ifunc symbol.
+	      // This is a ref from a data section to an ifunc symbol,
+	      // or a non-branch reloc for which we always want to use
+	      // one set of stubs for resolving function addresses.
 	      if (target->stub_tables().size() != 0)
 		stub_table = target->stub_tables()[0];
 	    }

commit db39886ddfef07d6518fefa6bb5fd4ba60344c75
Author: Nick Clifton <nickc@redhat.com>
Date:   Wed Sep 20 09:45:15 2017 +0100

    Set the development flag to false on the 2.29 branch.
    
            * development.sh (development): Set to false.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 417ed273ab..dfb6351782 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,7 @@
+2017-09-20  Nick Clifton  <nickc@redhat.com>
+
+	* development.sh (development): Set to false.
+
 2017-09-19  Nick Clifton  <nickc@redhat.com>
 
 	2.29.1 Release
diff --git a/bfd/development.sh b/bfd/development.sh
index cd31410a8e..b001a888ea 100644
--- a/bfd/development.sh
+++ b/bfd/development.sh
@@ -16,4 +16,4 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # Controls whether to enable development-mode features by default.
-development=true
+development=false

commit 13d7031e342b76e68dff74120a8f2a4c4e70a142
Author: James Clarke <jrtc27@jrtc27.com>
Date:   Thu Aug 3 22:44:21 2017 -0700

    Add --no-relax option.
    
    gold/
            * options.h (General_options): Set a non-NULL second help string
            argument for relax to allow --no-relax.

diff --git a/gold/ChangeLog b/gold/ChangeLog
index 795837b64a..0fc54ddf71 100644
--- a/gold/ChangeLog
+++ b/gold/ChangeLog
@@ -1,3 +1,8 @@
+2017-08-03  James Clarke  <jrtc27@jrtc27.com>
+
+	* options.h (General_options): Set a non-NULL second help string
+	argument for relax to allow --no-relax.
+
 2017-09-20  Alan Modra  <amodra@gmail.com>
 
 	* powerpc.cc (Target_powerpc::Branch_info::make_stub): Put
diff --git a/gold/options.h b/gold/options.h
index 576b2a3c53..4a802cf41f 100644
--- a/gold/options.h
+++ b/gold/options.h
@@ -1164,7 +1164,8 @@ class General_options
 	      N_("Generate relocatable output"), NULL);
 
   DEFINE_bool(relax, options::TWO_DASHES, '\0', false,
-	      N_("Relax branches on certain targets"), NULL);
+	      N_("Relax branches on certain targets"),
+	      N_("Do not relax branches"));
 
   DEFINE_string(retain_symbols_file, options::TWO_DASHES, '\0', NULL,
 		N_("keep only symbols listed in this file"), N_("FILE"));

commit f7eeee64408f23a56338f4ae71178e6240480830
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Thu Sep 21 00:01:23 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 955269f804..2d17561457 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170920
+#define BFD_VERSION_DATE 20170921
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit 2fa45014f1860048a62f1ad7cc65bcbc0c2c0cf8
Author: Nick Clifton <nickc@redhat.com>
Date:   Thu Sep 21 15:17:28 2017 +0100

    Re Revert previous change to bfd/development.sh, setting the development flag back to true.
    
    This flag should only be set in release tarballs, not on branches,
    as branches will continue to receive development updates.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index dfb6351782..42d1e51dfd 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,7 @@
+2017-09-21  Nick Clifton  <nickc@redhat.com>
+
+	* development.sh (development): Revert previous delta.
+
 2017-09-20  Nick Clifton  <nickc@redhat.com>
 
 	* development.sh (development): Set to false.
diff --git a/bfd/development.sh b/bfd/development.sh
index b001a888ea..cd31410a8e 100644
--- a/bfd/development.sh
+++ b/bfd/development.sh
@@ -16,4 +16,4 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # Controls whether to enable development-mode features by default.
-development=false
+development=true

commit 36e7aab5a1bad04694a9b06187b5127b75c9bcd0
Author: Maciej W. Rozycki <macro@imgtec.com>
Date:   Fri Sep 22 00:54:19 2017 +0100

    readelf: Handle E_MIPS_MACH_5900
    
    Fix commit e407c74b5b60 ("Support for MIPS R5900 (Sony Playstation 2)"),
    <https://sourceware.org/ml/binutils/2012-12/msg00240.html>, and add the
    handling of E_MIPS_MACH_5900, correctly showing `5900' among `Flags:' in
    the output of `-h' rather than `unknown CPU'.
    
            binutils/
            * readelf.c (get_machine_flags) <E_MIPS_MACH_5900>: New case.
    
            gas/
            * testsuite/gas/mips/elf_mach_5900.d: New test.
            * testsuite/gas/mips/mips.exp: Run it.
    
    (cherry picked from commit ef272caa7482bd9031e82a2e6f1b81870fe2129e)

diff --git a/binutils/ChangeLog b/binutils/ChangeLog
index 84d3d7c1c4..ffb34fbb78 100644
--- a/binutils/ChangeLog
+++ b/binutils/ChangeLog
@@ -1,3 +1,7 @@
+2017-09-21  Maciej W. Rozycki  <macro@imgtec.com>
+
+	* readelf.c (get_machine_flags) <E_MIPS_MACH_5900>: New case.
+
 2017-09-15  Nick Clifton  <nickc@redhat.com>
 
 	2.29.1 Release
diff --git a/binutils/readelf.c b/binutils/readelf.c
index fb16df8e2a..41f128ed23 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -3325,6 +3325,7 @@ get_machine_flags (unsigned e_flags, unsigned e_machine)
 	    case E_MIPS_MACH_4650: strcat (buf, ", 4650"); break;
 	    case E_MIPS_MACH_5400: strcat (buf, ", 5400"); break;
 	    case E_MIPS_MACH_5500: strcat (buf, ", 5500"); break;
+	    case E_MIPS_MACH_5900: strcat (buf, ", 5900"); break;
 	    case E_MIPS_MACH_SB1:  strcat (buf, ", sb1");  break;
 	    case E_MIPS_MACH_9000: strcat (buf, ", 9000"); break;
   	    case E_MIPS_MACH_LS2E: strcat (buf, ", loongson-2e"); break;
diff --git a/gas/ChangeLog b/gas/ChangeLog
index 42a676f598..9aa3dbca3a 100644
--- a/gas/ChangeLog
+++ b/gas/ChangeLog
@@ -1,3 +1,8 @@
+2017-09-21  Maciej W. Rozycki  <macro@imgtec.com>
+
+	* testsuite/gas/mips/elf_mach_5900.d: New test.
+	* testsuite/gas/mips/mips.exp: Run it.
+
 2017-09-15  Nick Clifton  <nickc@redhat.com>
 
 	2.29.1 Release
diff --git a/gas/testsuite/gas/mips/elf_mach_5900.d b/gas/testsuite/gas/mips/elf_mach_5900.d
new file mode 100644
index 0000000000..1df668e7e5
--- /dev/null
+++ b/gas/testsuite/gas/mips/elf_mach_5900.d
@@ -0,0 +1,22 @@
+#readelf: -Ah
+#name: ELF R5900 markings
+#as: -32 -march=r5900
+#source: empty.s
+
+ELF Header:
+#...
+  Flags: +0x..92...., .*5900.*
+#...
+
+MIPS ABI Flags Version: 0
+
+ISA: MIPS3
+GPR size: 32
+CPR1 size: 32
+CPR2 size: 0
+FP ABI: .*
+ISA Extension: Toshiba R5900
+ASEs:
+	None
+FLAGS 1: .*
+FLAGS 2: .*
diff --git a/gas/testsuite/gas/mips/mips.exp b/gas/testsuite/gas/mips/mips.exp
index c71dca4351..25221ae2af 100644
--- a/gas/testsuite/gas/mips/mips.exp
+++ b/gas/testsuite/gas/mips/mips.exp
@@ -1149,6 +1149,7 @@ if { [istarget mips*-*-vxworks*] } {
     run_dump_test "elf_ase_micromips-2"
 
     # Verify that machine markings are handled properly.
+    run_dump_test "elf_mach_5900"
     run_dump_test "elf_mach_interaptiv-mr2"
 
     run_dump_test "mips-gp32-fp32-pic"

commit ea2fdc5952e26719a31c6dc9f4e641b656a16c28
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Fri Sep 22 00:01:21 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 2d17561457..9e389e9038 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170921
+#define BFD_VERSION_DATE 20170922
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit e70c19e3a4c26e9c1ebf0c9170d105039b56d7cf
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri Sep 22 07:25:16 2017 -0700

    x86: Return -1 if bfd_canonicalize_dynamic_reloc returns 0
    
    Stop if bfd_canonicalize_dynamic_reloc returns 0.
    
            PR binutils/22163
            * elf32-i386.c (elf_i386_get_synthetic_symtab): Also return -1
            if bfd_canonicalize_dynamic_reloc returns 0.
            * elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
    
    (cherry picked from commit b69e9267d15a09ce3f3d4599eae2952dfc6df502)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 42d1e51dfd..31e2a7f9c6 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,10 @@
+2017-09-22  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR binutils/22163
+	* elf32-i386.c (elf_i386_get_synthetic_symtab): Also return -1
+	if bfd_canonicalize_dynamic_reloc returns 0.
+	* elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
+
 2017-09-21  Nick Clifton  <nickc@redhat.com>
 
 	* development.sh (development): Revert previous delta.
diff --git a/bfd/elf32-i386.c b/bfd/elf32-i386.c
index 5c1c3ff790..9dc2d25863 100644
--- a/bfd/elf32-i386.c
+++ b/bfd/elf32-i386.c
@@ -6342,7 +6342,7 @@ elf_i386_get_synthetic_symtab (bfd *abfd,
 
   dynrelcount = bfd_canonicalize_dynamic_reloc (abfd, dynrelbuf,
 						dynsyms);
-  if (dynrelcount < 0)
+  if (dynrelcount <= 0)
     return -1;
 
   /* Sort the relocs by address.  */
diff --git a/bfd/elf64-x86-64.c b/bfd/elf64-x86-64.c
index 80dd791d25..558db98c4a 100644
--- a/bfd/elf64-x86-64.c
+++ b/bfd/elf64-x86-64.c
@@ -6717,7 +6717,7 @@ elf_x86_64_get_synthetic_symtab (bfd *abfd,
 
   dynrelcount = bfd_canonicalize_dynamic_reloc (abfd, dynrelbuf,
 						dynsyms);
-  if (dynrelcount < 0)
+  if (dynrelcount <= 0)
     return -1;
 
   /* Sort the relocs by address.  */

commit 56933f9e3e90eebf1018ed7417d6c1184b91db6b
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri Sep 22 14:15:40 2017 -0700

    x86: Guard against corrupted PLT
    
    There should be only one entry in PLT for a given symbol.  Set howto to
    NULL after processing a PLT entry to guard against corrupted PLT so that
    the duplicated PLT entries are skipped.
    
            PR binutils/22170
             * elf32-i386.c (elf_i386_get_synthetic_symtab): Guard against
             corrupted PLT.
             * elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
    
    (cherry picked from commit 61e3bf5f83f7e505b6bc51ef65426e5b31e6e360)

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 31e2a7f9c6..7091d7543f 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,10 @@
+2017-09-22  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR binutils/22170
+	* elf32-i386.c (elf_i386_get_synthetic_symtab): Guard against
+	corrupted PLT.
+	* elf64-x86-64.c (elf_x86_64_get_synthetic_symtab): Likewise.
+
 2017-09-22  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR binutils/22163
diff --git a/bfd/elf32-i386.c b/bfd/elf32-i386.c
index 9dc2d25863..ba50c93f33 100644
--- a/bfd/elf32-i386.c
+++ b/bfd/elf32-i386.c
@@ -6616,6 +6616,10 @@ bad_return:
 		  size += sizeof ("+0x") - 1 + 8;
 		n++;
 		s++;
+		/* There should be only one entry in PLT for a given
+		   symbol.  Set howto to NULL after processing a PLT
+		   entry to guard against corrupted PLT.  */
+		p->howto = NULL;
 	      }
 	    offset += plt_entry_size;
 	  }
diff --git a/bfd/elf64-x86-64.c b/bfd/elf64-x86-64.c
index 558db98c4a..d9225adddd 100644
--- a/bfd/elf64-x86-64.c
+++ b/bfd/elf64-x86-64.c
@@ -6970,6 +6970,10 @@ bad_return:
 		  size += sizeof ("+0x") - 1 + 8 + 8 * ABI_64_P (abfd);
 		n++;
 		s++;
+		/* There should be only one entry in PLT for a given
+		   symbol.  Set howto to NULL after processing a PLT
+		   entry to guard against corrupted PLT.  */
+		p->howto = NULL;
 	      }
 	    offset += plt_entry_size;
 	  }

commit 25aad9cca7232a36abeba318f21e8d19137ea15f
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Sat Sep 23 00:01:24 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 9e389e9038..11151288b8 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170922
+#define BFD_VERSION_DATE 20170923
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit 132935fc414251ac83f3f5560f7d3948851aaade
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Sun Sep 24 00:01:36 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 11151288b8..3d5f6caa3e 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170923
+#define BFD_VERSION_DATE 20170924
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@

commit cfab53c4950a84653ae1886175a4c524ad1c4951
Author: GDB Administrator <gdbadmin@sourceware.org>
Date:   Mon Sep 25 00:01:32 2017 +0000

    Automatic date update in version.in

diff --git a/bfd/version.h b/bfd/version.h
index 3d5f6caa3e..1e6c0afd82 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20170924
+#define BFD_VERSION_DATE 20170925
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@
