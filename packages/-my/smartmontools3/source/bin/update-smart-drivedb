#!/bin/sh
#
# smartmontools drive database update script
#
# Copyright (C) 2010-13 Christian Franke <smartmontools-support@lists.sourceforge.net>
# Modified for OpenElec by Peter Smorada (smoradap@gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# You should have received a copy of the GNU General Public License
# (for example COPYING); If not, see <http://www.gnu.org/licenses/>.
#
#

set -e

VERSION="6.2"
datadir="/storage/.kodi/userdata/addon_data/plugin.program.smartmontools"
drivedbdir="$datadir"

# drivedb.h update branch
BRANCH="RELEASE_6_2_DRIVEDB"

# Default drivedb location
DEST="$drivedbdir/drivedb.h"
defalutdriverdb="/storage/.kodi/addons/plugin.program.smartmontools/resources/default/drivedb.h"

# Smartctl used for syntax check
SMARTCTL="/storage/.kodi/addons/plugin.program.smartmontools/bin/smartctl"

# Download URL for sourceforge code browser
SRCEXPR='http://sourceforge.net/p/smartmontools/code/HEAD/tree/$location/smartmontools/drivedb.h?format=raw'

# check if driverdb.h exists in data location if not copy deafault addon driverdb.h
if [ ! -f $DEST ]; then
  cp $defalutdriverdb $DEST
fi

# Parse options
q="-q "
case "$1" in
  -v) q=; shift ;;
esac

case "$*" in
  -*|*\ *)
    cat <<EOF
smartmontools $VERSION drive database update script

Usage: $0 [-v] [DESTFILE]

  -v    verbose output

Updates $DEST
or DESTFILE from smartmontools SVN repository.
Tries to download first from branch $BRANCH
and then from trunk.
EOF
    exit 1
    ;;

  "") ;;
  *)  DEST="$1" ;;
esac

DOWNLOAD="wget $q"'-O "$DEST.new" "$SRC"'

# Try possible branch first, then trunk
for location in "branches/$BRANCH" "trunk"; do
  test -n "$q" || echo "Download from $location"

  errmsg=
  rm -f "$DEST.new"
  SRC="`eval echo "$SRCEXPR"`"

  if (eval $DOWNLOAD 2> /dev/null); then :; else
    errmsg="download from $location failed (HTTP error)"
    continue
  fi
  if grep -i '<title>.*Error has Occurred' "$DEST.new" >/dev/null; then
    errmsg="download from $location failed (SF code browser error)"
    continue
  fi

  break
done

if [ -n "$errmsg" ]; then
  rm -f "$DEST.new"
  echo "$0: $errmsg" >&2
  exit 1
fi

# Adjust timestamp and permissions
touch "$DEST.new"
chmod 0644 "$DEST.new"

# Check syntax
rm -f "$DEST.error"
if $SMARTCTL -B "$DEST.new" -P showall >/dev/null; then :; else
  mv "$DEST.new" "$DEST.error"
  echo "$DEST.error: rejected by $SMARTCTL, probably no longer compatible" >&2
  exit 1
fi

# Keep old file if identical
rm -f "$DEST.lastcheck"
if [ -f "$DEST" ]; then
  checksumdest=$(md5sum $DEST | cut -d " " -f 1)
  checksumdestnew=$(md5sum $DEST.new | cut -d " " -f 1) 
  test -n "$q" || echo "Files hash: $checksumdest and $checksumdestnew" 

  if [ "$checksumdest" == "$checksumdestnew" ]; then
    rm -f "$DEST.new"
    touch "$DEST.lastcheck"
    echo "$DEST is already up to date"
    exit 0
  fi
  mv "$DEST" "$DEST.old"
fi

mv "$DEST.new" "$DEST"

echo "$DEST updated from $location"

