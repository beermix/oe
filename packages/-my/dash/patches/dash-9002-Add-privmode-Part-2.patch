Description: Implement privmode, part 2
Author: Harald van Dijk <harald@gigawatt.nl>
Origin: http://article.gmane.org/gmane.comp.security.oss.general/10972

diff -Naurp dash-0.5.7.ori/src/dash.1 dash-0.5.7/src/dash.1
--- dash-0.5.7.ori/src/dash.1	2015-06-03 10:58:56.484258181 -0400
+++ dash-0.5.7/src/dash.1	2015-06-03 11:04:25.536403598 -0400
@@ -257,7 +257,7 @@ if it has been set).
 .It Fl b Em notify
 Enable asynchronous notification of background job completion.
 (UNIMPLEMENTED for 4.4alpha)
-.It Fl p Em nopriv
+.It Fl p Em priv
 Do not attempt to reset effective uid if it does not match uid. This is not set
 by default to help avoid incorrect usage by setuid root programs via system(3) or
 popen(3).
diff -Naurp dash-0.5.7.ori/src/main.c dash-0.5.7/src/main.c
--- dash-0.5.7.ori/src/main.c	2015-06-03 10:58:56.484258181 -0400
+++ dash-0.5.7/src/main.c	2015-06-03 11:04:53.768766219 -0400
@@ -50,6 +50,7 @@
 #include "eval.h"
 #include "jobs.h"
 #include "input.h"
+#include "priv.h"
 #include "trap.h"
 #include "var.h"
 #include "show.h"
@@ -97,8 +98,6 @@ main(int argc, char **argv)
 	struct jmploc jmploc;
 	struct stackmark smark;
 	int login;
-	uid_t uid;
-	gid_t gid;
 
 #ifdef __GLIBC__
 	dash_errno = __errno_location();
@@ -154,17 +153,6 @@ main(int argc, char **argv)
 	setstackmark(&smark);
 	login = procargs(argc, argv);
 
-	/*
-	 * To limit bogus system(3) or popen(3) calls in setuid binaries, require
-	 * -p flag to work in this situation.
-	 */
-	if (!pflag && (uid != geteuid() || gid != getegid())) {
-		setuid(uid);
-		setgid(gid);
-		/* PS1 might need to be changed accordingly. */
-		choose_ps1();
-	}
-
 	if (login) {
 		state = 1;
 		read_profile("/etc/profile");
diff -Naurp dash-0.5.7.ori/src/Makefile.am dash-0.5.7/src/Makefile.am
--- dash-0.5.7.ori/src/Makefile.am	2011-07-07 04:40:16.000000000 -0400
+++ dash-0.5.7/src/Makefile.am	2015-06-03 11:04:08.732187655 -0400
@@ -21,14 +21,14 @@ bin_PROGRAMS = dash
 dash_CFILES = \
 	alias.c arith_yacc.c arith_yylex.c cd.c error.c eval.c exec.c expand.c \
 	histedit.c input.c jobs.c mail.c main.c memalloc.c miscbltin.c \
-	mystring.c options.c parser.c redir.c show.c trap.c output.c \
+	mystring.c options.c parser.c priv.c redir.c show.c trap.c output.c \
 	bltin/printf.c system.c bltin/test.c bltin/times.c var.c
 dash_SOURCES = \
 	$(dash_CFILES) \
 	alias.h arith_yacc.h bltin/bltin.h cd.h error.h eval.h exec.h \
 	expand.h hetio.h \
 	init.h input.h jobs.h machdep.h mail.h main.h memalloc.h miscbltin.h \
-	myhistedit.h mystring.h options.h output.h parser.h redir.h shell.h \
+	myhistedit.h mystring.h options.h output.h parser.h priv.h redir.h shell.h \
 	show.h system.h trap.h var.h
 dash_LDADD = builtins.o init.o nodes.o signames.o syntax.o
 
diff -Naurp dash-0.5.7.ori/src/Makefile.in dash-0.5.7/src/Makefile.in
--- dash-0.5.7.ori/src/Makefile.in	2011-07-08 05:00:39.000000000 -0400
+++ dash-0.5.7/src/Makefile.in	2015-06-03 11:23:57.327355934 -0400
@@ -50,7 +50,7 @@ am__objects_1 = alias.$(OBJEXT) arith_ya
 	histedit.$(OBJEXT) input.$(OBJEXT) jobs.$(OBJEXT) \
 	mail.$(OBJEXT) main.$(OBJEXT) memalloc.$(OBJEXT) \
 	miscbltin.$(OBJEXT) mystring.$(OBJEXT) options.$(OBJEXT) \
-	parser.$(OBJEXT) redir.$(OBJEXT) show.$(OBJEXT) trap.$(OBJEXT) \
+	parser.$(OBJEXT) priv.$(OBJEXT) redir.$(OBJEXT) show.$(OBJEXT) trap.$(OBJEXT) \
 	output.$(OBJEXT) printf.$(OBJEXT) system.$(OBJEXT) \
 	test.$(OBJEXT) times.$(OBJEXT) var.$(OBJEXT)
 am_dash_OBJECTS = $(am__objects_1)
@@ -179,7 +179,7 @@ COMPILE_FOR_BUILD = \
 dash_CFILES = \
 	alias.c arith_yacc.c arith_yylex.c cd.c error.c eval.c exec.c expand.c \
 	histedit.c input.c jobs.c mail.c main.c memalloc.c miscbltin.c \
-	mystring.c options.c parser.c redir.c show.c trap.c output.c \
+	mystring.c options.c parser.c priv.c redir.c show.c trap.c output.c \
 	bltin/printf.c system.c bltin/test.c bltin/times.c var.c
 
 dash_SOURCES = \
@@ -187,7 +187,7 @@ dash_SOURCES = \
 	alias.h arith_yacc.h bltin/bltin.h cd.h error.h eval.h exec.h \
 	expand.h hetio.h \
 	init.h input.h jobs.h machdep.h mail.h main.h memalloc.h miscbltin.h \
-	myhistedit.h mystring.h options.h output.h parser.h redir.h shell.h \
+	myhistedit.h mystring.h options.h output.h parser.h priv.h redir.h shell.h \
 	show.h system.h trap.h var.h
 
 dash_LDADD = builtins.o init.o nodes.o signames.o syntax.o
@@ -289,6 +289,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/options.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/output.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parser.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/priv.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/printf.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/redir.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/show.Po@am__quote@
diff -Naurp dash-0.5.7.ori/src/options.c dash-0.5.7/src/options.c
--- dash-0.5.7.ori/src/options.c	2015-06-03 10:58:56.484258181 -0400
+++ dash-0.5.7/src/options.c	2015-06-03 11:05:33.085270835 -0400
@@ -45,6 +45,7 @@
 #include "jobs.h"
 #include "input.h"
 #include "output.h"
+#include "priv.h"
 #include "trap.h"
 #include "var.h"
 #include "memalloc.h"
@@ -79,7 +80,7 @@ static const char *const optnames[NOPTS]
 	"allexport",
 	"notify",
 	"nounset",
-	"nopriv",
+	"priv",
 	"nolog",
 	"debug",
 };
@@ -184,6 +185,7 @@ optschanged(void)
 #ifdef DEBUG
 	opentrace();
 #endif
+	setprivileged(pflag);
 	setinteractive(iflag);
 #ifndef SMALL
 	histedit();
diff -Naurp dash-0.5.7.ori/src/priv.c dash-0.5.7/src/priv.c
--- dash-0.5.7.ori/src/priv.c	1969-12-31 19:00:00.000000000 -0500
+++ dash-0.5.7/src/priv.c	2015-06-03 11:00:31.097386153 -0400
@@ -0,0 +1,27 @@
+#include <unistd.h>
+
+#include "priv.h"
+#include "var.h"
+
+uid_t uid;
+gid_t gid;
+
+void setprivileged(int on)
+{
+	static int is_privileged = 1;
+	if (is_privileged == on)
+		return;
+
+	is_privileged = on;
+
+	/*
+	 * To limit bogus system(3) or popen(3) calls in setuid binaries, require
+	 * -p flag to work in this situation.
+	 */
+	if (!on && (uid != geteuid() || gid != getegid())) {
+		setuid(uid);
+		setgid(gid);
+		/* PS1 might need to be changed accordingly. */
+		choose_ps1();
+	}
+}
diff -Naurp dash-0.5.7.ori/src/priv.h dash-0.5.7/src/priv.h
--- dash-0.5.7.ori/src/priv.h	1969-12-31 19:00:00.000000000 -0500
+++ dash-0.5.7/src/priv.h	2015-06-03 11:00:31.097386153 -0400
@@ -0,0 +1,6 @@
+#include <unistd.h>
+
+extern uid_t uid;
+extern gid_t gid;
+
+void setprivileged(int on);
diff -Naurp dash-0.5.7.ori/src/var.c dash-0.5.7/src/var.c
--- dash-0.5.7.ori/src/var.c	2015-06-03 10:59:40.252780225 -0400
+++ dash-0.5.7/src/var.c	2015-06-03 11:05:50.373492587 -0400
@@ -185,9 +185,6 @@ initvar(void)
 void
 choose_ps1(void)
 {
-	if (vps1.flags & VEXPORT)
-		return;
-
 	if (!geteuid()) {
 		vps1.text = rootps1;
 	} else {
