diff -ur M2Crypto/M2Crypto/__init__.py M2Crypto-0.21.1/M2Crypto/__init__.py
--- M2Crypto/M2Crypto/__init__.py	2011-01-15 20:10:05.000000000 +0100
+++ M2Crypto-0.21.1/M2Crypto/__init__.py	2015-07-11 04:41:27.547246950 +0200
@@ -19,7 +19,7 @@
 version_info = (0, 21, 1)
 version = '.'.join([str(_v) for _v in version_info])
 
-import __m2crypto
+import _m2crypto
 import m2
 import ASN1
 import AuthCookie
@@ -57,4 +57,4 @@
 encrypt=1
 decrypt=0
 
-__m2crypto.lib_init()
+_m2crypto.lib_init()
diff -ur M2Crypto/M2Crypto/m2.py M2Crypto-0.21.1/M2Crypto/m2.py
--- M2Crypto/M2Crypto/m2.py	2011-01-15 20:10:05.000000000 +0100
+++ M2Crypto-0.21.1/M2Crypto/m2.py	2015-07-11 04:41:27.547246950 +0200
@@ -25,7 +25,7 @@
 Copyright (C) 2004 OSAF. All Rights Reserved.
 """
 
-from __m2crypto import *
+from _m2crypto import *
 lib_init()
 
 
diff -ur M2Crypto/setup.py M2Crypto-0.21.1/setup.py
--- M2Crypto/setup.py	2011-01-15 20:10:06.000000000 +0100
+++ M2Crypto-0.21.1/setup.py	2015-07-11 04:41:27.547246950 +0200
@@ -20,6 +20,7 @@
     from distutils.command import build_ext
 
 from distutils.core import Extension
+from distutils.file_util import copy_file
 
 
 class _M2CryptoBuildExt(build_ext.build_ext):
@@ -57,7 +58,17 @@
         self.swig_opts.append('-includeall')
         #self.swig_opts.append('-D__i386__') # Uncomment for early OpenSSL 0.9.7 versions, or on Fedora Core if build fails
         #self.swig_opts.append('-DOPENSSL_NO_EC') # Try uncommenting if you can't build with EC disabled
-        
+        self.swig_opts.append('-modern')
+        self.swig_opts.append('-builtin')
+
+        # These two lines are a workaround for
+        # http://bugs.python.org/issue2624 , hard-coding that we are only
+        # building a single extension with a known path; a proper patch to
+        # distutils would be in the run phase, when extension name and path are
+        # known.
+        self.swig_opts.append('-outdir')
+        self.swig_opts.append(os.path.join(self.build_lib, 'M2Crypto'))
+
         self.include_dirs += [os.path.join(self.openssl, opensslIncludeDir),
                               os.path.join(os.getcwd(), 'SWIG')]        
             
@@ -71,6 +82,19 @@
                
         self.library_dirs += [os.path.join(self.openssl, opensslLibraryDir)]
 
+    def run(self):
+        '''Overloaded build_ext implementation to allow inplace=1 to work,
+        which is needed for (python setup.py test).'''
+        # This is another workaround for http://bugs.python.org/issue2624 + the
+        # corresponding lack of support in setuptools' test command. Note that
+        # just using self.inplace in finalize_options() above does not work
+        # because swig is not rerun if the __m2crypto.so extension exists.
+        # Again, hard-coding our extension name and location.
+        build_ext.build_ext.run(self)
+        if self.inplace:
+            copy_file(os.path.join(self.build_lib, 'M2Crypto', '_m2crypto.py'),
+                      os.path.join('M2Crypto', '_m2crypto.py'),
+                      verbose=self.verbose, dry_run=self.dry_run)
 
 if sys.version_info < (2,4):
 
diff -ur M2Crypto/SWIG/_lib.i M2Crypto-0.21.1/SWIG/_lib.i
--- M2Crypto/SWIG/_lib.i	2015-07-11 04:41:06.861869450 +0200
+++ M2Crypto-0.21.1/SWIG/_lib.i	2015-07-11 04:41:27.547246950 +0200
@@ -158,6 +158,7 @@
     int cret;
     int new_style_callback = 0, warning_raised_exception=0;
     PyGILState_STATE gilstate;
+    PyObject *self = NULL; /* bug in SWIG_NewPointerObj as of 3.0.5 */
 
     ssl = (SSL *)X509_STORE_CTX_get_app_data(ctx);
 
@@ -243,6 +244,7 @@
 void ssl_info_callback(const SSL *s, int where, int ret) {
     PyObject *argv, *retval, *_SSL;
     PyGILState_STATE gilstate;
+    PyObject *self = NULL; /* bug in SWIG_NewPointerObj as of 3.0.5 */
 
     gilstate = PyGILState_Ensure();
 
@@ -262,6 +264,7 @@
     PyObject *argv, *ret, *_ssl;
     DH *dh;
     PyGILState_STATE gilstate;
+    PyObject *self = NULL; /* bug in SWIG_NewPointerObj as of 3.0.5 */
 
     gilstate = PyGILState_Ensure();
 
@@ -285,6 +288,7 @@
     PyObject *argv, *ret, *_ssl;
     RSA *rsa;
     PyGILState_STATE gilstate;
+    PyObject *self = NULL; /* bug in SWIG_NewPointerObj as of 3.0.5 */
 
     gilstate = PyGILState_Ensure();
 
diff -ur M2Crypto/SWIG/_pkcs7.i M2Crypto-0.21.1/SWIG/_pkcs7.i
--- M2Crypto/SWIG/_pkcs7.i	2011-01-15 20:10:06.000000000 +0100
+++ M2Crypto-0.21.1/SWIG/_pkcs7.i	2015-07-11 04:41:27.547246950 +0200
@@ -157,6 +157,7 @@
     BIO *bcont = NULL;
     PKCS7 *p7;
     PyObject *tuple, *_p7, *_BIO;
+    PyObject *self = NULL; /* bug in SWIG_NewPointerObj as of 3.0.5 */
 
     if (BIO_method_type(bio) == BIO_TYPE_MEM) {
         /* OpenSSL FAQ explains that this is needed for mem BIO to return EOF,
