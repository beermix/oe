From c074e87885a6962bfae8a127d37251ba076d6d11 Mon Sep 17 00:00:00 2001
From: arvidn <arvid@libtorrent.org>
Date: Thu, 10 Aug 2017 12:48:29 +0200
Subject: [PATCH] back-port fix for long URLs from RC_1_1

---
 ChangeLog                     |  1 +
 src/http_connection.cpp       | 41 +++++++++++++++++------------------------
 test/test_http_connection.cpp |  8 ++++++++
 3 files changed, 26 insertions(+), 24 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 92b3efacf1..ec0ef015fb 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,4 @@
+	* fix issue with very long tracker- and web seed URLs
 	* add_torrent_params file_priorities is not affected by flag_override_resume_data
 	* fix ABI compatibility issue introduced with preformatted entry type
 
diff --git a/src/http_connection.cpp b/src/http_connection.cpp
index f61a125134..af082c5b9f 100644
--- a/src/http_connection.cpp
+++ b/src/http_connection.cpp
@@ -150,14 +150,8 @@ void http_connection::get(std::string const& url, time_duration timeout, int pri
 
 	bool ssl = false;
 	if (protocol == "https") ssl = true;
-	
-	char request[4096];
-	char* end = request + sizeof(request);
-	char* ptr = request;
 
-#define APPEND_FMT(fmt) ptr += snprintf(ptr, end - ptr, fmt)
-#define APPEND_FMT1(fmt, arg) ptr += snprintf(ptr, end - ptr, fmt, arg)
-#define APPEND_FMT2(fmt, arg1, arg2) ptr += snprintf(ptr, end - ptr, fmt, arg1, arg2)
+	std::stringstream request;
 
 	// exclude ssl here, because SSL assumes CONNECT support in the
 	// proxy and is handled at the lower layer
@@ -167,40 +161,39 @@ void http_connection::get(std::string const& url, time_duration timeout, int pri
 	{
 		// if we're using an http proxy and not an ssl
 		// connection, just do a regular http proxy request
-		APPEND_FMT1("GET %s HTTP/1.1\r\n", url.c_str());
+		request << "GET " << url << " HTTP/1.1\r\n";
 		if (ps->type == proxy_settings::http_pw)
-			APPEND_FMT1("Proxy-Authorization: Basic %s\r\n", base64encode(
-				ps->username + ":" + ps->password).c_str());
+			request << "Proxy-Authorization: Basic " << base64encode(
+				ps->username + ":" + ps->password) << "\r\n";
 
 		hostname = ps->hostname;
 		port = ps->port;
 
-		APPEND_FMT1("Host: %s", hostname.c_str());
-		if (port != default_port) APPEND_FMT1(":%d\r\n", port);
-		else APPEND_FMT("\r\n");
+		request << "Host: " << hostname;
+		if (port != default_port) request << ":" << port << "\r\n";
+		else request << "\r\n";
 	}
 	else
 	{
-		APPEND_FMT2("GET %s HTTP/1.1\r\n"
-			"Host: %s", path.c_str(), hostname.c_str());
-		if (port != default_port) APPEND_FMT1(":%d\r\n", port);
-		else APPEND_FMT("\r\n");
+		request << "GET " << path << " HTTP/1.1\r\nHost: " << hostname;
+		if (port != default_port) request << ":" << port << "\r\n";
+		else request << "\r\n";
 	}
 
-//	APPEND_FMT("Accept: */*\r\n");
+//	request << "Accept: */*\r\n";
 
 	if (!m_user_agent.empty())
-		APPEND_FMT1("User-Agent: %s\r\n", m_user_agent.c_str());
-	
+		request << "User-Agent: " << m_user_agent << "\r\n";
+
 	if (m_bottled)
-		APPEND_FMT("Accept-Encoding: gzip\r\n");
+		request << "Accept-Encoding: gzip\r\n";
 
 	if (!auth.empty())
-		APPEND_FMT1("Authorization: Basic %s\r\n", base64encode(auth).c_str());
+		request << "Authorization: Basic " << base64encode(auth) << "\r\n";
 
-	APPEND_FMT("Connection: close\r\n\r\n");
+	request << "Connection: close\r\n\r\n";
 
-	sendbuffer.assign(request);
+	sendbuffer.assign(request.str());
 	m_url = url;
 	start(hostname, to_string(port).elems, timeout, prio
 		, ps, ssl, handle_redirects, bind_addr
diff --git a/test/test_http_connection.cpp b/test/test_http_connection.cpp
index eedb0bfd9a..8c91d5e46b 100644
--- a/test/test_http_connection.cpp
+++ b/test/test_http_connection.cpp
@@ -167,6 +167,14 @@ void run_suite(std::string const& protocol, proxy_settings ps, int port)
 	run_test(url_base + "test_file.gz", 3216, 200, 1, error_code(), ps);
 	run_test(url_base + "non-existing-file", -1, 404, 1, err(), ps);
 
+	// try a very long path
+	std::string path;
+	for (int i = 0; i < 6000; ++i)
+	{
+		path += static_cast<char>(i % 26) + 'a';
+	}
+	run_test(url_base + path, 0, 404, 1, err(), ps);
+
 	// only run the tests to handle NX_DOMAIN if we have a proper internet
 	// connection that doesn't inject false DNS responses (like Comcast does)
 	hostent* h = gethostbyname("non-existent-domain.se");
