From 1c6025e6120dbb48ee5c60d2deb4e26185fa6da0 Mon Sep 17 00:00:00 2001
From: arvidn <arvid@cs.umu.se>
Date: Tue, 11 Jul 2017 23:01:00 -0700
Subject: [PATCH] add_torrent_params file_priorities is not affected by
 flag_override_resume_data

---
 ChangeLog                                 |  1 +
 include/libtorrent/add_torrent_params.hpp |  3 ++-
 include/libtorrent/torrent.hpp            |  7 ++++--
 src/torrent.cpp                           |  8 ++++++-
 test/test_resume.cpp                      | 39 +++++++++++++++++++++++++++++++
 5 files changed, 54 insertions(+), 4 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 9defe7cd8b..92b3efacf1 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,4 @@
+	* add_torrent_params file_priorities is not affected by flag_override_resume_data
 	* fix ABI compatibility issue introduced with preformatted entry type
 
 1.0.11 release
diff --git a/include/libtorrent/add_torrent_params.hpp b/include/libtorrent/add_torrent_params.hpp
index d9ab7395f9..64357c064c 100644
--- a/include/libtorrent/add_torrent_params.hpp
+++ b/include/libtorrent/add_torrent_params.hpp
@@ -329,7 +329,8 @@ namespace libtorrent
 
 		// can be set to control the initial file priorities when adding a
 		// torrent. The semantics are the same as for
-		// ``torrent_handle::prioritize_files()``.
+		// ``torrent_handle::prioritize_files()``. If file priorities are
+		// specified here, they override any file priorities from the resume data.
 		std::vector<boost::uint8_t> file_priorities;
 
 		// torrent extension construction functions can be added to this vector
diff --git a/include/libtorrent/torrent.hpp b/include/libtorrent/torrent.hpp
index 4f6ff597e3..42d304a446 100644
--- a/include/libtorrent/torrent.hpp
+++ b/include/libtorrent/torrent.hpp
@@ -330,7 +330,7 @@ namespace libtorrent
 		// ============ end deprecation =============
 
 		void piece_availability(std::vector<int>& avail) const;
-		
+
 		void set_piece_priority(int index, int priority);
 		int piece_priority(int index) const;
 
@@ -1213,7 +1213,7 @@ namespace libtorrent
 		// the DNS request queue, only one ip is resolved
 		// at a time.
 		mutable bool m_resolving_country:1;
-		
+
 		// this is true if the user has enabled
 		// country resolution in this torrent
 		bool m_resolve_countries:1;
@@ -1222,6 +1222,9 @@ namespace libtorrent
 		// whenever something is downloaded
 		bool m_need_save_resume_data:1;
 
+		// true if the file priorities were set via add_torrent_params
+		bool m_file_priorities_set:1;
+
 // ----
 
 		// total time we've been available as a seed on this torrent
diff --git a/src/torrent.cpp b/src/torrent.cpp
index ef05dfd580..7e05362204 100644
--- a/src/torrent.cpp
+++ b/src/torrent.cpp
@@ -207,6 +207,7 @@ namespace libtorrent
 		, m_resolve_countries(false)
 #endif
 		, m_need_save_resume_data(true)
+		, m_file_priorities_set(!p.file_priorities.empty())
 		, m_seeding_time(0)
 		, m_time_scaler(0)
 		, m_max_uploads((1<<24)-1)
@@ -5410,7 +5411,7 @@ namespace libtorrent
 		if (m_completed_time != 0 && m_completed_time < m_added_time)
 			m_completed_time = m_added_time;
 
-		if (!m_override_resume_data)
+		if (!m_file_priorities_set)
 		{
 			lazy_entry const* file_priority = rd.dict_find_list("file_priority");
 			if (file_priority)
@@ -5423,6 +5424,11 @@ namespace libtorrent
 					// this is suspicious, leave seed mode
 					if (m_file_priority[i] == 0) m_seed_mode = false;
 				}
+				if (m_storage)
+				{
+					filesystem().async_set_file_priority(m_file_priority
+						, boost::bind(&nop));
+				}
 				update_piece_priorities();
 			}
 		}
diff --git a/test/test_resume.cpp b/test/test_resume.cpp
index b24f2963ac..ed8bed4895 100644
--- a/test/test_resume.cpp
+++ b/test/test_resume.cpp
@@ -239,6 +239,44 @@ void test_file_prio()
 	TEST_EQUAL(s.total_wanted, 0);
 }
 
+void test_file_prio_override()
+{
+	fprintf(stderr, "test_file_prio_override_resume\n");
+
+	session ses;
+	boost::intrusive_ptr<torrent_info> ti = generate_torrent();
+	add_torrent_params p;
+	p.ti = ti;
+	p.save_path = ".";
+	p.flags |= add_torrent_params::flag_override_resume_data;
+
+	entry rd;
+
+	rd["file-format"] = "libtorrent resume file";
+	rd["file-version"] = 1;
+	rd["info-hash"] = ti->info_hash().to_string();
+	rd["blocks per piece"] = (std::max)(1, ti->piece_length() / 0x4000);
+
+	entry::list_type& file_prio = rd["file_priority"].list();
+	for (int i = 0; i < 100; ++i)
+	{
+		file_prio.push_back(entry(0));
+	}
+
+	std::string pieces(ti->num_pieces(), '\x01');
+	rd["pieces"] = pieces;
+
+	std::string pieces_prio(ti->num_pieces(), '\x01');
+	rd["piece_priority"] = pieces_prio;
+
+	bencode(back_inserter(p.resume_data), rd);
+
+	torrent_handle h = ses.add_torrent(p);
+
+	torrent_status s = h.status();
+	TEST_EQUAL(s.total_wanted, 0);
+}
+
 void test_seed_mode(bool file_prio, bool pieces_have, bool piece_prio
 	, bool all_files_zero = false)
 {
@@ -306,6 +344,7 @@ void test_seed_mode(bool file_prio, bool pieces_have, bool piece_prio
 int test_main()
 {
 	test_file_prio();
+	test_file_prio_override();
 
 	test_seed_mode(true, false, false);
 	test_seed_mode(false, true, false);
