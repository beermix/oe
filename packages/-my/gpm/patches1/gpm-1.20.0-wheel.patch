Binary files gpm-1.20.0/src/.mice.c.rej.swp and gpm-1.20.0-wheel/src/.mice.c.rej.swp differ
diff -Nruw gpm-1.20.0/src/gpm.c gpm-1.20.0-wheel/src/gpm.c
--- gpm-1.20.0/src/gpm.c	Sat Feb 23 16:42:23 2002
+++ gpm-1.20.0-wheel/src/gpm.c	Sat Mar 16 13:18:36 2002
@@ -429,6 +429,7 @@
       event->buttons=nEvent.buttons;
    } else {
       event->dx=event->dy=0;
+      event->wdx=event->wdy=0;
       nEvent.modifiers = 0; /* some mice set them */
       FD_ZERO(&fdSet); FD_SET(fd,&fdSet); i=0;
 
@@ -465,6 +466,11 @@
             event->dx = (nEvent.x) - (event->x);
             event->dy = (nEvent.y) - (event->y);
          }
+
+         /* propagate wheel */
+         event->wdx += nEvent.wdx;
+         event->wdy += nEvent.wdy;
+
          select(fd+1,&fdSet,(fd_set *)NULL,(fd_set *)NULL,&timeout/* zero */);
 
       } while (i++<opt_cluster && nEvent.buttons==oldB && FD_ISSET(fd,&fdSet));
diff -Nruw gpm-1.20.0/src/headers/gpm.h gpm-1.20.0-wheel/src/headers/gpm.h
--- gpm-1.20.0/src/headers/gpm.h	Sat Feb 23 16:42:23 2002
+++ gpm-1.20.0-wheel/src/headers/gpm.h	Sat Mar 16 13:06:27 2002
@@ -122,6 +122,7 @@
   unsigned char buttons, modifiers;  /* try to be a multiple of 4 */
   unsigned short vc;
   short dx, dy, x, y;
+  short wdx, wdy;
   enum Gpm_Etype type;
   int clicks;
   enum Gpm_Margin margin;
diff -Nruw gpm-1.20.0/src/mice.c gpm-1.20.0-wheel/src/mice.c
--- gpm-1.20.0/src/mice.c	Sat Feb 23 16:42:23 2002
+++ gpm-1.20.0-wheel/src/mice.c	Sat Mar 16 13:31:19 2002
@@ -421,16 +421,48 @@
 /* m$ 'Intellimouse' (steveb 20/7/97) */
 static int M_ms3(Gpm_Event *state,  unsigned char *data)
 {
+   state->wdx = state->wdy = 0;
+
    state->buttons= ((data[0] & 0x20) >> 3)   /* left */
       | ((data[3] & 0x10) >> 3)   /* middle */
       | ((data[0] & 0x10) >> 4);   /* right */
    state->dx=      (signed char)(((data[0] & 0x03) << 6) | (data[1] & 0x3F));
    state->dy=      (signed char)(((data[0] & 0x0C) << 4) | (data[2] & 0x3F));
-   /* wheel (dz??) is (data[3] & 0x0f) */
+
+   switch (data[3] & 0x0f) {
+     case 0x0e: state->wdx = +1; break;
+     case 0x02: state->wdx = -1; break;
+     case 0x0f: state->wdy = +1; break;
+     case 0x01: state->wdy = -1; break;
+   }
 
    return 0;
 }
 
+static int R_ms3(Gpm_Event *state, int fd)
+{
+   char buf[4] = {0, 0, 0, 0};
+
+   buf[0] |= 0x40;
+
+   buf[0] |= ((state->buttons & GPM_B_LEFT) ? 0x20 : 0);
+   buf[3] |= ((state->buttons & GPM_B_MIDDLE) ? 0x10 : 0);
+   buf[0] |= ((state->buttons & GPM_B_RIGHT) ? 0x10 : 0);
+
+   buf[1] = state->dx & ~0xC0;
+   buf[0] |= (state->dx & 0xC0) >> 6;
+
+   buf[2] = state->dy & ~0xC0;
+   buf[0] |= (state->dy & 0xC0) >> 4;
+
+   if (state->wdy > 0)
+     buf[3] |= 0x0f;
+   else if (state->wdy < 0)
+     buf[3] |= 0x01;
+
+   return write(fd,buf,4);
+ }
+
 /* M_brw is a variant of m$ 'Intellimouse' the middle button is different */
 static int M_brw(Gpm_Event *state,  unsigned char *data)
 {
@@ -589,12 +621,37 @@
 }
 
 /* uses signed char *date, which should be unsigned; is really signed needed?*/
-static int M_imps2(Gpm_Event *state,  signed char *data)
+static int M_imps2(Gpm_Event *state,  unsigned char *data)
 {
-   int ret = M_ps2(state, data);
-   state->buttons |= (data[3]<0) * GPM_B_UP + (data[3]>0) * GPM_B_DOWN; 
+  static int tap_active=0;     // there exist glidepoint ps2 mice
+  state->wdx = state->wdy = 0; // Clear them..
+
+  state->dx = state->dy = state->wdx = state->wdy = 0;
     
-   return ret;
+  state->buttons= ((data[0] & 1) << 2) // left
+    | ((data[0] & 6) >> 1); // middle and right
+
+  if (data[0]==0 && opt_glidepoint_tap) // by default this is false
+    state->buttons = tap_active = opt_glidepoint_tap;
+  else if (tap_active) {
+    if (data[0]==8)
+      state->buttons = tap_active = 0;
+    else state->buttons = tap_active;
+  }
+
+  // Standard movement..
+  state->dx = (data[0] & 0x10) ? data[1] - 256 : data[1];
+  state->dy = (data[0] & 0x20) ? -(data[2] - 256) : -data[2];
+
+  // The wheels..
+  switch (data[3] & 0x0f) {
+    case 0x0e: state->wdx = +1; break;
+    case 0x02: state->wdx = -1; break;
+    case 0x0f: state->wdy = +1; break;
+    case 0x01: state->wdy = -1; break;
+  }
+
+  return 0;
 }
 
 static int M_netmouse(Gpm_Event *state,  unsigned char *data)
@@ -2108,7 +2165,7 @@
                         {0x00, 0x00, 0x00, 0x00} , 16, 16, 0, 0, NULL},
 #endif /* HAVE_LINUX_INPUT_H */
    {"exps2",   "IntelliMouse Explorer (ps2) - 3 buttons, wheel unused",
-           "ExplorerPS/2", M_ps2, I_exps2, STD_FLG,
+           "ExplorerPS/2", M_imps2, I_exps2, STD_FLG,
                                 {0xc0, 0x00, 0x00, 0x00}, 4, 1, 0, 0, 0},
 #ifdef HAVE_LINUX_JOYSTICK_H
    {"js",   "Joystick mouse emulation",
@@ -2135,7 +2192,7 @@
                                 {0xe0, 0x80, 0x80, 0x00}, 3, 1, 0, 0, 0},
    {"ms3", "Microsoft Intellimouse (serial) - 3 buttons, wheel unused",
            "", M_ms3, I_pnp, CS7 | STD_FLG,
-                                {0xc0, 0x40, 0xc0, 0x00}, 4, 1, 0, 0, 0},
+                                {0xc0, 0x40, 0xc0, 0x00}, 4, 1, 0, 0, R_ms3},
    {"ms+", "Like 'ms', but allows dragging with the middle button.",
            "", M_ms_plus, I_serial, CS7 | STD_FLG,
                                 {0x40, 0x40, 0x40, 0x00}, 3, 1, 0, 0, 0},
