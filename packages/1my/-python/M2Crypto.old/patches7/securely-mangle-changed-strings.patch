Description: secure mangling of changed strings in test_authcookie.py
 Fixes flaky failure of test_cookie_str_changed_mac, e.g. 0.27.0-3 on alpha,
 0.27.0-2 on mips, and others.
Origin: https://gitlab.com/m2crypto/m2crypto/commit/8365272
Bug: https://gitlab.com/m2crypto/m2crypto/issues/138

--- a/tests/test_authcookie.py
+++ b/tests/test_authcookie.py
@@ -31,6 +31,17 @@
     def tearDown(self):
         pass
 
+    def _corrupt_part_str(self, s, fr, to):
+        # type: (str, int, int) -> str
+        out = s[:fr] + ''.join([chr(ord(x) + 13) for x in s[fr:to]]) + s[to:]
+        self.assertNotEqual(s, out)
+        return out
+
+    def test_encode_part_str(self):
+        a_str = 'a1b2c3d4e5f6h7i8j9'
+        self.assertEqual(self._corrupt_part_str(a_str, 3, 5),
+                         'a1b?p3d4e5f6h7i8j9')
+
     def test_mix_unmix(self):
         dough = mix(self.exp, self.data)
         exp, data = unmix(dough)
@@ -131,7 +142,7 @@
     def test_cookie_str_changed_exp(self):
         c = self.jar.makeCookie(self.exp, self.data)
         cout = c.output()
-        cout_str = cout[:26] + '2' + cout[27:]
+        cout_str = self._corrupt_part_str(cout, 26, 28)
         s = SimpleCookie()
         s.load(cout_str)
         self.assertFalse(self.jar.isGoodCookieString(s.output()))
@@ -139,7 +150,7 @@
     def test_cookie_str_changed_data(self):
         c = self.jar.makeCookie(self.exp, self.data)
         cout = c.output()
-        cout_str = cout[:36] + 'X' + cout[37:]
+        cout_str = self._corrupt_part_str(cout, 36, 38)
         s = SimpleCookie()
         s.load(cout_str)
         self.assertFalse(self.jar.isGoodCookieString(s.output()))
@@ -147,7 +158,7 @@
     def test_cookie_str_changed_mac(self):
         c = self.jar.makeCookie(self.exp, self.data)
         cout = c.output()
-        cout_str = cout[:76] + 'X' + cout[77:]
+        cout_str = self._corrupt_part_str(cout, 76, 78)
         s = SimpleCookie()
         s.load(cout_str)
         observed = self.jar.isGoodCookieString(s.output(), _debug=True)
