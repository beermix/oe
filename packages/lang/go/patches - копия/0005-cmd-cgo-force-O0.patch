From fe9b2f62d02589ed807f0b17697ea993d7b79a8b Mon Sep 17 00:00:00 2001
From: Jose Carlos Venegas Munoz <jose.carlos.venegas.munoz@intel.com>
Date: Tue, 17 Jan 2017 09:23:18 -0600
Subject: [PATCH] cmd/cgo: force -O0

When the go compiler uses cgo, removes all
C compilation optimization flags,
See commit: b5d18b50ac591d41.

This is because optimization flags
breaks c code build process, see:
https://github.com/golang/go/issues/14669

cgo creates invalid C code that works
with -O0 using gcc. The code it generates is valid C++
just not valid C.

In Clear Linux gcc compiler uses at least
-O1 optimization flag (if not optimization is specified), this cause an
issue when cgo is used. The go compiler removes any optimization flag
(even -O0 that should work
correctly) letting gcc use -O1 as default.

This patch force go compiler to use -O0
after all the optimization flags was removed.

Signed-off-by: Jose Carlos Venegas Munoz <jose.carlos.venegas.munoz@intel.com>
---
 src/cmd/cgo/gcc.go | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/cmd/cgo/gcc.go b/src/cmd/cgo/gcc.go
index fc1d011..60189da 100644
--- a/src/cmd/cgo/gcc.go
+++ b/src/cmd/cgo/gcc.go
@@ -1339,13 +1339,14 @@ func (p *Package) gccErrors(stdin []byte) string {
 	// TODO(rsc): require failure
 	args := p.gccCmd()
 
-	// Optimization options can confuse the error messages; remove them.
+	// Optimization options can confuse the error messages; remove them and force -O0.
 	nargs := make([]string, 0, len(args))
 	for _, arg := range args {
 		if !strings.HasPrefix(arg, "-O") {
 			nargs = append(nargs, arg)
 		}
 	}
+	nargs = append(nargs, "-O0")
 
 	if *debugGcc {
 		fmt.Fprintf(os.Stderr, "$ %s <<EOF\n", strings.Join(nargs, " "))
-- 
2.9.3

