diff --git a/CMakeLists.txt b/CMakeLists.txt
index ba55fb5..04085a7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -114,98 +114,6 @@ if("${ARCH}" MATCHES "s390x")
     option(WITH_DFLTCC_INFLATE "Use DEFLATE COMPRESSION CALL instruction for decompression on IBM Z" OFF)
 endif()
 
-if(${CMAKE_C_COMPILER} MATCHES "icc" OR ${CMAKE_C_COMPILER} MATCHES "icpc" OR ${CMAKE_C_COMPILER} MATCHES "icl")
-    if(WITH_NATIVE_INSTRUCTIONS)
-        message(STATUS "Ignoring WITH_NATIVE_INSTRUCTIONS; not supported on this configuration")
-    endif()
-    if(CMAKE_HOST_UNIX)
-        if(NOT SSE2FLAG)
-            set(SSE2FLAG "-msse2")
-        endif()
-        if(NOT SSE4FLAG)
-            set(SSE4FLAG "-msse4.2")
-        endif()
-    else()
-        if(NOT SSE2FLAG)
-            set(SSE2FLAG "/arch:SSE2")
-        endif()
-        if(NOT SSE4FLAG)
-            set(SSE4FLAG "/arch:SSE4.2")
-        endif()
-    endif()
-elseif(MSVC)
-    # TODO. ICC can be used through MSVC. I'm not sure if we'd ever see that combination
-    # (who'd use cmake from an IDE...) but checking for ICC before checking for MSVC should
-    # avoid mistakes.
-    # /Oi ?
-    if(NOT ${ARCH} MATCHES "AMD64")
-        set(SSE2FLAG "/arch:SSE2")
-    endif()
-    if("${ARCH}" MATCHES "arm")
-        add_definitions("-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE=1")
-        set(NEONFLAG "/arch:VFPv4")
-    endif()
-    if(WITH_NATIVE_INSTRUCTIONS)
-        message(STATUS "Ignoring WITH_NATIVE_INSTRUCTIONS; not supported on this configuration")
-    endif()
-else()
-    # catch all GNU C compilers as well as Clang and AppleClang
-    if(CMAKE_C_COMPILER_ID MATCHES "GNU" OR CMAKE_C_COMPILER_ID MATCHES "Clang")
-        set(__GNUC__ ON)
-    endif()
-    if(WITH_NATIVE_INSTRUCTIONS)
-        if(__GNUC__)
-            set(NATIVEFLAG "-march=native")
-        else()
-            message(STATUS "Ignoring WITH_NATIVE_INSTRUCTIONS; not implemented yet on this configuration")
-        endif()
-    endif()
-    if(__GNUC__ AND "${ARCH}" MATCHES "arm")
-        execute_process(COMMAND "${CC}" "-dumpmachine"
-                        OUTPUT_VARIABLE GCC_MACHINE)
-        if ("${GCC_MACHINE}" MATCHES "eabihf")
-            set(FLOATABI "-mfloat-abi=hard")
-        else()
-            set(FLOATABI "-mfloat-abi=softfp")
-        endif()
-    endif()
-    if(NOT NATIVEFLAG)
-        if(NOT SSE2FLAG)
-            if(__GNUC__)
-                set(SSE2FLAG "-msse2")
-            endif()
-        endif()
-        if(NOT SSE4FLAG)
-            if(__GNUC__)
-                set(SSE4FLAG "-msse4")
-            endif()
-        endif()
-        if(NOT PCLMULFLAG)
-            if(__GNUC__)
-                set(PCLMULFLAG "-mpclmul")
-            endif()
-        endif()
-        if("${ARCH}" MATCHES "arm")
-            set(ACLEFLAG "-march=armv8-a+crc")
-            set(NEONFLAG "${FLOATABI} -mfpu=neon")
-        elseif("${ARCH}" MATCHES "aarch64")
-            set(ACLEFLAG "-march=armv8-a+crc")
-            set(NEONFLAG "-march=armv8-a+crc+simd")
-        endif()
-    else(NOT NATIVEFLAG)
-        set(SSE2FLAG ${NATIVEFLAG})
-        set(SSE4FLAG ${NATIVEFLAG})
-        set(PCLMULFLAG ${NATIVEFLAG})
-        if("${ARCH}" MATCHES "arm")
-            set(ACLEFLAG "${NATIVEFLAG}")
-            set(NEONFLAG "${FLOATABI} -mfpu=neon")
-        elseif("${ARCH}" MATCHES "aarch64")
-            set(ACLEFLAG "${NATIVEFLAG}")
-            set(NEONFLAG "${NATIVEFLAG}")
-        endif()
-    endif(NOT NATIVEFLAG)
-endif()
-
 add_feature_info(ZLIB_COMPAT ZLIB_COMPAT "Provide a zlib-compatible API")
 add_feature_info(WITH_GZFILEOP WITH_GZFILEOP "Compile with support for gzFile-related functions")
 add_feature_info(WITH_OPTIM WITH_OPTIM "Build with optimisation")
