diff --git a/tools/objtool/check.c b/tools/objtool/check.c
index bd26d57accc7..479ee76ac21a 100644
--- a/tools/objtool/check.c
+++ b/tools/objtool/check.c
@@ -543,6 +543,19 @@ static int add_jump_destinations(struct objtool_file *file)
 				  dest_off);
 			return -1;
 		}
+
+		/*
+		 * For GCC 8+, create parent/child links for any cold
+		 * subfunctions.
+		 */
+		if (insn->func && insn->jump_dest->func &&
+		    insn->func != insn->jump_dest->func &&
+		    insn->func->cfunc == insn->func &&
+		    !strstr(insn->func->name, ".cold.") &&
+		    strstr(insn->jump_dest->func->name, ".cold.")) {
+			insn->func->cfunc = insn->jump_dest->func;
+			insn->jump_dest->func->pfunc = insn->func;
+		}
 	}
 
 	return 0;
diff --git a/tools/objtool/elf.c b/tools/objtool/elf.c
index 4e60e105583e..79c92af54c17 100644
--- a/tools/objtool/elf.c
+++ b/tools/objtool/elf.c
@@ -216,11 +216,10 @@ static int read_sections(struct elf *elf)
 
 static int read_symbols(struct elf *elf)
 {
-	struct section *symtab, *sec;
-	struct symbol *sym, *pfunc;
+	struct section *symtab;
+	struct symbol *sym;
 	struct list_head *entry, *tmp;
 	int symbols_nr, i;
-	char *coldstr;
 
 	symtab = find_section_by_name(elf, ".symtab");
 	if (!symtab) {
@@ -274,6 +273,9 @@ static int read_symbols(struct elf *elf)
 		sym->offset = sym->sym.st_value;
 		sym->len = sym->sym.st_size;
 
+		if (sym->type == STT_FUNC)
+			sym->pfunc = sym->cfunc = sym;
+
 		/* sorted insert into a per-section list */
 		entry = &sym->sec->symbol_list;
 		list_for_each_prev(tmp, &sym->sec->symbol_list) {
@@ -295,30 +297,6 @@ static int read_symbols(struct elf *elf)
 		hash_add(sym->sec->symbol_hash, &sym->hash, sym->idx);
 	}
 
-	/* Create parent/child links for any cold subfunctions */
-	list_for_each_entry(sec, &elf->sections, list) {
-		list_for_each_entry(sym, &sec->symbol_list, list) {
-			if (sym->type != STT_FUNC)
-				continue;
-			sym->pfunc = sym->cfunc = sym;
-			coldstr = strstr(sym->name, ".cold.");
-			if (coldstr) {
-				coldstr[0] = '\0';
-				pfunc = find_symbol_by_name(elf, sym->name);
-				coldstr[0] = '.';
-
-				if (!pfunc) {
-					WARN("%s(): can't find parent function",
-					     sym->name);
-					goto err;
-				}
-
-				sym->pfunc = pfunc;
-				pfunc->cfunc = sym;
-			}
-		}
-	}
-
 	return 0;
 
 err:
