From f1185392189641014dca94f3fe7834bccb5f4c16 Mon Sep 17 00:00:00 2001
From: Matt Caswell <matt@openssl.org>
Date: Wed, 2 Nov 2016 22:26:17 +0000
Subject: [PATCH] Fail if an unrecognised record type is received
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

TLS1.0 and TLS1.1 say you SHOULD ignore unrecognised record types, but
TLS 1.2 says you MUST send an unexpected message alert. We swap to the
TLS 1.2 behaviour for all protocol versions to prevent issues where no
progress is being made and the peer continually sends unrecognised record
types, using up resources processing them.

Issue reported by é­å¿æ

Reviewed-by: Tim Hudson <tjh@openssl.org>
---
 ssl/s3_pkt.c | 13 +++++--------
 1 file changed, 5 insertions(+), 8 deletions(-)

Index: openssl-1.0.2g/ssl/s3_pkt.c
===================================================================
--- openssl-1.0.2g.orig/ssl/s3_pkt.c	2017-01-30 09:06:44.567907227 -0500
+++ openssl-1.0.2g/ssl/s3_pkt.c	2017-01-30 09:06:44.563907176 -0500
@@ -1593,16 +1593,13 @@
 
     switch (rr->type) {
     default:
-#ifndef OPENSSL_NO_TLS
         /*
-         * TLS up to v1.1 just ignores unknown message types: TLS v1.2 give
-         * an unexpected message alert.
+         * TLS 1.0 and 1.1 say you SHOULD ignore unrecognised record types, but
+         * TLS 1.2 says you MUST send an unexpected message alert. We use the
+         * TLS 1.2 behaviour for all protocol versions to prevent issues where
+         * no progress is being made and the peer continually sends unrecognised
+         * record types, using up resources processing them.
          */
-        if (s->version >= TLS1_VERSION && s->version <= TLS1_1_VERSION) {
-            rr->length = 0;
-            goto start;
-        }
-#endif
         al = SSL_AD_UNEXPECTED_MESSAGE;
         SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_UNEXPECTED_RECORD);
         goto f_err;
