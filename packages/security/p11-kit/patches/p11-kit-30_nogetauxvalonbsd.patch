Description: Do not use getauxval on !linux.
Origin: vendor
Bug-Debian: http://bugs.debian.org/718285
Author: Andreas Metzler <ametzler@debian.org>
Last-Update: 2015-07-11

--- a/common/compat.c
+++ b/common/compat.c
@@ -769,7 +769,7 @@ mkdtemp (char *template)
 #ifndef HAVE_GETAUXVAL
 
 unsigned long
-getauxval (unsigned long type)
+_p11_getauxval (unsigned long type)
 {
 	static unsigned long secure = 0UL;
 	static bool check_secure_initialized = false;
@@ -817,7 +817,7 @@ getauxval (unsigned long type)
 char *
 secure_getenv (const char *name)
 {
-	if (getauxval (AT_SECURE))
+	if (_p11_getauxval (AT_SECURE))
 		return NULL;
 	return getenv (name);
 }
--- a/common/compat.h
+++ b/common/compat.h
@@ -312,10 +312,11 @@ time_t      timegm          (struct tm *
 #ifdef HAVE_GETAUXVAL
 
 #include <sys/auxv.h>
+#define _p11_getauxval(X) getauxval(X)
 
 #else /* !HAVE_GETAUXVAL */
 
-unsigned long     getauxval (unsigned long type);
+unsigned long     _p11_getauxval (unsigned long type);
 
 #define AT_SECURE 23
 
--- a/common/path.c
+++ b/common/path.c
@@ -106,7 +106,7 @@ expand_homedir (const char *remainder)
 {
 	const char *env;
 
-	if (getauxval (AT_SECURE)) {
+	if (_p11_getauxval (AT_SECURE)) {
 		errno = EPERM;
 		return NULL;
 	}
--- a/common/frob-getauxval.c
+++ b/common/frob-getauxval.c
@@ -55,7 +55,7 @@ main (int argc,
 		abort ();
 	}
 
-	ret = getauxval (type);
+	ret = _p11_getauxval (type);
 	printf ("getauxval(%lu) == %lu\n", type, ret);
 	return (int)ret;
 }
--- a/configure.ac
+++ b/configure.ac
@@ -51,6 +51,12 @@ case "$host" in
 		os_win32=yes
 		os_unix=no
 		;;
+	*-*-linux*)
+		AC_DEFINE_UNQUOTED(OS_UNIX, 1, [Building for unix])
+		os_win32=no
+		os_unix=yes
+		os_linux=yes
+		;;
 	*)
 		AC_DEFINE_UNQUOTED(OS_UNIX, 1, [Building for unix])
 		os_win32=no
@@ -88,7 +94,11 @@ if test "$os_unix" = "yes"; then
 	AC_CHECK_HEADERS([sys/resource.h])
 	AC_CHECK_MEMBERS([struct dirent.d_type],,,[#include <dirent.h>])
 	AC_CHECK_FUNCS([getprogname getexecname basename mkstemp mkdtemp])
-	AC_CHECK_FUNCS([getauxval issetugid getresuid secure_getenv])
+	AC_CHECK_FUNCS([issetugid getresuid secure_getenv])
+	if test "$os_linux" = "yes"; then
+		# Use getauxval on Linux only.
+		AC_CHECK_FUNCS([getauxval])
+	fi
 	AC_CHECK_FUNCS([strnstr memdup strndup strerror_r])
 	AC_CHECK_FUNCS([asprintf vasprintf vsnprintf])
 	AC_CHECK_FUNCS([fdwalk])
--- a/p11-kit/conf.c
+++ b/p11-kit/conf.c
@@ -228,7 +228,7 @@ _p11_conf_load_globals (const char *syst
 		goto finished;
 	}
 
-	if (mode != CONF_USER_NONE && getauxval (AT_SECURE)) {
+	if (mode != CONF_USER_NONE && _p11_getauxval (AT_SECURE)) {
 		p11_debug ("skipping user config in setuid or setgid program");
 		mode = CONF_USER_NONE;
 	}
--- a/p11-kit/frob-setuid.c
+++ b/p11-kit/frob-setuid.c
@@ -70,7 +70,7 @@ main (void)
 	printf ("'setting' on module 'one': %s\n", field ? field : "(null)");
 
 	assert (field != NULL);
-	if (getauxval (AT_SECURE))
+	if (_p11_getauxval (AT_SECURE))
 		assert (strcmp (field, "system1") == 0);
 	else
 		assert (strcmp (field, "user1") == 0);
