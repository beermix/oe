From 65f16a23db75e5742224472060c6572a2505dfdf Mon Sep 17 00:00:00 2001
From: Alexey Rozhkov <alexisrozhkov@gmail.com>
Date: Sun, 29 Jan 2017 18:28:58 +0300
Subject: [PATCH] Improve keyboard input handling on X11

Add support for triggers and analog stick

Enable loading keyboard mapping by specifying cfg file for evdev_mapping_... in input section of emu.cfg instead of hardcoding it.

Fix dangling pointer in cfg file loading
---
 core/linux-dist/evdev.cpp | 138 +++++++++++++++++++++++-----------------------
 core/linux-dist/main.cpp  |  19 +++++--
 core/linux-dist/main.h    |   2 +
 core/linux-dist/x11.cpp   | 107 ++++++++++++++++++++++++++---------
 core/linux-dist/x11.h     |   9 ++-
 5 files changed, 175 insertions(+), 100 deletions(-)

diff --git a/core/linux-dist/evdev.cpp b/core/linux-dist/evdev.cpp
index 2e75f981..bfe77eb7 100644
--- a/core/linux-dist/evdev.cpp
+++ b/core/linux-dist/evdev.cpp
@@ -218,85 +218,85 @@
 				printf("evdev: Found '%s' at '%s'\n", name, device);
 
 				controller->fd = fd;
+			}
+		}
+		else
+		{
+			perror("evdev: open");
+			//return -1;
+		}
+		
+		const char* mapping_fname;
 
-				const char* mapping_fname;
-
-				if(custom_mapping_fname != NULL)
+		if(custom_mapping_fname != NULL)
+		{
+			mapping_fname = custom_mapping_fname;
+		}
+		else
+		{
+			#if defined(TARGET_PANDORA)
+				mapping_fname = "controller_pandora.cfg";
+			#elif defined(TARGET_GCW0)
+				mapping_fname = "controller_gcwz.cfg";
+			#else
+				if (strcmp(name, "Microsoft X-Box 360 pad") == 0 ||
+					strcmp(name, "Xbox 360 Wireless Receiver") == 0 ||
+					strcmp(name, "Xbox 360 Wireless Receiver (XBOX)") == 0)
 				{
-					mapping_fname = custom_mapping_fname;
+					mapping_fname = "controller_xpad.cfg";
 				}
-				else
+				else if (strstr(name, "Xbox Gamepad (userspace driver)") != NULL)
 				{
-					#if defined(TARGET_PANDORA)
-						mapping_fname = "controller_pandora.cfg";
-					#elif defined(TARGET_GCW0)
-						mapping_fname = "controller_gcwz.cfg";
-					#else
-						if (strcmp(name, "Microsoft X-Box 360 pad") == 0 ||
-							strcmp(name, "Xbox 360 Wireless Receiver") == 0 ||
-							strcmp(name, "Xbox 360 Wireless Receiver (XBOX)") == 0)
-						{
-							mapping_fname = "controller_xpad.cfg";
-						}
-						else if (strstr(name, "Xbox Gamepad (userspace driver)") != NULL)
-						{
-							mapping_fname = "controller_xboxdrv.cfg";
-						}
-						else if (strstr(name, "keyboard") != NULL ||
-								 strstr(name, "Keyboard") != NULL)
-						{
-							mapping_fname = "keyboard.cfg";
-						}
-						else
-						{
-							mapping_fname = "controller_generic.cfg";
-						}
-					#endif
+					mapping_fname = "controller_xboxdrv.cfg";
 				}
-				if(loaded_mappings.count(string(mapping_fname)) == 0)
+				else if (strstr(name, "keyboard") != NULL ||
+						 strstr(name, "Keyboard") != NULL)
 				{
-					FILE* mapping_fd = NULL;
-					if(mapping_fname[0] == '/')
-					{
-						// Absolute mapping
-						mapping_fd = fopen(mapping_fname, "r");
-					}
-					else
-					{
-						// Mapping from ~/.reicast/mappings/
-						size_t size_needed = snprintf(NULL, 0, EVDEV_MAPPING_PATH, mapping_fname) + 1;
-						char* mapping_path = (char*)malloc(size_needed);
-						sprintf(mapping_path, EVDEV_MAPPING_PATH, mapping_fname);
-						mapping_fd = fopen(get_readonly_data_path(mapping_path).c_str(), "r");
-						free(mapping_path);
-					}
-					
-					if(mapping_fd != NULL)
-					{
-						printf("evdev: reading mapping file: '%s'\n", mapping_fname);
-						loaded_mappings.insert(std::make_pair(string(mapping_fname), load_mapping(mapping_fd)));
-						fclose(mapping_fd);
-
-					}
-					else
-					{
-						printf("evdev: unable to open mapping file '%s'\n", mapping_fname);
-						perror("evdev");
-						return -3;
-					}
+					mapping_fname = "keyboard.cfg";
 				}
-				controller->mapping = &loaded_mappings.find(string(mapping_fname))->second;
-				printf("evdev: Using '%s' mapping\n", controller->mapping->name);
-				controller->init();
-
-				return 0;
-			}
+				else
+				{
+					mapping_fname = "controller_generic.cfg";
+				}
+			#endif
 		}
-		else
+		if(loaded_mappings.count(string(mapping_fname)) == 0)
 		{
-			perror("evdev: open");
-			return -1;
+			FILE* mapping_fd = NULL;
+			if(mapping_fname[0] == '/')
+			{
+				// Absolute mapping
+				mapping_fd = fopen(mapping_fname, "r");
+			}
+			else
+			{
+				// Mapping from ~/.reicast/mappings/
+				size_t size_needed = snprintf(NULL, 0, EVDEV_MAPPING_PATH, mapping_fname) + 1;
+				char* mapping_path = (char*)malloc(size_needed);
+				sprintf(mapping_path, EVDEV_MAPPING_PATH, mapping_fname);
+				mapping_fd = fopen(get_readonly_data_path(mapping_path).c_str(), "r");
+				free(mapping_path);
+			}
+			
+			if(mapping_fd != NULL)
+			{
+				printf("evdev: reading mapping file: '%s'\n", mapping_fname);
+				loaded_mappings.insert(std::make_pair(string(mapping_fname), load_mapping(mapping_fd)));
+				fclose(mapping_fd);
+
+			}
+			else
+			{
+				printf("evdev: unable to open mapping file '%s'\n", mapping_fname);
+				perror("evdev");
+				return -3;
+			}
 		}
+		controller->mapping = &loaded_mappings.find(string(mapping_fname))->second;
+		printf("evdev: Using '%s' mapping %d\n", controller->mapping->name, controller->mapping->Btn_DPad_Left);
+		controller->init();
+
+		return 0;
 	}
 
 	bool input_evdev_handle(EvdevController* controller, u32 port)
diff --git a/core/linux-dist/main.cpp b/core/linux-dist/main.cpp
index b8b45bea..0d1f83e3 100755
--- a/core/linux-dist/main.cpp
+++ b/core/linux-dist/main.cpp
@@ -138,11 +138,16 @@ void SetupInput()
 				size_needed = snprintf(NULL, 0, EVDEV_MAPPING_CONFIG_KEY, port+1) + 1;
 				evdev_config_key = (char*)malloc(size_needed);
 				sprintf(evdev_config_key, EVDEV_MAPPING_CONFIG_KEY, port+1);
-				const char* mapping = (cfgExists("input", evdev_config_key) == 2 ? cfgLoadStr("input", evdev_config_key, "").c_str() : NULL);
+				
+				// fix bug with dangling pointer to a possibly destructed temporary string returned by c_str()
+				if (cfgExists("input", evdev_config_key) == 2) {
+					std::string cfgName = cfgLoadStr("input", evdev_config_key, "");
+					input_evdev_init(&evdev_controllers[port], evdev_device, cfgName.c_str());
+				} else {
+					input_evdev_init(&evdev_controllers[port], evdev_device, NULL);
+				}
+				
 				free(evdev_config_key);
-
-				input_evdev_init(&evdev_controllers[port], evdev_device, mapping);
-
 				free(evdev_device);
 			}
 		}
@@ -164,7 +169,11 @@ void SetupInput()
 	#endif
 
 	#if defined(SUPPORT_X11)
-		input_x11_init();
+		#if defined(USE_EVDEV)
+			input_x11_init(&(evdev_controllers[0]));
+		#else
+			input_x11_init();
+		#endif
 	#endif
 
 	#if defined(USE_SDL)
diff --git a/core/linux-dist/main.h b/core/linux-dist/main.h
index a4d72aa8..7865dc69 100644
--- a/core/linux-dist/main.h
+++ b/core/linux-dist/main.h
@@ -27,6 +27,8 @@ enum DreamcastController
 	DC_DPAD2_DOWN  = 1<<13,
 	DC_DPAD2_LEFT  = 1<<14,
 	DC_DPAD2_RIGHT = 1<<15,
+	COMPAT_T_LEFT  = 1<<16,
+	COMPAT_T_RIGHT = 1<<17,
 
 	DC_AXIS_LT = 0X10000,
 	DC_AXIS_RT = 0X10001,
diff --git a/core/linux-dist/x11.cpp b/core/linux-dist/x11.cpp
index 4a88ccff..61bcca31 100644
--- a/core/linux-dist/x11.cpp
+++ b/core/linux-dist/x11.cpp
@@ -1,5 +1,6 @@
 #if defined(SUPPORT_X11)
 #include <map>
+#include <X11/XKBlib.h>
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 #include <X11/Xutil.h>
@@ -118,44 +119,97 @@
 					else
 					{
 						int dc_key = x11_keymap[e.xkey.keycode];
+						// replaced hardcoded controller index (0) with a variable (where should we get it from though?..)
+						const int controllerIdx = 0;
 						if (e.type == KeyPress)
 						{
-							kcode[0] &= ~dc_key;
+							kcode[controllerIdx] &= ~dc_key;
 						}
 						else
 						{
-							kcode[0] |= dc_key;
+							kcode[controllerIdx] |= dc_key;
 						}
+						if (dc_key == COMPAT_T_RIGHT) {
+							rt[controllerIdx] = 255 * (e.type == KeyPress);
+						}
+						if (dc_key == COMPAT_T_LEFT) {
+							lt[controllerIdx] = 255 * (e.type == KeyPress);
+						}
+						
+						if (dc_key == DC_DPAD2_RIGHT || dc_key == DC_DPAD2_LEFT) {
+							if (e.type == KeyPress) {
+								joyx[controllerIdx] = (dc_key == DC_DPAD2_RIGHT) ? 127 : -128;
+							} else {
+								joyx[controllerIdx] = 0;
+							}
+						}
+						
+						if (dc_key == DC_DPAD2_DOWN || dc_key == DC_DPAD2_UP) {
+							if (e.type == KeyPress) {
+								joyy[controllerIdx] = (dc_key == DC_DPAD2_DOWN) ? 127 : -128;
+							} else {
+								joyy[controllerIdx] = 0;
+							}
+						}
+
+						printf("KEY: %d -> %d: %d\n",e.xkey.keycode, dc_key, x11_dc_buttons );
 					}
-					//printf("KEY: %d -> %d: %d\n",e.xkey.keycode, dc_key, x11_dc_buttons );
 					break;
 			}
 		}
 	}
 }
 
-void input_x11_init()
-{
-	x11_keymap[113] = DC_DPAD_LEFT;
-	x11_keymap[114] = DC_DPAD_RIGHT;
-
-	x11_keymap[111] = DC_DPAD_UP;
-	x11_keymap[116] = DC_DPAD_DOWN;
-
-	x11_keymap[53] = DC_BTN_X;
-	x11_keymap[54] = DC_BTN_B;
-	x11_keymap[55] = DC_BTN_A;
+// todo: find out when USE_EVDEV is not defined and if supporting it makes sense at all
+#if defined(USE_EVDEV)
+	void input_x11_init(EvdevController *cntrl)
+	{
+		x11_keymap[cntrl->mapping->Btn_DPad_Left] = DC_DPAD_LEFT;
+		x11_keymap[cntrl->mapping->Btn_DPad_Right] = DC_DPAD_RIGHT;
+		x11_keymap[cntrl->mapping->Btn_DPad_Up] = DC_DPAD_UP;
+		x11_keymap[cntrl->mapping->Btn_DPad_Down] = DC_DPAD_DOWN;
+	
+		x11_keymap[cntrl->mapping->Btn_DPad2_Left] = DC_DPAD2_LEFT;
+		x11_keymap[cntrl->mapping->Btn_DPad2_Right] = DC_DPAD2_RIGHT;
+		x11_keymap[cntrl->mapping->Btn_DPad2_Up] = DC_DPAD2_UP;
+		x11_keymap[cntrl->mapping->Btn_DPad2_Down] = DC_DPAD2_DOWN;
+
+		x11_keymap[cntrl->mapping->Btn_X] = DC_BTN_X;
+		x11_keymap[cntrl->mapping->Btn_B] = DC_BTN_B;
+		x11_keymap[cntrl->mapping->Btn_A] = DC_BTN_A;
+		x11_keymap[cntrl->mapping->Btn_Y] = DC_BTN_Y;
 
-	/*
-	//TODO: Fix sliders
-	x11_keymap[38] = DPad_Down;
-	x11_keymap[39] = DPad_Down;
-	*/
+		x11_keymap[cntrl->mapping->Btn_Trigger_Right] = COMPAT_T_RIGHT;
+		x11_keymap[cntrl->mapping->Btn_Trigger_Left] = COMPAT_T_LEFT;
 
-	x11_keymap[36] = DC_BTN_START;
+		x11_keymap[cntrl->mapping->Btn_Start] = DC_BTN_START;
 
-	x11_keyboard_input = cfgLoadInt("input", "enable_x11_keyboard", 1);
-}
+		x11_keyboard_input = cfgLoadInt("input", "enable_x11_keyboard", 1);
+	}
+#else
+	void input_x11_init() 
+	{ 
+	  x11_keymap[113] = DC_DPAD_LEFT; 
+	  x11_keymap[114] = DC_DPAD_RIGHT; 
+	 
+	  x11_keymap[111] = DC_DPAD_UP; 
+	  x11_keymap[116] = DC_DPAD_DOWN; 
+	 
+	  x11_keymap[53] = DC_BTN_X; 
+	  x11_keymap[54] = DC_BTN_B; 
+	  x11_keymap[55] = DC_BTN_A; 
+	 
+	  /* 
+	  //TODO: Fix sliders 
+	  x11_keymap[38] = DPad_Down; 
+	  x11_keymap[39] = DPad_Down; 
+	  */ 
+	 
+	  x11_keymap[36] = DC_BTN_START; 
+	 
+	  x11_keyboard_input = cfgLoadInt("input", "enable_x11_keyboard", 1); 
+	} 
+#endif
 
 void x11_window_create()
 {
@@ -273,6 +327,9 @@
 		// Creates the X11 window
 		x11Window = XCreateWindow(x11Display, RootWindow(x11Display, x11Screen), (ndcid%3)*640, (ndcid/3)*480, x11_width, x11_height,
 			0, depth, InputOutput, x11Visual->visual, ui32Mask, &sWA);
+			
+		Bool temp;
+		XkbSetDetectableAutoRepeat(x11Display, True, &temp);
 		
  		// Capture the close window event
 		wmDeleteMessage = XInternAtom(x11Display, "WM_DELETE_WINDOW", False);
diff --git a/core/linux-dist/x11.h b/core/linux-dist/x11.h
index dcb05687..675b2e90 100644
--- a/core/linux-dist/x11.h
+++ b/core/linux-dist/x11.h
@@ -1,7 +1,14 @@
 #pragma once
 
 extern void* x11_glc;
-extern void input_x11_init();
+
+#if defined(USE_EVDEV)
+	#include "linux-dist/evdev.h"
+	extern void input_x11_init(EvdevController *cntrl);
+#else
+	extern void input_x11_init();
+#endif
+
 extern void input_x11_handle();
 extern void x11_window_create();
 extern void x11_window_set_text(const char* text);
