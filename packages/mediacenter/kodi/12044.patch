From 0d4722a118507fd4dbb346a27824d35a5490471e Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 1 May 2017 16:40:59 +0200
Subject: [PATCH 1/4] [PVR] Cleanup: Remove unused class CPVRPersistGroupJob.
 Remove empty IJobCallback implementation from class CPVRChannelGroup.

---
 xbmc/pvr/channels/PVRChannelGroup.cpp |  5 -----
 xbmc/pvr/channels/PVRChannelGroup.h   | 17 -----------------
 2 files changed, 22 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannelGroup.cpp b/xbmc/pvr/channels/PVRChannelGroup.cpp
index 567b611..45c020b 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.cpp
+++ b/xbmc/pvr/channels/PVRChannelGroup.cpp
@@ -993,11 +993,6 @@ void CPVRChannelGroup::OnSettingChanged(const CSetting *setting)
   }
 }
 
-bool CPVRPersistGroupJob::DoWork(void)
-{
-  return m_group->Persist();
-}
-
 int CPVRChannelGroup::GetEPGNowOrNext(CFileItemList &results, bool bGetNext) const
 {
   int iInitialSize = results.Size();
diff --git a/xbmc/pvr/channels/PVRChannelGroup.h b/xbmc/pvr/channels/PVRChannelGroup.h
index 0b6986c..1d64950 100644
--- a/xbmc/pvr/channels/PVRChannelGroup.h
+++ b/xbmc/pvr/channels/PVRChannelGroup.h
@@ -20,7 +20,6 @@
  */
 
 #include "settings/lib/ISettingCallback.h"
-#include "utils/Job.h"
 
 #include "pvr/PVRTypes.h"
 #include "pvr/channels/PVRChannel.h"
@@ -61,7 +60,6 @@ namespace PVR
 
   /** A group of channels */
   class CPVRChannelGroup : public Observable,
-                           public IJobCallback,
                            public ISettingCallback
 
   {
@@ -370,8 +368,6 @@ namespace PVR
      */
     void ResetChannelNumberCache(void);
 
-    void OnJobComplete(unsigned int jobID, bool success, CJob* job) override {}
-
     /*!
      * @brief Get all EPG tables.
      * @param results The fileitem list to store the results in.
@@ -527,17 +523,4 @@ namespace PVR
      */
     int GetEPGNowOrNext(CFileItemList &results, bool bGetNext) const;
   };
-
-  class CPVRPersistGroupJob : public CJob
-  {
-  public:
-    CPVRPersistGroupJob(const CPVRChannelGroupPtr &group): m_group(group) {}
-    virtual ~CPVRPersistGroupJob() {}
-    const char *GetType() const { return "pvr-channelgroup-persist"; }
-
-    virtual bool DoWork();
-
-  private:
-    CPVRChannelGroupPtr m_group;
-  };
 }

From 76808b3aa503f7206d077438f88b99c542133678 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 1 May 2017 17:40:39 +0200
Subject: [PATCH 2/4] [PVR] Cleanup: Use 'override' whenever possible. Use
 'virtual' only if it actually makes sense. Make stuff 'private' if it is
 class internally only.

---
 xbmc/pvr/PVRDatabase.h                        | 23 ++++----
 xbmc/pvr/PVRJobs.h                            | 32 +++++------
 xbmc/pvr/channels/PVRChannel.h                |  4 +-
 xbmc/pvr/channels/PVRChannelGroupInternal.h   | 28 ++++-----
 xbmc/pvr/channels/PVRRadioRDSInfoTag.h        |  4 +-
 xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h   | 21 +++----
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h | 62 ++++++++++----------
 xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h    |  9 ++-
 xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h   | 14 ++---
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h      |  1 +
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h    |  9 +--
 xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h   | 12 ++--
 xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h  |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h  | 14 ++---
 xbmc/pvr/epg/Epg.h                            |  2 +-
 xbmc/pvr/epg/EpgContainer.h                   |  3 +-
 xbmc/pvr/epg/EpgDatabase.h                    | 35 ++++++------
 xbmc/pvr/epg/EpgInfoTag.h                     |  2 +-
 xbmc/pvr/recordings/PVRRecordings.h           | 82 +++++++++++++--------------
 xbmc/pvr/timers/PVRTimerInfoTag.h             |  2 +-
 xbmc/pvr/windows/GUIViewStatePVR.h            | 17 +++---
 xbmc/pvr/windows/GUIWindowPVRBase.h           |  4 +-
 22 files changed, 191 insertions(+), 191 deletions(-)

diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index 5f44d5a..5a12597 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -50,19 +50,19 @@ namespace PVR
      * @brief Open the database.
      * @return True if it was opened successfully, false otherwise.
      */
-    virtual bool Open();
+    bool Open() override;
 
     /*!
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    virtual int GetSchemaVersion() const { return 30; };
+    int GetSchemaVersion() const override { return 30; };
 
     /*!
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char *GetBaseDBName() const { return "TV"; };
+    const char *GetBaseDBName() const override { return "TV"; };
 
     /*! @name Channel methods */
     //@{
@@ -180,21 +180,20 @@ namespace PVR
     /*!
      * @brief Create the PVR database tables.
      */
-    void CreateTables();
-    void CreateAnalytics();
+    void CreateTables() override;
+    void CreateAnalytics() override;
+    /*!
+     * @brief Update an old version of the database.
+     * @param version The version to update the database from.
+     */
+    void UpdateTables(int version) override;
+    int GetMinSchemaVersion() const override { return 11; }
 
     bool DeleteChannelsFromGroup(const CPVRChannelGroup &group, const std::vector<int> &channelsToDelete);
 
     bool GetCurrentGroupMembers(const CPVRChannelGroup &group, std::vector<int> &members);
     bool RemoveStaleChannelsFromGroup(const CPVRChannelGroup &group);
 
-    /*!
-     * @brief Update an old version of the database.
-     * @param version The version to update the database from.
-     */
-    void UpdateTables(int version);
-    virtual int GetMinSchemaVersion() const { return 11; }
-
     bool PersistGroupMembers(const CPVRChannelGroup &group);
 
     bool PersistChannels(CPVRChannelGroup &group);
diff --git a/xbmc/pvr/PVRJobs.h b/xbmc/pvr/PVRJobs.h
index e566062..20e1020 100644
--- a/xbmc/pvr/PVRJobs.h
+++ b/xbmc/pvr/PVRJobs.h
@@ -85,9 +85,9 @@ namespace PVR
   public:
     CPVRStartupJob(void) = default;
     virtual ~CPVRStartupJob() = default;
-    virtual const char *GetType() const { return "pvr-startup"; }
+    const char *GetType() const override { return "pvr-startup"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVREpgsCreateJob : public CJob
@@ -95,9 +95,9 @@ namespace PVR
   public:
     CPVREpgsCreateJob(void) = default;
     virtual ~CPVREpgsCreateJob() = default;
-    virtual const char *GetType() const { return "pvr-create-epgs"; }
+    const char *GetType() const override { return "pvr-create-epgs"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVRRecordingsUpdateJob : public CJob
@@ -105,9 +105,9 @@ namespace PVR
   public:
     CPVRRecordingsUpdateJob(void) = default;
     virtual ~CPVRRecordingsUpdateJob() = default;
-    virtual const char *GetType() const { return "pvr-update-recordings"; }
+    const char *GetType() const override { return "pvr-update-recordings"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVRTimersUpdateJob : public CJob
@@ -115,9 +115,9 @@ namespace PVR
   public:
     CPVRTimersUpdateJob(void) = default;
     virtual ~CPVRTimersUpdateJob() = default;
-    virtual const char *GetType() const { return "pvr-update-timers"; }
+    const char *GetType() const override { return "pvr-update-timers"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVRChannelsUpdateJob : public CJob
@@ -125,9 +125,9 @@ namespace PVR
   public:
     CPVRChannelsUpdateJob(void) = default;
     virtual ~CPVRChannelsUpdateJob() = default;
-    virtual const char *GetType() const { return "pvr-update-channels"; }
+    const char *GetType() const override { return "pvr-update-channels"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVRChannelGroupsUpdateJob : public CJob
@@ -135,9 +135,9 @@ namespace PVR
   public:
     CPVRChannelGroupsUpdateJob(void) = default;
     virtual ~CPVRChannelGroupsUpdateJob() = default;
-    virtual const char *GetType() const { return "pvr-update-channelgroups"; }
+    const char *GetType() const override { return "pvr-update-channelgroups"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVRSearchMissingChannelIconsJob : public CJob
@@ -145,9 +145,9 @@ namespace PVR
   public:
     CPVRSearchMissingChannelIconsJob(void) = default;
     virtual ~CPVRSearchMissingChannelIconsJob() = default;
-    virtual const char *GetType() const { return "pvr-search-missing-channel-icons"; }
+    const char *GetType() const override { return "pvr-search-missing-channel-icons"; }
 
-    bool DoWork();
+    bool DoWork() override;
   };
 
   class CPVRClientConnectionJob : public CJob
@@ -156,9 +156,9 @@ namespace PVR
     CPVRClientConnectionJob(CPVRClient *client, std::string connectString, PVR_CONNECTION_STATE state, std::string message)
     : m_client(client), m_connectString(connectString), m_state(state), m_message(message) {}
     virtual ~CPVRClientConnectionJob() = default;
-    virtual const char *GetType() const { return "pvr-client-connection"; }
+    const char *GetType() const override { return "pvr-client-connection"; }
 
-    virtual bool DoWork();
+    bool DoWork() override;
   private:
     CPVRClient *m_client;
     std::string m_connectString;
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index ed3cda3..d487559 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -63,7 +63,7 @@ namespace PVR
     bool operator ==(const CPVRChannel &right) const;
     bool operator !=(const CPVRChannel &right) const;
 
-    virtual void Serialize(CVariant& value) const;
+    void Serialize(CVariant& value) const override;
 
     /*! @name XBMC related channel methods
      */
@@ -337,7 +337,7 @@ namespace PVR
      */
     std::string Path(void) const;
 
-    virtual void ToSortable(SortItem& sortable, Field field) const;
+    void ToSortable(SortItem& sortable, Field field) const override;
 
     /*!
      * @brief Update the path this channel got added to the internal group
diff --git a/xbmc/pvr/channels/PVRChannelGroupInternal.h b/xbmc/pvr/channels/PVRChannelGroupInternal.h
index 0c60ba6..041e295 100644
--- a/xbmc/pvr/channels/PVRChannelGroupInternal.h
+++ b/xbmc/pvr/channels/PVRChannelGroupInternal.h
@@ -50,7 +50,7 @@ namespace PVR
      * @brief The amount of channels in this container.
      * @return The amount of channels in this container.
      */
-    size_t GetNumHiddenChannels() const { return m_iHiddenChannels; }
+    size_t GetNumHiddenChannels() const override { return m_iHiddenChannels; }
 
     /*!
      * @brief Callback for add-ons to update a channel.
@@ -62,27 +62,27 @@ namespace PVR
     /*!
      * @see CPVRChannelGroup::IsGroupMember
      */
-    bool IsGroupMember(const CPVRChannelPtr &channel) const;
+    bool IsGroupMember(const CPVRChannelPtr &channel) const override;
 
     /*!
      * @see CPVRChannelGroup::AddToGroup
      */
-    bool AddToGroup(const CPVRChannelPtr &channel, int iChannelNumber = 0);
+    bool AddToGroup(const CPVRChannelPtr &channel, int iChannelNumber = 0) override;
 
     /*!
      * @see CPVRChannelGroup::RemoveFromGroup
      */
-    bool RemoveFromGroup(const CPVRChannelPtr &channel);
+    bool RemoveFromGroup(const CPVRChannelPtr &channel) override;
 
     /*!
      * @see CPVRChannelGroup::MoveChannel
      */
-    bool MoveChannel(unsigned int iOldChannelNumber, unsigned int iNewChannelNumber, bool bSaveInDb = true);
+    bool MoveChannel(unsigned int iOldChannelNumber, unsigned int iNewChannelNumber, bool bSaveInDb = true) override;
 
     /*!
      * @see CPVRChannelGroup::GetMembers
      */
-    int GetMembers(CFileItemList &results, bool bGroupMembers = true) const;
+    int GetMembers(CFileItemList &results, bool bGroupMembers = true) const override;
 
     /*!
      * @brief Check whether the group name is still correct after the language setting changed.
@@ -94,7 +94,7 @@ namespace PVR
      * @brief bForce Create the tables, even if they already have been created before.
      * @return True if all tables were created successfully, false otherwise.
      */
-    bool CreateChannelEpgs(bool bForce = false);
+    bool CreateChannelEpgs(bool bForce = false) override;
 
   protected:
     /*!
@@ -102,19 +102,19 @@ namespace PVR
      * @param bCompress Compress the database after changing anything.
      * @return The amount of channels that were loaded.
      */
-    int LoadFromDb(bool bCompress = false);
+    int LoadFromDb(bool bCompress = false) override;
 
     /*!
      * @brief Load all channels from the clients.
      * @return True when updated successfully, false otherwise.
      */
-    bool LoadFromClients(void);
+    bool LoadFromClients(void) override;
 
     /*!
      * @brief Check if this group is the internal group containing all channels.
      * @return True if it's the internal group, false otherwise.
      */
-    bool IsInternalGroup(void) const { return true; }
+    bool IsInternalGroup(void) const override { return true; }
 
     /*!
      * @brief Update the current channel list with the given list.
@@ -125,14 +125,14 @@ namespace PVR
      * @param channels The channels to use to update this list.
      * @return True if everything went well, false otherwise.
      */
-    bool UpdateGroupEntries(const CPVRChannelGroup &channels);
+    bool UpdateGroupEntries(const CPVRChannelGroup &channels) override;
 
-    bool AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers);
+    bool AddAndUpdateChannels(const CPVRChannelGroup &channels, bool bUseBackendChannelNumbers) override;
 
     /*!
      * @brief Refresh the channel list from the clients.
      */
-    bool Update(void);
+    bool Update(void) override;
 
     /*!
      * @brief Load the channels from the database.
@@ -142,7 +142,7 @@ namespace PVR
      *
      * @return True when loaded successfully, false otherwise.
      */
-    bool Load(void);
+    bool Load(void) override;
 
     /*!
      * @brief Update the vfs paths of all channels.
diff --git a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
index 024fab7..6e55fe6 100644
--- a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
+++ b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
@@ -67,8 +67,8 @@ class CPVRRadioRDSInfoTag : public IArchivable, public ISerializable
   bool operator ==(const CPVRRadioRDSInfoTag& tag) const;
   bool operator !=(const CPVRRadioRDSInfoTag& tag) const;
 
-  virtual void Archive(CArchive& ar);
-  virtual void Serialize(CVariant& value) const;
+  void Archive(CArchive& ar) override;
+  void Serialize(CVariant& value) const override;
 
   void Clear();
   void ResetSongInformation();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
index c23ccf6..2bfae5f 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelGuide.h
@@ -33,24 +33,25 @@ namespace PVR
   public:
     CGUIDialogPVRChannelGuide(void);
     virtual ~CGUIDialogPVRChannelGuide(void);
-    virtual bool OnMessage(CGUIMessage& message);
-    virtual void OnWindowLoaded();
-    virtual void OnWindowUnload();
-    virtual void Open(const CPVRChannelPtr &channel);
+    bool OnMessage(CGUIMessage& message) override;
+    void OnWindowLoaded() override;
+    void OnWindowUnload() override;
 
-  protected:
-    virtual void OnInitWindow();
-    virtual void OnDeinitWindow(int nextWindowID);
+    void Open(const CPVRChannelPtr &channel);
 
-    void ShowInfo(int iItem);
-    void Clear();
+  protected:
+    void OnInitWindow() override;
+    void OnDeinitWindow(int nextWindowID) override;
 
-    CGUIControl *GetFirstFocusableControl(int id);
+    CGUIControl *GetFirstFocusableControl(int id) override;
 
     std::unique_ptr<CFileItemList> m_vecItems;
     CGUIViewControl m_viewControl;
 
   private:
+    void ShowInfo(int iItem);
+    void Clear();
+
     CPVRChannelPtr m_channel;
   };
 }
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index 129362b..387d3b8 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -35,40 +35,16 @@ namespace PVR
   public:
     CGUIDialogPVRChannelManager(void);
     virtual ~CGUIDialogPVRChannelManager(void);
-    virtual bool OnMessage(CGUIMessage& message);
-    virtual bool OnAction(const CAction& action);
-    virtual void OnWindowLoaded(void);
-    virtual void OnWindowUnload(void);
-    virtual bool HasListItems() const { return true; };
-    virtual CFileItemPtr GetCurrentListItem(int offset = 0);
+    bool OnMessage(CGUIMessage& message) override;
+    bool OnAction(const CAction& action) override;
+    void OnWindowLoaded(void) override;
+    void OnWindowUnload(void) override;
+    bool HasListItems() const override{ return true; };
+    CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
   protected:
-    virtual void OnInitWindow();
-    virtual void OnDeinitWindow(int nextWindowID);
-
-    virtual bool OnPopupMenu(int iItem);
-    virtual bool OnContextButton(int itemNumber, CONTEXT_BUTTON button);
-
-    virtual bool OnActionMove(const CAction &action);
-
-    virtual bool OnMessageClick(CGUIMessage &message);
-
-    virtual bool OnClickListChannels(CGUIMessage &message);
-    virtual bool OnClickButtonOK(CGUIMessage &message);
-    virtual bool OnClickButtonApply(CGUIMessage &message);
-    virtual bool OnClickButtonCancel(CGUIMessage &message);
-    virtual bool OnClickButtonRadioTV(CGUIMessage &message);
-    virtual bool OnClickButtonRadioActive(CGUIMessage &message);
-    virtual bool OnClickButtonRadioParentalLocked(CGUIMessage &message);
-    virtual bool OnClickButtonEditName(CGUIMessage &message);
-    virtual bool OnClickButtonChannelLogo(CGUIMessage &message);
-    virtual bool OnClickButtonUseEPG(CGUIMessage &message);
-    virtual bool OnClickEPGSourceSpin(CGUIMessage &message);
-    virtual bool OnClickButtonGroupManager(CGUIMessage &message);
-    virtual bool OnClickButtonNewChannel();
-
-    virtual bool PersistChannel(const CFileItemPtr &pItem, const CPVRChannelGroupPtr &group, unsigned int *iChannelNumber);
-    virtual void SetItemsUnchanged(void);
+    void OnInitWindow() override;
+    void OnDeinitWindow(int nextWindowID) override;
 
   private:
     void Clear(void);
@@ -77,6 +53,28 @@ namespace PVR
     void Renumber(void);
     void SetData(int iItem);
     void RenameChannel(const CFileItemPtr &pItem);
+
+    bool OnPopupMenu(int iItem);
+    bool OnContextButton(int itemNumber, CONTEXT_BUTTON button);
+    bool OnActionMove(const CAction &action);
+    bool OnMessageClick(CGUIMessage &message);
+    bool OnClickListChannels(CGUIMessage &message);
+    bool OnClickButtonOK(CGUIMessage &message);
+    bool OnClickButtonApply(CGUIMessage &message);
+    bool OnClickButtonCancel(CGUIMessage &message);
+    bool OnClickButtonRadioTV(CGUIMessage &message);
+    bool OnClickButtonRadioActive(CGUIMessage &message);
+    bool OnClickButtonRadioParentalLocked(CGUIMessage &message);
+    bool OnClickButtonEditName(CGUIMessage &message);
+    bool OnClickButtonChannelLogo(CGUIMessage &message);
+    bool OnClickButtonUseEPG(CGUIMessage &message);
+    bool OnClickEPGSourceSpin(CGUIMessage &message);
+    bool OnClickButtonGroupManager(CGUIMessage &message);
+    bool OnClickButtonNewChannel();
+
+    bool PersistChannel(const CFileItemPtr &pItem, const CPVRChannelGroupPtr &group, unsigned int *iChannelNumber);
+    void SetItemsUnchanged(void);
+
     bool m_bIsRadio;
     bool m_bMovingMode;
     bool m_bContainsChanges;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
index 4c87125..1964a10 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelsOSD.h
@@ -52,18 +52,17 @@ namespace PVR
     void RestoreControlStates() override;
     void SaveControlStates() override;
     void SetInvalid() override;
+    CGUIControl *GetFirstFocusableControl(int id) override;
 
+  private:
     void GotoChannel(int iItem);
     void ShowInfo(int item);
     void Clear();
     void Update();
     CPVRChannelGroupPtr GetPlayingGroup();
-    CGUIControl *GetFirstFocusableControl(int id) override;
 
-    CFileItemList    *m_vecItems;
-    CGUIViewControl   m_viewControl;
-
-  private:
+    CFileItemList *m_vecItems;
+    CGUIViewControl m_viewControl;
     CPVRChannelGroupPtr m_group;
     std::map<int, std::string> m_groupSelectedItemPaths;
     void SaveSelectedItemPath(int iGroupID);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
index 44f19c8..df64eb7 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGroupManager.h
@@ -33,19 +33,19 @@ namespace PVR
   public:
     CGUIDialogPVRGroupManager(void);
     virtual ~CGUIDialogPVRGroupManager(void);
-    virtual bool OnMessage(CGUIMessage& message);
-    virtual void OnWindowLoaded();
-    virtual void OnWindowUnload();
+    bool OnMessage(CGUIMessage& message) override;
+    void OnWindowLoaded() override;
+    void OnWindowUnload() override;
+
     void SetRadio(bool bIsRadio);
 
   protected:
-    virtual void OnInitWindow();
-    virtual void OnDeinitWindow(int nextWindowID);
+    void OnInitWindow() override;
+    void OnDeinitWindow(int nextWindowID) override;
 
+  private:
     void Clear();
     void Update();
-
-  private:
     bool PersistChanges(void);
     bool CancelChanges(void);
     bool ActionButtonOk(CGUIMessage &message);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
index e173d9b..d7e9989 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
@@ -40,6 +40,7 @@ namespace PVR
   protected:
     void OnInitWindow() override;
 
+  private:
     bool OnClickButtonOK(CGUIMessage &message);
     bool OnClickButtonRecord(CGUIMessage &message);
     bool OnClickButtonPlay(CGUIMessage &message);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
index f099d67..f557458 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
@@ -31,17 +31,18 @@ namespace PVR
   public:
     CGUIDialogPVRGuideSearch(void);
     virtual ~CGUIDialogPVRGuideSearch(void) {}
-    virtual bool OnMessage(CGUIMessage& message);
-    virtual void OnWindowLoaded();
+    bool OnMessage(CGUIMessage& message) override;
+    void OnWindowLoaded() override;
 
     void SetFilterData(CPVREpgSearchFilter *searchFilter) { m_searchFilter = searchFilter; }
     bool IsConfirmed() const { return m_bConfirmed; }
     bool IsCanceled() const { return m_bCanceled; }
-    void OnSearch();
 
   protected:
-    virtual void OnInitWindow();
+    void OnInitWindow() override;
 
+  private:
+    void OnSearch();
     void UpdateChannelSpin(void);
     void UpdateGroupsSpin(void);
     void UpdateGenreSpin(void);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
index 68a8e84..b4c5187 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
@@ -28,17 +28,17 @@ namespace PVR
   public:
     CGUIDialogPVRRadioRDSInfo(void);
     virtual ~CGUIDialogPVRRadioRDSInfo(void) {}
-    virtual bool OnMessage(CGUIMessage& message);
-    virtual bool HasListItems() const { return true; };
-    virtual CFileItemPtr GetCurrentListItem(int offset = 0);
+    bool OnMessage(CGUIMessage& message) override;
+    bool HasListItems() const override { return true; };
+    CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
   protected:
-    virtual void OnInitWindow();
-    virtual void OnDeinitWindow(int nextWindowID);
+    void OnInitWindow() override;
+    void OnDeinitWindow(int nextWindowID) override;
 
+  private:
     CFileItemPtr m_rdsItem;
 
-  private:
     bool m_InfoPresent;
     bool m_LabelInfoNewsPresent;
     std::string m_LabelInfoNews;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
index 9cf5206..6fe0efc 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
@@ -37,7 +37,7 @@ namespace PVR
 
     static void ShowFor(const CFileItemPtr& item);
 
-  protected:
+  private:
     bool OnClickButtonOK(CGUIMessage &message);
     bool OnClickButtonPlay(CGUIMessage &message);
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
index 5a2cb95..6fdc2bc 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRTimerSettings.h
@@ -42,22 +42,22 @@ namespace PVR
     CGUIDialogPVRTimerSettings();
     virtual ~CGUIDialogPVRTimerSettings();
 
-    virtual bool CanBeActivated() const;
+    bool CanBeActivated() const override;
 
     void SetTimer(const CPVRTimerInfoTagPtr &timer);
 
   protected:
     // implementation of ISettingCallback
-    virtual void OnSettingChanged(const CSetting *setting);
-    virtual void OnSettingAction(const CSetting *setting);
+    void OnSettingChanged(const CSetting *setting) override;
+    void OnSettingAction(const CSetting *setting) override;
 
     // specialization of CGUIDialogSettingsBase
-    virtual bool AllowResettingSettings() const { return false; }
-    virtual void Save();
-    virtual void SetupView();
+    bool AllowResettingSettings() const override { return false; }
+    void Save() override;
+    void SetupView() override;
 
     // specialization of CGUIDialogSettingsManualBase
-    virtual void InitializeSettings();
+    void InitializeSettings() override;
     
   private:
     void InitializeTypesList();
diff --git a/xbmc/pvr/epg/Epg.h b/xbmc/pvr/epg/Epg.h
index d17f7e3..930467e 100644
--- a/xbmc/pvr/epg/Epg.h
+++ b/xbmc/pvr/epg/Epg.h
@@ -282,7 +282,7 @@ namespace PVR
      */
     bool IsValid(void) const;
 
-  protected:
+  private:
     CPVREpg(void);
 
     /*!
diff --git a/xbmc/pvr/epg/EpgContainer.h b/xbmc/pvr/epg/EpgContainer.h
index dc8c0d7..503c9c4 100644
--- a/xbmc/pvr/epg/EpgContainer.h
+++ b/xbmc/pvr/epg/EpgContainer.h
@@ -221,7 +221,7 @@ namespace PVR
      */
     void UpdateRequest(int clientID, unsigned int channelID);
 
-  protected:
+  private:
     /*!
      * @brief Load the EPG settings.
      * @return True if the settings were loaded successfully, false otherwise.
@@ -282,7 +282,6 @@ namespace PVR
     std::list<SUpdateRequest> m_updateRequests; /*!< list of update requests triggered by addon */
     CCriticalSection m_updateRequestsLock;      /*!< protect update requests */
 
-  private:
     bool m_bUpdateNotificationPending; /*!< true while an epg updated notification to observers is pending. */
     CPVRSettings m_settings;
   };
diff --git a/xbmc/pvr/epg/EpgDatabase.h b/xbmc/pvr/epg/EpgDatabase.h
index 9d98ee7..ef0fc89 100644
--- a/xbmc/pvr/epg/EpgDatabase.h
+++ b/xbmc/pvr/epg/EpgDatabase.h
@@ -48,19 +48,19 @@ namespace PVR
      * @brief Open the database.
      * @return True if it was opened successfully, false otherwise.
      */
-    virtual bool Open(void);
+    bool Open(void) override;
 
     /*!
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    virtual int GetSchemaVersion(void) const { return 11; };
+    int GetSchemaVersion(void) const override { return 11; };
 
     /*!
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char *GetBaseDBName(void) const { return "Epg"; };
+    const char *GetBaseDBName(void) const override { return "Epg"; };
 
     /*! @name EPG methods */
     //@{
@@ -69,42 +69,42 @@ namespace PVR
      * @brief Remove all EPG information from the database
      * @return True if the EPG information was erased, false otherwise.
      */
-    virtual bool DeleteEpg(void);
+    bool DeleteEpg(void);
 
     /*!
      * @brief Delete an EPG table.
      * @param table The table to remove.
      * @return True if the table was removed successfully, false otherwise.
      */
-    virtual bool Delete(const CPVREpg &table);
+    bool Delete(const CPVREpg &table);
 
     /*!
      * @brief Erase all EPG entries with an end time less than the given time.
      * @param maxEndTime The maximum allowed end time.
      * @return True if the entries were removed successfully, false otherwise.
      */
-    virtual bool DeleteEpgEntries(const CDateTime &maxEndTime);
+    bool DeleteEpgEntries(const CDateTime &maxEndTime);
 
     /*!
      * @brief Remove a single EPG entry.
      * @param tag The entry to remove.
      * @return True if it was removed successfully, false otherwise.
      */
-    virtual bool Delete(const CPVREpgInfoTag &tag);
+    bool Delete(const CPVREpgInfoTag &tag);
 
     /*!
      * @brief Get all EPG tables from the database. Does not get the EPG tables' entries.
      * @param container The container to fill.
      * @return The amount of entries that was added.
      */
-    virtual int Get(CPVREpgContainer &container);
+    int Get(CPVREpgContainer &container);
 
     /*!
      * @brief Get all EPG entries for a table.
      * @param epg The EPG table to get the entries for.
      * @return The amount of entries that was added.
      */
-    virtual int Get(CPVREpg &epg);
+    int Get(CPVREpg &epg);
 
     /*!
      * @brief Get the last stored EPG scan time.
@@ -112,7 +112,7 @@ namespace PVR
      * @param lastScan The last scan time or -1 if it wasn't found.
      * @return True if the time was fetched successfully, false otherwise.
      */
-    virtual bool GetLastEpgScanTime(int iEpgId, CDateTime *lastScan);
+    bool GetLastEpgScanTime(int iEpgId, CDateTime *lastScan);
 
     /*!
      * @brief Update the last scan time.
@@ -120,7 +120,7 @@ namespace PVR
      * @param bQueueWrite Don't execute the query immediately but queue it if true.
      * @return True if it was updated successfully, false otherwise.
      */
-    virtual bool PersistLastEpgScanTime(int iEpgId = 0, bool bQueueWrite = false);
+    bool PersistLastEpgScanTime(int iEpgId = 0, bool bQueueWrite = false);
 
     bool Persist(const EPGMAP &epgs);
 
@@ -130,7 +130,7 @@ namespace PVR
      * @param bQueueWrite Don't execute the query immediately but queue it if true.
      * @return The database ID of this entry or 0 if bSingleUpdate is false and the query was queued.
      */
-    virtual int Persist(const CPVREpg &epg, bool bQueueWrite = false);
+    int Persist(const CPVREpg &epg, bool bQueueWrite = false);
 
     /*!
      * @brief Persist an infotag.
@@ -138,7 +138,7 @@ namespace PVR
      * @param bSingleUpdate If true, this is a single update and the query will be executed immediately.
      * @return The database ID of this entry or 0 if bSingleUpdate is false and the query was queued.
      */
-    virtual int Persist(const CPVREpgInfoTag &tag, bool bSingleUpdate = true);
+    int Persist(const CPVREpgInfoTag &tag, bool bSingleUpdate = true);
 
     /*!
      * @return Last EPG id in the database
@@ -151,18 +151,19 @@ namespace PVR
     /*!
      * @brief Create the EPG database tables.
      */
-    virtual void CreateTables();
+    void CreateTables() override;
 
     /*!
      * @brief Create the EPG database analytics.
      */
-    virtual void CreateAnalytics();
+    void CreateAnalytics() override;
 
     /*!
      * @brief Update an old version of the database.
      * @param version The version to update the database from.
      */
-    virtual void UpdateTables(int version);
-    virtual int GetMinSchemaVersion() const { return 4; }
+    void UpdateTables(int version) override;
+
+    int GetMinSchemaVersion() const override { return 4; }
   };
 }
diff --git a/xbmc/pvr/epg/EpgInfoTag.h b/xbmc/pvr/epg/EpgInfoTag.h
index f37a6c8..0849bee 100644
--- a/xbmc/pvr/epg/EpgInfoTag.h
+++ b/xbmc/pvr/epg/EpgInfoTag.h
@@ -75,7 +75,7 @@ namespace PVR
     bool operator ==(const CPVREpgInfoTag& right) const;
     bool operator !=(const CPVREpgInfoTag& right) const;
 
-    virtual void Serialize(CVariant &value) const;
+    void Serialize(CVariant &value) const override;
 
     /*!
      * @brief Check if this event is currently active.
diff --git a/xbmc/pvr/recordings/PVRRecordings.h b/xbmc/pvr/recordings/PVRRecordings.h
index 22a3e8f..f74c949 100644
--- a/xbmc/pvr/recordings/PVRRecordings.h
+++ b/xbmc/pvr/recordings/PVRRecordings.h
@@ -33,47 +33,6 @@ namespace PVR
 
   class CPVRRecordings
   {
-  private:
-    typedef std::map<CPVRRecordingUid, CPVRRecordingPtr> PVR_RECORDINGMAP;
-    typedef PVR_RECORDINGMAP::iterator             PVR_RECORDINGMAP_ITR;
-    typedef PVR_RECORDINGMAP::const_iterator             PVR_RECORDINGMAP_CITR;
-
-    CCriticalSection             m_critSection;
-    bool                         m_bIsUpdating;
-    PVR_RECORDINGMAP             m_recordings;
-    unsigned int                 m_iLastId;
-    CVideoDatabase               m_database;
-    bool                         m_bDeletedTVRecordings;
-    bool                         m_bDeletedRadioRecordings;
-    unsigned int                 m_iTVRecordings;
-    unsigned int                 m_iRadioRecordings;
-
-    virtual void UpdateFromClients(void);
-    virtual std::string TrimSlashes(const std::string &strOrig) const;
-    virtual bool IsDirectoryMember(const std::string &strDirectory, const std::string &strEntryDirectory, bool bGrouped) const;
-    virtual void GetSubDirectories(const CPVRRecordingsPath &recParentPath, CFileItemList *results);
-
-    /**
-     * @brief recursively deletes all recordings in the specified directory
-     * @param item the directory
-     * @return true if all recordings were deleted
-     */
-    bool DeleteDirectory(const CFileItem &item);
-    bool DeleteRecording(const CFileItem &item);
-
-    /**
-     * @brief special value for parameter count of method ChangeRecordingsPlayCount
-     */
-    static const int INCREMENT_PLAY_COUNT = -1;
-
-    /**
-     * @brief change the playcount of the given recording or recursively of all children of the given recordings folder
-     * @param item the recording or directory containing recordings
-     * @param count the new playcount or INCREMENT_PLAY_COUNT to denote that the current playcount(s) are to be incremented by one
-     * @return true if all playcounts were changed
-     */
-    bool ChangeRecordingsPlayCount(const CFileItemPtr &item, int count);
-
   public:
     CPVRRecordings(void);
     virtual ~CPVRRecordings(void);
@@ -117,5 +76,46 @@ namespace PVR
      * @return The requested recording, or an empty recordingptr if none was found.
      */
     CPVRRecordingPtr GetRecordingForEpgTag(const CPVREpgInfoTagPtr &epgTag) const;
+
+  private:
+    typedef std::map<CPVRRecordingUid, CPVRRecordingPtr> PVR_RECORDINGMAP;
+    typedef PVR_RECORDINGMAP::iterator PVR_RECORDINGMAP_ITR;
+    typedef PVR_RECORDINGMAP::const_iterator PVR_RECORDINGMAP_CITR;
+
+    CCriticalSection m_critSection;
+    bool m_bIsUpdating;
+    PVR_RECORDINGMAP m_recordings;
+    unsigned int m_iLastId;
+    CVideoDatabase m_database;
+    bool m_bDeletedTVRecordings;
+    bool m_bDeletedRadioRecordings;
+    unsigned int m_iTVRecordings;
+    unsigned int m_iRadioRecordings;
+
+    void UpdateFromClients(void);
+    std::string TrimSlashes(const std::string &strOrig) const;
+    bool IsDirectoryMember(const std::string &strDirectory, const std::string &strEntryDirectory, bool bGrouped) const;
+    void GetSubDirectories(const CPVRRecordingsPath &recParentPath, CFileItemList *results);
+
+    /**
+     * @brief recursively deletes all recordings in the specified directory
+     * @param item the directory
+     * @return true if all recordings were deleted
+     */
+    bool DeleteDirectory(const CFileItem &item);
+    bool DeleteRecording(const CFileItem &item);
+
+    /**
+     * @brief special value for parameter count of method ChangeRecordingsPlayCount
+     */
+    static const int INCREMENT_PLAY_COUNT = -1;
+
+    /**
+     * @brief change the playcount of the given recording or recursively of all children of the given recordings folder
+     * @param item the recording or directory containing recordings
+     * @param count the new playcount or INCREMENT_PLAY_COUNT to denote that the current playcount(s) are to be incremented by one
+     * @return true if all playcounts were changed
+     */
+    bool ChangeRecordingsPlayCount(const CFileItemPtr &item, int count);    
   };
 }
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index c212a39..290b168 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -71,7 +71,7 @@ namespace PVR
     bool operator ==(const CPVRTimerInfoTag& right) const;
     bool operator !=(const CPVRTimerInfoTag& right) const;
 
-    virtual void Serialize(CVariant &value) const;
+    void Serialize(CVariant &value) const override;
 
     void UpdateSummary(void);
 
diff --git a/xbmc/pvr/windows/GUIViewStatePVR.h b/xbmc/pvr/windows/GUIViewStatePVR.h
index 2d8a1be..bd288dd 100644
--- a/xbmc/pvr/windows/GUIViewStatePVR.h
+++ b/xbmc/pvr/windows/GUIViewStatePVR.h
@@ -29,7 +29,8 @@ namespace PVR
     CGUIViewStatePVR(const int windowId, const CFileItemList& items) : CGUIViewState(items) { m_windowId = windowId; }
 
   protected:
-    virtual bool HideParentDirItems(void) { return true; };
+    bool HideParentDirItems(void) override { return true; }
+
     int m_windowId;
   };
 
@@ -39,7 +40,7 @@ namespace PVR
     CGUIViewStateWindowPVRChannels(const int windowId, const CFileItemList& items);
 
   protected:
-    virtual void SaveViewState();
+    void SaveViewState() override;
   };
 
   class CGUIViewStateWindowPVRRecordings : public CGUIViewStatePVR
@@ -48,8 +49,8 @@ namespace PVR
     CGUIViewStateWindowPVRRecordings(const int windowId, const CFileItemList& items);
 
   protected:
-    virtual void SaveViewState();
-    virtual bool HideParentDirItems(void);
+    void SaveViewState() override;
+    bool HideParentDirItems(void) override;
   };
 
   class CGUIViewStateWindowPVRGuide : public CGUIViewStatePVR
@@ -58,7 +59,7 @@ namespace PVR
     CGUIViewStateWindowPVRGuide(const int windowId, const CFileItemList& items);
 
   protected:
-    virtual void SaveViewState();
+    void SaveViewState() override;
   };
 
   class CGUIViewStateWindowPVRTimers : public CGUIViewStatePVR
@@ -67,8 +68,8 @@ namespace PVR
     CGUIViewStateWindowPVRTimers(const int windowId, const CFileItemList& items);
 
   protected:
-    virtual void SaveViewState();
-    virtual bool HideParentDirItems(void);
+    void SaveViewState() override;
+    bool HideParentDirItems(void) override;
   };
 
   class CGUIViewStateWindowPVRSearch : public CGUIViewStatePVR
@@ -77,6 +78,6 @@ namespace PVR
     CGUIViewStateWindowPVRSearch(const int windowId, const CFileItemList& items);
 
   protected:
-    virtual void SaveViewState();
+    void SaveViewState() override;
   };
 }
diff --git a/xbmc/pvr/windows/GUIWindowPVRBase.h b/xbmc/pvr/windows/GUIWindowPVRBase.h
index deb5635..342447d 100644
--- a/xbmc/pvr/windows/GUIWindowPVRBase.h
+++ b/xbmc/pvr/windows/GUIWindowPVRBase.h
@@ -69,8 +69,6 @@ namespace PVR
     void SetInvalid() override;
     bool CanBeActivated() const override;
 
-    virtual bool OpenChannelGroupSelectionDialog(void);
-
     static std::string GetSelectedItemPath(bool bRadio);
     static void SetSelectedItemPath(bool bRadio, const std::string &path);
 
@@ -118,6 +116,8 @@ namespace PVR
     bool m_bRadio;
 
   private:
+    bool OpenChannelGroupSelectionDialog(void);
+
     /*!
      * @brief Show or update the progress dialog.
      * @param strText The current status.

From 9f39beffb21c3606f2ccd2d1e1750148b20c33e5 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 1 May 2017 18:01:51 +0200
Subject: [PATCH 3/4] [PVR] Cleanup: Use '= default' and '= delete' whenever
 possible.

---
 xbmc/pvr/PVRDatabase.h                       |  4 ++--
 xbmc/pvr/PVRGUIActions.cpp                   |  2 +-
 xbmc/pvr/PVRGUIInfo.h                        |  8 ++++----
 xbmc/pvr/channels/PVRChannel.h               |  4 ++--
 xbmc/pvr/channels/PVRRadioRDSInfoTag.h       | 17 ++---------------
 xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h   |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h  |  2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h |  2 +-
 xbmc/pvr/epg/EpgContainer.cpp                |  4 ++--
 xbmc/pvr/epg/EpgDatabase.h                   |  4 ++--
 xbmc/pvr/recordings/PVRRecording.h           |  6 +++---
 xbmc/pvr/timers/PVRTimerInfoTag.h            |  4 ++--
 xbmc/pvr/windows/GUIWindowPVRSearch.h        |  2 +-
 xbmc/pvr/windows/GUIWindowPVRTimerRules.h    |  4 ++--
 14 files changed, 26 insertions(+), 39 deletions(-)

diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index 5a12597..b8db1b8 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -43,8 +43,8 @@ namespace PVR
     /*!
      * @brief Create a new instance of the PVR database.
      */
-    CPVRDatabase(void) {};
-    virtual ~CPVRDatabase(void) {};
+    CPVRDatabase(void) = default;
+    virtual ~CPVRDatabase(void) = default;
 
     /*!
      * @brief Open the database.
diff --git a/xbmc/pvr/PVRGUIActions.cpp b/xbmc/pvr/PVRGUIActions.cpp
index 8506dc9..729e85e 100644
--- a/xbmc/pvr/PVRGUIActions.cpp
+++ b/xbmc/pvr/PVRGUIActions.cpp
@@ -349,7 +349,7 @@ namespace PVR
     {
     public:
       InstantRecordingActionSelector(int iInstantRecordTime);
-      virtual ~InstantRecordingActionSelector() {}
+      virtual ~InstantRecordingActionSelector() = default;
 
       void AddAction(PVRRECORD_INSTANTRECORDACTION eAction, const std::string &title);
       void PreSelectAction(PVRRECORD_INSTANTRECORDACTION eAction);
diff --git a/xbmc/pvr/PVRGUIInfo.h b/xbmc/pvr/PVRGUIInfo.h
index d3688d6..6749183 100644
--- a/xbmc/pvr/PVRGUIInfo.h
+++ b/xbmc/pvr/PVRGUIInfo.h
@@ -93,7 +93,7 @@ namespace PVR
     {
     public:
       TimerInfo();
-      virtual ~TimerInfo() {}
+      virtual ~TimerInfo() = default;
 
       void ResetProperties();
 
@@ -145,7 +145,7 @@ namespace PVR
     class AnyTimerInfo : public TimerInfo
     {
     public:
-      AnyTimerInfo() {};
+      AnyTimerInfo() = default;
 
     private:
       int AmountActiveTimers() override;
@@ -157,7 +157,7 @@ namespace PVR
     class TVTimerInfo : public TimerInfo
     {
     public:
-      TVTimerInfo() {};
+      TVTimerInfo() = default;
 
     private:
       int AmountActiveTimers() override;
@@ -169,7 +169,7 @@ namespace PVR
     class RadioTimerInfo : public TimerInfo
     {
     public:
-      RadioTimerInfo() {};
+      RadioTimerInfo() = default;
 
     private:
       int AmountActiveTimers() override;
diff --git a/xbmc/pvr/channels/PVRChannel.h b/xbmc/pvr/channels/PVRChannel.h
index d487559..bbe9943 100644
--- a/xbmc/pvr/channels/PVRChannel.h
+++ b/xbmc/pvr/channels/PVRChannel.h
@@ -56,8 +56,8 @@ namespace PVR
     CPVRChannel(const PVR_CHANNEL &channel, unsigned int iClientId);
 
   private:
-    CPVRChannel(const CPVRChannel &tag); // intentionally not implemented.
-    CPVRChannel &operator=(const CPVRChannel &channel); // intentionally not implemented.
+    CPVRChannel(const CPVRChannel &tag) = delete;
+    CPVRChannel &operator=(const CPVRChannel &channel) = delete;
 
   public:
     bool operator ==(const CPVRChannel &right) const;
diff --git a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
index 6e55fe6..af764e3 100644
--- a/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
+++ b/xbmc/pvr/channels/PVRRadioRDSInfoTag.h
@@ -45,21 +45,8 @@ class CPVRRadioRDSInfoTag : public IArchivable, public ISerializable
    */
   CPVRRadioRDSInfoTag(void);
 
-  /*!
-   * @brief Prevent copy construction, even for CPVREpgInfoTag instances and friends.
-   * Note: Only declared, but intentionally not implemented
-   *       to prevent compiler generated copy ctor and to force.
-   *       a linker error in case somebody tries to call it.
-   */
-  CPVRRadioRDSInfoTag(const CPVRRadioRDSInfoTag& tag);
-
-  /*!
-   * @brief Prevent copy construction, even for CPVREpgInfoTag instances and friends.
-   * Note: Only declared, but intentionally not implemented
-   *       to prevent compiler generated copy ctor and to force.
-   *       a linker error in case somebody tries to call it.
-   */
-  const CPVRRadioRDSInfoTag& operator =(const CPVRRadioRDSInfoTag& tag);
+  CPVRRadioRDSInfoTag(const CPVRRadioRDSInfoTag& tag) = delete;
+  const CPVRRadioRDSInfoTag& operator =(const CPVRRadioRDSInfoTag& tag) = delete;
   
 public:
   virtual ~CPVRRadioRDSInfoTag();
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
index f557458..fff90a9 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideSearch.h
@@ -30,7 +30,7 @@ namespace PVR
   {
   public:
     CGUIDialogPVRGuideSearch(void);
-    virtual ~CGUIDialogPVRGuideSearch(void) {}
+    virtual ~CGUIDialogPVRGuideSearch(void) = default;
     bool OnMessage(CGUIMessage& message) override;
     void OnWindowLoaded() override;
 
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
index b4c5187..72da4ec 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
@@ -27,7 +27,7 @@ namespace PVR
   {
   public:
     CGUIDialogPVRRadioRDSInfo(void);
-    virtual ~CGUIDialogPVRRadioRDSInfo(void) {}
+    virtual ~CGUIDialogPVRRadioRDSInfo(void) = default;
     bool OnMessage(CGUIMessage& message) override;
     bool HasListItems() const override { return true; };
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
index 6fe0efc..4394089 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
@@ -27,7 +27,7 @@ namespace PVR
   {
   public:
     CGUIDialogPVRRecordingInfo(void);
-    virtual ~CGUIDialogPVRRecordingInfo(void) {}
+    virtual ~CGUIDialogPVRRecordingInfo(void) = default;
     bool OnMessage(CGUIMessage& message) override;
     bool OnInfo(int actionID) override;
     bool HasListItems() const override { return true; };
diff --git a/xbmc/pvr/epg/EpgContainer.cpp b/xbmc/pvr/epg/EpgContainer.cpp
index c5c8177..975465f 100644
--- a/xbmc/pvr/epg/EpgContainer.cpp
+++ b/xbmc/pvr/epg/EpgContainer.cpp
@@ -137,8 +137,8 @@ void CPVREpgContainer::Clear(bool bClearDb /* = false */)
 class CPVREpgContainerStartJob : public CJob
 {
 public:
-  CPVREpgContainerStartJob() {}
-  ~CPVREpgContainerStartJob(void) {}
+  CPVREpgContainerStartJob() = default;
+  virtual ~CPVREpgContainerStartJob(void) = default;
 
   bool DoWork(void)
   {
diff --git a/xbmc/pvr/epg/EpgDatabase.h b/xbmc/pvr/epg/EpgDatabase.h
index ef0fc89..6caf8d4 100644
--- a/xbmc/pvr/epg/EpgDatabase.h
+++ b/xbmc/pvr/epg/EpgDatabase.h
@@ -37,12 +37,12 @@ namespace PVR
     /*!
      * @brief Create a new instance of the EPG database.
      */
-    CPVREpgDatabase(void) {};
+    CPVREpgDatabase(void) = default;;
 
     /*!
      * @brief Destroy this instance.
      */
-    virtual ~CPVREpgDatabase(void) {};
+    virtual ~CPVREpgDatabase(void) = default;;
 
     /*!
      * @brief Open the database.
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index 3267453..01e687a 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -85,11 +85,11 @@ namespace PVR
     CPVRRecording(const PVR_RECORDING &recording, unsigned int iClientId);
 
   private:
-    CPVRRecording(const CPVRRecording &tag); // intentionally not implemented.
-    CPVRRecording &operator =(const CPVRRecording &other); // intentionally not implemented.
+    CPVRRecording(const CPVRRecording &tag) = delete;
+    CPVRRecording &operator =(const CPVRRecording &other) = delete;
 
   public:
-    virtual ~CPVRRecording() {};
+    virtual ~CPVRRecording() = default;
 
     bool operator ==(const CPVRRecording& right) const;
     bool operator !=(const CPVRRecording& right) const;
diff --git a/xbmc/pvr/timers/PVRTimerInfoTag.h b/xbmc/pvr/timers/PVRTimerInfoTag.h
index 290b168..04211d4 100644
--- a/xbmc/pvr/timers/PVRTimerInfoTag.h
+++ b/xbmc/pvr/timers/PVRTimerInfoTag.h
@@ -62,8 +62,8 @@ namespace PVR
     CPVRTimerInfoTag(const PVR_TIMER &timer, const CPVRChannelPtr &channel, unsigned int iClientId);
 
   private:
-    CPVRTimerInfoTag(const CPVRTimerInfoTag &tag); // intentionally not implemented.
-    CPVRTimerInfoTag &operator=(const CPVRTimerInfoTag &orig); // intentionally not implemented.
+    CPVRTimerInfoTag(const CPVRTimerInfoTag &tag) = delete;
+    CPVRTimerInfoTag &operator=(const CPVRTimerInfoTag &orig) = delete;
 
   public:
     virtual ~CPVRTimerInfoTag(void);
diff --git a/xbmc/pvr/windows/GUIWindowPVRSearch.h b/xbmc/pvr/windows/GUIWindowPVRSearch.h
index 49284e9..af82595 100644
--- a/xbmc/pvr/windows/GUIWindowPVRSearch.h
+++ b/xbmc/pvr/windows/GUIWindowPVRSearch.h
@@ -28,7 +28,7 @@ namespace PVR
   {
   public:
     CGUIWindowPVRSearchBase(bool bRadio, int id, const std::string &xmlFile);
-    virtual ~CGUIWindowPVRSearchBase() {};
+    virtual ~CGUIWindowPVRSearchBase() = default;
 
     bool OnMessage(CGUIMessage& message)  override;
     void GetContextButtons(int itemNumber, CContextButtons &buttons) override;
diff --git a/xbmc/pvr/windows/GUIWindowPVRTimerRules.h b/xbmc/pvr/windows/GUIWindowPVRTimerRules.h
index ac79c59..5f1a47e 100644
--- a/xbmc/pvr/windows/GUIWindowPVRTimerRules.h
+++ b/xbmc/pvr/windows/GUIWindowPVRTimerRules.h
@@ -29,7 +29,7 @@ namespace PVR
   {
   public:
     CGUIWindowPVRTVTimerRules();
-    virtual ~CGUIWindowPVRTVTimerRules() {};
+    virtual ~CGUIWindowPVRTVTimerRules() = default;
 
   protected:
     std::string GetDirectoryPath() override;
@@ -39,7 +39,7 @@ namespace PVR
   {
   public:
     CGUIWindowPVRRadioTimerRules();
-    virtual ~CGUIWindowPVRRadioTimerRules() {};
+    virtual ~CGUIWindowPVRRadioTimerRules() = default;
 
   protected:
     std::string GetDirectoryPath() override;

From 68ec6fec4e20e05f01761237df99bc9080945982 Mon Sep 17 00:00:00 2001
From: Kai Sommerfeld <kai.sommerfeld@gmx.com>
Date: Mon, 1 May 2017 18:07:24 +0200
Subject: [PATCH 4/4] [PVR] Cleanup: Remove superfluous semicolons.

---
 xbmc/pvr/PVRContextMenus.cpp                  | 2 +-
 xbmc/pvr/PVRDatabase.h                        | 4 ++--
 xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h | 2 +-
 xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h      | 2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h   | 2 +-
 xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h  | 2 +-
 xbmc/pvr/epg/EpgDatabase.h                    | 8 ++++----
 xbmc/pvr/recordings/PVRRecording.h            | 2 +-
 xbmc/pvr/timers/PVRTimers.cpp                 | 2 +-
 xbmc/pvr/windows/GUIEPGGridContainer.cpp      | 2 +-
 10 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/xbmc/pvr/PVRContextMenus.cpp b/xbmc/pvr/PVRContextMenus.cpp
index 3029efd..644e275 100644
--- a/xbmc/pvr/PVRContextMenus.cpp
+++ b/xbmc/pvr/PVRContextMenus.cpp
@@ -486,7 +486,7 @@ namespace PVR
 
     bool PVRClientMenuHook::Execute(const CFileItemPtr &item) const
     {
-      return CServiceBroker::GetPVRManager().GUIActions()->ProcessMenuHooks(item);;
+      return CServiceBroker::GetPVRManager().GUIActions()->ProcessMenuHooks(item);
     }
 
   } // namespace CONEXTMENUITEM
diff --git a/xbmc/pvr/PVRDatabase.h b/xbmc/pvr/PVRDatabase.h
index b8db1b8..7936a52 100644
--- a/xbmc/pvr/PVRDatabase.h
+++ b/xbmc/pvr/PVRDatabase.h
@@ -56,13 +56,13 @@ namespace PVR
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    int GetSchemaVersion() const override { return 30; };
+    int GetSchemaVersion() const override { return 30; }
 
     /*!
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char *GetBaseDBName() const override { return "TV"; };
+    const char *GetBaseDBName() const override { return "TV"; }
 
     /*! @name Channel methods */
     //@{
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
index 387d3b8..9dfaf3b 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRChannelManager.h
@@ -39,7 +39,7 @@ namespace PVR
     bool OnAction(const CAction& action) override;
     void OnWindowLoaded(void) override;
     void OnWindowUnload(void) override;
-    bool HasListItems() const override{ return true; };
+    bool HasListItems() const override{ return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
   protected:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
index d7e9989..ade05aa 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRGuideInfo.h
@@ -32,7 +32,7 @@ namespace PVR
     virtual ~CGUIDialogPVRGuideInfo(void);
     bool OnMessage(CGUIMessage& message) override;
     bool OnInfo(int actionID) override;
-    bool HasListItems() const override { return true; };
+    bool HasListItems() const override { return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
     void SetProgInfo(const CPVREpgInfoTagPtr &tag);
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
index 72da4ec..62ee893 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRadioRDSInfo.h
@@ -29,7 +29,7 @@ namespace PVR
     CGUIDialogPVRRadioRDSInfo(void);
     virtual ~CGUIDialogPVRRadioRDSInfo(void) = default;
     bool OnMessage(CGUIMessage& message) override;
-    bool HasListItems() const override { return true; };
+    bool HasListItems() const override { return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
   protected:
diff --git a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
index 4394089..49b9401 100644
--- a/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
+++ b/xbmc/pvr/dialogs/GUIDialogPVRRecordingInfo.h
@@ -30,7 +30,7 @@ namespace PVR
     virtual ~CGUIDialogPVRRecordingInfo(void) = default;
     bool OnMessage(CGUIMessage& message) override;
     bool OnInfo(int actionID) override;
-    bool HasListItems() const override { return true; };
+    bool HasListItems() const override { return true; }
     CFileItemPtr GetCurrentListItem(int offset = 0) override;
 
     void SetRecording(const CFileItem *item);
diff --git a/xbmc/pvr/epg/EpgDatabase.h b/xbmc/pvr/epg/EpgDatabase.h
index 6caf8d4..b241db0 100644
--- a/xbmc/pvr/epg/EpgDatabase.h
+++ b/xbmc/pvr/epg/EpgDatabase.h
@@ -37,12 +37,12 @@ namespace PVR
     /*!
      * @brief Create a new instance of the EPG database.
      */
-    CPVREpgDatabase(void) = default;;
+    CPVREpgDatabase(void) = default;
 
     /*!
      * @brief Destroy this instance.
      */
-    virtual ~CPVREpgDatabase(void) = default;;
+    virtual ~CPVREpgDatabase(void) = default;
 
     /*!
      * @brief Open the database.
@@ -54,13 +54,13 @@ namespace PVR
      * @brief Get the minimal database version that is required to operate correctly.
      * @return The minimal database version.
      */
-    int GetSchemaVersion(void) const override { return 11; };
+    int GetSchemaVersion(void) const override { return 11; }
 
     /*!
      * @brief Get the default sqlite database filename.
      * @return The default filename.
      */
-    const char *GetBaseDBName(void) const override { return "Epg"; };
+    const char *GetBaseDBName(void) const override { return "Epg"; }
 
     /*! @name EPG methods */
     //@{
diff --git a/xbmc/pvr/recordings/PVRRecording.h b/xbmc/pvr/recordings/PVRRecording.h
index 01e687a..a6e9ddb 100644
--- a/xbmc/pvr/recordings/PVRRecording.h
+++ b/xbmc/pvr/recordings/PVRRecording.h
@@ -259,7 +259,7 @@ namespace PVR
      * @brief Retrieve the recording Episode Name
      * @note Returns an empty string if no Episode Name was provided by the PVR client
      */
-    std::string EpisodeName(void) const { return m_strShowTitle; };
+    std::string EpisodeName(void) const { return m_strShowTitle; }
 
     /*!
      * @brief check whether this recording is currently in progress (according to its start time and duration)
diff --git a/xbmc/pvr/timers/PVRTimers.cpp b/xbmc/pvr/timers/PVRTimers.cpp
index ffe8118..43476d2 100644
--- a/xbmc/pvr/timers/PVRTimers.cpp
+++ b/xbmc/pvr/timers/PVRTimers.cpp
@@ -81,7 +81,7 @@ void CPVRTimersContainer::InsertTimer(const CPVRTimerInfoTagPtr &newTimer)
   }
   else
   {
-    it->second.emplace_back(newTimer);;
+    it->second.emplace_back(newTimer);
   }
 }
 
diff --git a/xbmc/pvr/windows/GUIEPGGridContainer.cpp b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
index f470770..3153c9e 100644
--- a/xbmc/pvr/windows/GUIEPGGridContainer.cpp
+++ b/xbmc/pvr/windows/GUIEPGGridContainer.cpp
@@ -299,7 +299,7 @@ float CGUIEPGGridContainer::GetCurrentTimePositionOnPage() const
 
 float CGUIEPGGridContainer::GetProgressIndicatorWidth() const
 {
-  return (m_orientation == VERTICAL) ? GetCurrentTimePositionOnPage() : m_rulerWidth + m_gridWidth;;
+  return (m_orientation == VERTICAL) ? GetCurrentTimePositionOnPage() : m_rulerWidth + m_gridWidth;
 }
 
 float CGUIEPGGridContainer::GetProgressIndicatorHeight() const
