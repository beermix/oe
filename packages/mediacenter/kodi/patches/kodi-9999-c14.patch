diff --git a/m4/ax_cxx_compile_stdcxx_11.m4 b/m4/ax_cxx_compile_stdcxx_11.m4
old mode 100644
new mode 100755
index cee493a1ef..14ecdb6812
--- a/m4/ax_cxx_compile_stdcxx_11.m4
+++ b/m4/ax_cxx_compile_stdcxx_11.m4
@@ -13,7 +13,7 @@
 #
 #   The first argument, if specified, indicates whether you insist on an
 #   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.
-#   -std=c++11).  If neither is specified, you get whatever works, with
+#   -std=c++14).  If neither is specified, you get whatever works, with
 #   preference for an extended mode.
 #
 #   The second argument, if specified 'mandatory' or if left unspecified,
@@ -107,7 +107,7 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl
 
   m4_if([$1], [ext], [], [dnl
   if test x$ac_success = xno; then
-    for switch in -std=c++11 -std=c++0x; do
+    for switch in -std=c++14 -std=c++0x; do
       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
       AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
                      $cachevar,
diff --git a/project/cmake/CMakeLists.txt b/project/cmake/CMakeLists.txt
old mode 100644
new mode 100755
index aeb1ff47c2..aed63f7fbf
--- a/project/cmake/CMakeLists.txt
+++ b/project/cmake/CMakeLists.txt
@@ -445,7 +445,7 @@ endforeach()
 
 set(APP_LIB_DIR ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/lib/${APP_NAME_LC})
 set(APP_INCLUDE_DIR ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/include/${APP_NAME_LC})
-set(CXX11_SWITCH "-std=c++11")
+set(CXX11_SWITCH "-std=c++14")
 configure_file(${PROJECT_SOURCE_DIR}/KodiConfig.cmake.in
                ${CORE_BUILD_DIR}/lib/${APP_NAME_LC}/${APP_NAME}Config.cmake @ONLY)
 configure_file(${PROJECT_SOURCE_DIR}/scripts/common/AddonHelpers.cmake
diff --git a/project/cmake/modules/FindCXX11.cmake b/project/cmake/modules/FindCXX11.cmake
old mode 100644
new mode 100755
index c0b9a52d20..478df8f615
--- a/project/cmake/modules/FindCXX11.cmake
+++ b/project/cmake/modules/FindCXX11.cmake
@@ -1,10 +1,10 @@
 include(TestCXXAcceptsFlag)
 
-# try to use compiler flag -std=c++11
-check_cxx_accepts_flag("-std=c++11" CXX_FLAG_CXX11)
+# try to use compiler flag -std=c++14
+check_cxx_accepts_flag("-std=c++14" CXX_FLAG_CXX11)
 if(CXX_FLAG_CXX11)
-  add_options (CXX ALL_BUILDS "-std=c++11")
-  set(CXX_STD11_FLAGS "-std=c++11")
+  add_options (CXX ALL_BUILDS "-std=c++14")
+  set(CXX_STD11_FLAGS "-std=c++14")
 else()
   # try to use compiler flag -std=c++0x for older compilers
   check_cxx_accepts_flag("-std=c++0x" CXX_FLAG_CXX0X)
diff --git a/project/cmake/scripts/common/PrepareEnv.cmake b/project/cmake/scripts/common/PrepareEnv.cmake
old mode 100644
new mode 100755
index 8e02382551..f7fcd18e5f
--- a/project/cmake/scripts/common/PrepareEnv.cmake
+++ b/project/cmake/scripts/common/PrepareEnv.cmake
@@ -28,7 +28,7 @@ endif()
 if(NOT WIN32)
   string(REGEX MATCH "-std=(gnu|c)\\+\\+11" cxx11flag "${CMAKE_CXX_FLAGS}")
   if(NOT cxx11flag)
-    set(CXX11_SWITCH "-std=c++11")
+    set(CXX11_SWITCH "-std=c++14")
   endif()
 endif()
 
diff --git a/project/cmake/scripts/linux/Install.cmake b/project/cmake/scripts/linux/Install.cmake
old mode 100644
new mode 100755
index 038110d146..292c6d74de
--- a/project/cmake/scripts/linux/Install.cmake
+++ b/project/cmake/scripts/linux/Install.cmake
@@ -19,7 +19,7 @@ set(APP_PREFIX ${prefix})
 set(APP_LIB_DIR ${libdir}/${APP_NAME_LC})
 set(APP_DATA_DIR ${datarootdir}/${APP_NAME_LC})
 set(APP_INCLUDE_DIR ${includedir}/${APP_NAME_LC})
-set(CXX11_SWITCH "-std=c++11")
+set(CXX11_SWITCH "-std=c++14")
 
 # Set XBMC_STANDALONE_SH_PULSE so we can insert PulseAudio block into kodi-standalone
 if(EXISTS ${CORE_SOURCE_DIR}/tools/Linux/kodi-standalone.sh.pulse)
diff --git a/tools/depends/configure.ac b/tools/depends/configure.ac
old mode 100644
new mode 100755
index 3626ea5204..de807a8a97
--- a/tools/depends/configure.ac
+++ b/tools/depends/configure.ac
@@ -381,7 +381,7 @@ case $host in
     esac
     platform_cflags+=" -arch $use_cpu -m$platform_min_version"
     platform_ldflags+=" -arch $use_cpu -m$platform_min_version -isysroot $use_sdk_path -stdlib=libc++"
-    platform_cxxflags+=" -arch $use_cpu -m$platform_min_version -std=c++11 -stdlib=libc++"
+    platform_cxxflags+=" -arch $use_cpu -m$platform_min_version -std=c++14 -stdlib=libc++"
     platform_includes="-isysroot $use_sdk_path"
     deps_dir=$sdk_name"_"$use_cpu-target
     tool_dir=buildtools-native;
diff --git a/tools/depends/target/crossguid/FindCXX11.cmake b/tools/depends/target/crossguid/FindCXX11.cmake
old mode 100644
new mode 100755
index fb2a58268f..21a122588c
--- a/tools/depends/target/crossguid/FindCXX11.cmake
+++ b/tools/depends/target/crossguid/FindCXX11.cmake
@@ -1,10 +1,10 @@
 include(TestCXXAcceptsFlag)
 
-# try to use compiler flag -std=c++11
-check_cxx_accepts_flag("-std=c++11" CXX_FLAG_CXX11)
+# try to use compiler flag -std=c++14
+check_cxx_accepts_flag("-std=c++14" CXX_FLAG_CXX11)
 if(CXX_FLAG_CXX11)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-  set(CXX_STD11_FLAGS "-std=c++11")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
+  set(CXX_STD11_FLAGS "-std=c++14")
 else()
   # try to use compiler flag -std=c++0x for older compilers
   check_cxx_accepts_flag("-std=c++0x" CXX_FLAG_CXX0X)
diff --git a/tools/depends/target/crossguid/Makefile b/tools/depends/target/crossguid/Makefile
old mode 100644
new mode 100755
index 487ab2a617..5db3d811ec
--- a/tools/depends/target/crossguid/Makefile
+++ b/tools/depends/target/crossguid/Makefile
@@ -11,7 +11,7 @@ ARCHIVE=$(SOURCE).tar.gz
 ifeq ($(CROSS_COMPILING), yes)
   DEPS += ../../Makefile.include
 else
-  CXXFLAGS += -std=c++11
+  CXXFLAGS += -std=c++14
   ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
 
   ifeq ($(PLATFORM),)
