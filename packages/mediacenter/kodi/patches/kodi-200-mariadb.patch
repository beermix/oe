From 34fde99b6dcf9c35e8c7f665c4cf6088a3451e30 Mon Sep 17 00:00:00 2001
From: "Sascha Kuehndel (InuSasha)" <dev@inusasha.de>
Date: Fri, 5 Jan 2018 18:14:12 +0100
Subject: [PATCH] sql-client: add support for mariadb-client mariadb is a
 place-in for mysql. only, the search pathes and the include path are changed.

---
 CMakeLists.txt                        |  1 +
 cmake/modules/FindMariaDBClient.cmake | 74 +++++++++++++++++++++++++++++++++++
 cmake/modules/FindMySqlClient.cmake   |  5 +++
 xbmc/dbwrappers/CMakeLists.txt        |  2 +-
 xbmc/dbwrappers/Database.cpp          |  6 +--
 xbmc/dbwrappers/mysqldataset.cpp      | 10 ++++-
 xbmc/dbwrappers/mysqldataset.h        |  5 +++
 7 files changed, 97 insertions(+), 6 deletions(-)
 create mode 100644 cmake/modules/FindMariaDBClient.cmake

diff --git a/project/cmake/modules/FindMariaDBClient.cmake b/project/cmake/modules/FindMariaDBClient.cmake
new file mode 100644
index 000000000000..168e603ff5b4
--- /dev/null
+++ b/project/cmake/modules/FindMariaDBClient.cmake
@@ -0,0 +1,74 @@
+#.rst:
+# FindMariaDBClient
+# ---------------
+# Finds the MariaDBClient library
+#
+# This will will define the following variables::
+#
+# MARIADBCLIENT_FOUND - system has MariaDBClient
+# MARIADBCLIENT_INCLUDE_DIRS - the MariaDBClient include directory
+# MARIADBCLIENT_LIBRARIES - the MariaDBClient libraries
+# MARIADBCLIENT_DEFINITIONS - the MariaDBClient compile definitions
+#
+# and the following imported targets::
+#
+#   MariaDBClient::MariaDBClient   - The MariaDBClient library
+
+# check for parallel activation of MySql and MariaDB
+if(MYSQLCLIENT_FOUND)
+  MESSAGE(FATAL_ERRORO "You can not use MySql and MariaDB at the same time. Disable one by adding -DENABLE_MYSQLCLIENT=OFF or -DENABLE_MARIADBCLIENT=OFF")
+endif()
+
+# Don't find system wide installed version on Windows
+if(WIN32)
+  set(EXTRA_FIND_ARGS NO_SYSTEM_ENVIRONMENT_PATH)
+else()
+  set(EXTRA_FIND_ARGS)
+endif()
+
+find_path(MARIADBCLIENT_INCLUDE_DIR NAMES mariadb/mysql.h mariadb/server/mysql.h)
+find_library(MARIADBCLIENT_LIBRARY_RELEASE NAMES mariadbclient libmariadb
+                                           PATH_SUFFIXES mariadb
+                                           ${EXTRA_FIND_ARGS})
+find_library(MARIADBCLIENT_LIBRARY_DEBUG NAMES mariadbclient libmariadb
+                                         PATH_SUFFIXES mariadb
+                                         ${EXTRA_FIND_ARGS})
+
+if(MARIADBCLIENT_INCLUDE_DIR AND EXISTS "${MARIADBCLIENT_INCLUDE_DIR}/mariadb/mariadb_version.h")
+  file(STRINGS "${MARIADBCLIENT_INCLUDE_DIR}/mariadb/mariadb_version.h" mariadb_version_str REGEX "^#define[\t ]+MARIADB_CLIENT_VERSION_STR[\t ]+\".*\".*")
+  string(REGEX REPLACE "^#define[\t ]+MARIADB_CLIENT_VERSION_STR[\t ]+\"([^\"]+)\".*" "\\1" MARIADBCLIENT_VERSION_STRING "${mariadb_version_str}")
+  unset(mariadb_version_str)
+endif()
+
+include(SelectLibraryConfigurations)
+select_library_configurations(MARIADBCLIENT)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(MariaDBClient
+                                  REQUIRED_VARS MARIADBCLIENT_LIBRARY MARIADBCLIENT_INCLUDE_DIR
+                                  VERSION_VAR MARIADBCLIENT_VERSION_STRING)
+
+if(MARIADBCLIENT_FOUND)
+  set(MARIADBCLIENT_LIBRARIES ${MARIADBCLIENT_LIBRARY})
+  set(MARIADBCLIENT_INCLUDE_DIRS ${MARIADBCLIENT_INCLUDE_DIR})
+  set(MARIADBCLIENT_DEFINITIONS -DHAS_MARIADB=1)
+
+  if(NOT TARGET MariaDBClient::MariaDBClient)
+    add_library(MariaDBClient::MariaDBClient UNKNOWN IMPORTED)
+    if(MARIADBCLIENT_LIBRARY_RELEASE)
+      set_target_properties(MariaDBClient::MariaDBClient PROPERTIES
+                                                         IMPORTED_CONFIGURATIONS RELEASE
+                                                         IMPORTED_LOCATION "${MARIADBCLIENT_LIBRARY_RELEASE}")
+    endif()
+    if(MARIADBCLIENT_LIBRARY_DEBUG)
+      set_target_properties(MariaDBClient::MariaDBClient PROPERTIES
+                                                         IMPORTED_CONFIGURATIONS DEBUG
+                                                         IMPORTED_LOCATION "${MARIADBCLIENT_LIBRARY_DEBUG}")
+    endif()
+    set_target_properties(MariaDBClient::MariaDBClient PROPERTIES
+                                                       INTERFACE_INCLUDE_DIRECTORIES "${MARIADBCLIENT_INCLUDE_DIR}"
+                                                       INTERFACE_COMPILE_DEFINITIONS HAS_MARIADB=1)
+  endif()
+endif()
+
+mark_as_advanced(MARIADBCLIENT_INCLUDE_DIR MARIADBCLIENT_LIBRARY)
diff --git a/project/cmake/modules/FindMySqlClient.cmake b/project/cmake/modules/FindMySqlClient.cmake
index 50db58237bba..98a271da62fd 100644
--- a/project/cmake/modules/FindMySqlClient.cmake
+++ b/project/cmake/modules/FindMySqlClient.cmake
@@ -14,6 +14,11 @@
 #
 #   MySqlClient::MySqlClient   - The MySqlClient library
 
+# check for parallel activation of MySql and MariaDB
+if(MARIADBCLIENT_FOUND)
+  MESSAGE(FATAL_ERRORO "You can not use MySql and MariaDB at the same time. Disable one by adding -DENABLE_MYSQLCLIENT=OFF or -DENABLE_MARIADBCLIENT=OFF")
+endif()
+
 # Don't find system wide installed version on Windows
 if(WIN32)
   set(EXTRA_FIND_ARGS NO_SYSTEM_ENVIRONMENT_PATH)
diff --git a/xbmc/dbwrappers/CMakeLists.txt b/xbmc/dbwrappers/CMakeLists.txt
index 5ca090f0e4dd..16a03f291a6c 100644
--- a/xbmc/dbwrappers/CMakeLists.txt
+++ b/xbmc/dbwrappers/CMakeLists.txt
@@ -10,7 +10,7 @@ set(HEADERS Database.h
             qry_dat.h
             sqlitedataset.h)
 
-if(MYSQLCLIENT_FOUND)
+if(MYSQLCLIENT_FOUND OR MARIADBCLIENT_FOUND)
   list(APPEND SOURCES mysqldataset.cpp)
   list(APPEND HEADERS mysqldataset.h)
 endif()
diff --git a/xbmc/dbwrappers/Database.cpp b/xbmc/dbwrappers/Database.cpp
index 974f3655d6bb..bff9bd0784b5 100644
--- a/xbmc/dbwrappers/Database.cpp
+++ b/xbmc/dbwrappers/Database.cpp
@@ -30,7 +30,7 @@
 #include "DatabaseManager.h"
 #include "DbUrl.h"
 
-#ifdef HAS_MYSQL
+#if defined(HAS_MYSQL) || defined(HAS_MARIADB) 
 #include "mysqldataset.h"
 #endif
 
@@ -378,7 +378,7 @@ void CDatabase::InitSettings(DatabaseSettings &dbSettings)
 {
   m_sqlite = true;
 
-#ifdef HAS_MYSQL
+#if defined(HAS_MYSQL) || defined(HAS_MARIADB)
   if (dbSettings.type == "mysql")
   {
     // check we have all information before we cancel the fallback
@@ -421,7 +421,7 @@ bool CDatabase::Connect(const std::string &dbName, const DatabaseSettings &dbSet
   {
     m_pDB.reset( new SqliteDatabase() ) ;
   }
-#ifdef HAS_MYSQL
+#if defined(HAS_MYSQL) || defined(HAS_MARIADB)
   else if (dbSettings.type == "mysql")
   {
     m_pDB.reset( new MysqlDatabase() ) ;
diff --git a/xbmc/dbwrappers/mysqldataset.cpp b/xbmc/dbwrappers/mysqldataset.cpp
index 45449bad28fe..9e962b3452f0 100644
--- a/xbmc/dbwrappers/mysqldataset.cpp
+++ b/xbmc/dbwrappers/mysqldataset.cpp
@@ -29,9 +29,15 @@
 #include "Util.h"
 #include "utils/StringUtils.h"
 
-#ifdef HAS_MYSQL
+#if defined(HAS_MYSQL) || defined(HAS_MARIADB)
+
 #include "mysqldataset.h"
+#ifdef HAS_MYSQL
 #include "mysql/errmsg.h"
+#endif
+#ifdef HAS_MARIADB
+#include "mariadb/errmsg.h"
+#endif
 
 #ifdef TARGET_POSIX
 #include "platform/linux/ConvUtils.h"
@@ -1744,5 +1750,5 @@ void MysqlDataset::interrupt() {
 }
 
 }//namespace
-#endif //HAS_MYSQL
+#endif //HAS_MYSQL || HAS_MARIADB
 
diff --git a/xbmc/dbwrappers/mysqldataset.h b/xbmc/dbwrappers/mysqldataset.h
index c3072acb1f8a..82c46d567dd1 100644
--- a/xbmc/dbwrappers/mysqldataset.h
+++ b/xbmc/dbwrappers/mysqldataset.h
@@ -22,7 +22,12 @@
 
 #include <stdio.h>
 #include "dataset.h"
+#ifdef HAS_MYSQL
 #include "mysql/mysql.h"
+#endif
+#ifdef HAS_MARIADB
+#include "mariadb/mysql.h"
+#endif
 
 namespace dbiplus {
 /***************** Class MysqlDatabase definition ******************
--- kodi-a9a7a20/project/cmake/CMakeLists.txt.org	2018-01-05 18:52:34.388091467 +0100
+++ kodi-a9a7a20/project/cmake/CMakeLists.txt	2018-01-05 18:52:50.544181263 +0100
@@ -115,7 +115,7 @@
 endif()
 
 # Optional dependencies
-set(optional_deps LCMS2 MicroHttpd MySqlClient SSH XSLT
+set(optional_deps LCMS2 MariaDBClient MicroHttpd MySqlClient SSH XSLT
                   Alsa UDEV DBus Avahi SmbClient CCache
                   PulseAudio VDPAU VAAPI Bluetooth CAP)
 
