From 1917bb932fdd5880b47bc58a9857c2ded9b15da9 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max@duempel.org>
Date: Wed, 8 Mar 2017 13:26:20 +0100
Subject: [PATCH 01/10] Video/VAAPI: use 0 instead of None, which is a libX11
 macro

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp                    | 2 +-
 xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h                      | 4 ++--
 xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp | 6 +++---
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
index 333028007045..4d3ff8d46d13 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
@@ -2606,7 +2606,7 @@ void COutput::ReleaseBufferPool(bool precleanup)
     if (pic->texture)
     {
       glDeleteTextures(1, &pic->texture);
-      pic->texture = None;
+      pic->texture = 0;
     }
     av_frame_free(&pic->avFrame);
     pic->valid = false;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h
index 244339357f85..f101eac71ec0 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h
@@ -186,8 +186,8 @@ class CVaapiRenderPicture
   friend class COutput;
 public:
   CVaapiRenderPicture(CCriticalSection &section)
-    : texWidth(0), texHeight(0), texture(None), textureY(None), textureVU(None), valid(false), vaapi(NULL), avFrame(NULL),
-      usefence(false), refCount(0), renderPicSection(section) { fence = None; }
+    : texWidth(0), texHeight(0), texture(0), textureY(0), textureVU(0), valid(false), vaapi(NULL), avFrame(NULL),
+      usefence(false), refCount(0), renderPicSection(section) { fence = 0; }
   void Sync();
   VideoPicture DVDPic;
   int texWidth, texHeight;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp
index ce70b641489a..fda888c0bc9a 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp
@@ -171,9 +171,9 @@ void CRendererVAAPI::DeleteTexture(int index)
   m_buffers[index].hwDec = NULL;
 
   YUVFIELDS &fields = m_buffers[index].fields;
-  fields[FIELD_FULL][0].id = None;
-  fields[FIELD_FULL][1].id = None;
-  fields[FIELD_FULL][2].id = None;
+  fields[FIELD_FULL][0].id = 0;
+  fields[FIELD_FULL][1].id = 0;
+  fields[FIELD_FULL][2].id = 0;
 }
 
 bool CRendererVAAPI::UploadTexture(int index)

From d70a7a39cb65db5385465e4b6e15b7b7031f5af8 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max@duempel.org>
Date: Wed, 8 Mar 2017 13:26:20 +0100
Subject: [PATCH 02/10] Video/VAAPI: make compatible with GLES2

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
index 4d3ff8d46d13..d462484c08e6 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
@@ -2635,12 +2635,14 @@ bool COutput::GLInit()
   }
 #endif
 
+#ifdef HAS_GL
   if (!g_Windowing.IsExtSupported("GL_ARB_texture_non_power_of_two") &&
        g_Windowing.IsExtSupported("GL_ARB_texture_rectangle"))
   {
     m_textureTarget = GL_TEXTURE_RECTANGLE_ARB;
   }
   else
+#endif
     m_textureTarget = GL_TEXTURE_2D;
 
   eglCreateImageKHR = (PFNEGLCREATEIMAGEKHRPROC)eglGetProcAddress("eglCreateImageKHR");

From 07ec579e84afddb0abce1b6629a67f7370b55ba5 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Sat, 18 Mar 2017 11:26:56 -0700
Subject: [PATCH 03/10] Video/VAAPI: make compatible with GBM

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h
index f101eac71ec0..90a204271575 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.h
@@ -331,7 +331,9 @@ class COutput : private CThread
   EGLDisplay m_eglDisplay;
   EGLSurface m_eglSurface;
   EGLContext m_eglContext;
+#ifdef HAVE_X11
   Display *m_Display;
+#endif
   CVaapiDecodedPicture m_currentPicture;
   GLenum m_textureTarget;
   CPostproc *m_pp;

From a6eee9663d46bef68c4c76c03874d408fa02ee01 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max@duempel.org>
Date: Wed, 8 Mar 2017 13:26:20 +0100
Subject: [PATCH 04/10] Video/CLinuxRendererGLES: UploadNV12Texture() returns
 bool

---
 xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp | 6 +++---
 xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h   | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index 3b2a133f6307..2d5e603093ff 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -1377,14 +1377,14 @@ bool CLinuxRendererGLES::CreateYV12Texture(int index)
 //********************************************************************************************************
 // NV12 Texture loading, creation and deletion
 //********************************************************************************************************
-void CLinuxRendererGLES::UploadNV12Texture(int source)
+bool CLinuxRendererGLES::UploadNV12Texture(int source)
 {
   YUVBUFFER& buf    =  m_buffers[source];
   YV12Image* im     = &buf.image;
   YUVFIELDS& fields =  buf.fields;
 
   if (!(im->flags & IMAGE_FLAG_READY))
-    return;
+    return false;
   bool deinterlacing;
   if (m_currentField == FIELD_FULL)
     deinterlacing = false;
@@ -1437,7 +1437,7 @@ void CLinuxRendererGLES::UploadNV12Texture(int source)
   CalculateTextureSourceRects(source, 3);
 
   glDisable(m_textureTarget);
-  return;
+  return true;
 }
 
 bool CLinuxRendererGLES::CreateNV12Texture(int index)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
index 4c1063ad8edf..200999cafd98 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
@@ -170,7 +170,7 @@ class CLinuxRendererGLES : public CBaseRenderer
   bool CreateYV12Texture(int index);
   virtual bool SkipUploadYV12(int index) { return false; }
 
-  void UploadNV12Texture(int index);
+  bool UploadNV12Texture(int index);
   void DeleteNV12Texture(int index);
   bool CreateNV12Texture(int index);
 

From a4d04074ccd5f51f37ebb799b4a810d00a6868cb Mon Sep 17 00:00:00 2001
From: Max Kellermann <max@duempel.org>
Date: Wed, 8 Mar 2017 13:26:20 +0100
Subject: [PATCH 05/10] shaders/yuv2rgb_basic_gles.glsl: support NV12_RRG
 format

Fixes missing green channel when VA-API is used with GLES2.  This
switch was already present in OpenGL, but not in GLES2.
---
 system/shaders/yuv2rgb_basic_gles.glsl                             | 7 +++++++
 .../VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp      | 4 ++++
 2 files changed, 11 insertions(+)

diff --git a/system/shaders/yuv2rgb_basic_gles.glsl b/system/shaders/yuv2rgb_basic_gles.glsl
index 07bae91e8b36..82fa003b533a 100644
--- a/system/shaders/yuv2rgb_basic_gles.glsl
+++ b/system/shaders/yuv2rgb_basic_gles.glsl
@@ -32,10 +32,17 @@ uniform mat4      m_yuvmat;
 void main()
 {
   vec4 yuv, rgb;
+#if defined(XBMC_NV12_RRG)
+  yuv.rgba = vec4( texture2D(m_sampY, m_cordY).r
+                 , texture2D(m_sampU, m_cordU).r
+                 , texture2D(m_sampV, m_cordV).g
+                 , 1.0);
+#else
   yuv.rgba = vec4( texture2D(m_sampY, m_cordY).r
                  , texture2D(m_sampU, m_cordU).g
                  , texture2D(m_sampV, m_cordV).a
                  , 1.0);
+#endif
 
   rgb   = m_yuvmat * yuv;
   rgb.a = m_alpha;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp
index b40ffdc97d49..f7ef948a11f9 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp
@@ -239,6 +239,10 @@ BaseYUV2RGBGLSLShader::BaseYUV2RGBGLSLShader(bool rect, unsigned flags, EShaderF
     m_defines += "#define XBMC_YV12\n";
   else if (m_format == SHADER_NV12)
     m_defines += "#define XBMC_NV12\n";
+  else if (m_format == RENDER_FMT_CVBREF)
+    m_defines += "#define XBMC_YV12\n";
+  else if (m_format == RENDER_FMT_VAAPI)
+    m_defines += "#define XBMC_NV12_RRG\n";
   else
     CLog::Log(LOGERROR, "GL: BaseYUV2RGBGLSLShader - unsupported format %d", m_format);
 

From 36d2142560e02ad2a889760e5e9b412492a92fc3 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Tue, 16 May 2017 15:00:44 -0700
Subject: [PATCH 06/10] fixup! shaders/yuv2rgb_basic_gles.glsl: support
 NV12_RRG format

---
 .../cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp
index f7ef948a11f9..e2d6b6641b67 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/YUV2RGBShader.cpp
@@ -239,10 +239,10 @@ BaseYUV2RGBGLSLShader::BaseYUV2RGBGLSLShader(bool rect, unsigned flags, EShaderF
     m_defines += "#define XBMC_YV12\n";
   else if (m_format == SHADER_NV12)
     m_defines += "#define XBMC_NV12\n";
-  else if (m_format == RENDER_FMT_CVBREF)
-    m_defines += "#define XBMC_YV12\n";
-  else if (m_format == RENDER_FMT_VAAPI)
+  else if (m_format == SHADER_NV12_RRG)
     m_defines += "#define XBMC_NV12_RRG\n";
+  else if (m_format == SHADER_YV12)
+    m_defines += "#define XBMC_YV12\n";
   else
     CLog::Log(LOGERROR, "GL: BaseYUV2RGBGLSLShader - unsupported format %d", m_format);
 

From 6d8289b4c58431f10ba24633a47852be65adec2c Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Tue, 16 May 2017 16:20:56 -0700
Subject: [PATCH 07/10] Video/RendererVAAPI: allow using GL or GLES

---
 .../VideoRenderers/HwDecRender/CMakeLists.txt      |   9 +-
 .../{RendererVAAPI.cpp => RendererVAAPIGL.cpp}     |   2 +-
 .../{RendererVAAPI.h => RendererVAAPIGL.h}         |   0
 .../HwDecRender/RendererVAAPIGLES.cpp              | 245 +++++++++++++++++++++
 .../VideoRenderers/HwDecRender/RendererVAAPIGLES.h |  60 +++++
 5 files changed, 313 insertions(+), 3 deletions(-)
 rename xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/{RendererVAAPI.cpp => RendererVAAPIGL.cpp} (99%)
 rename xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/{RendererVAAPI.h => RendererVAAPIGL.h} (100%)
 create mode 100644 xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp
 create mode 100644 xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.h

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
index 539cab57bdb7..32b067514ba6 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
@@ -4,8 +4,13 @@ if(CORE_SYSTEM_NAME STREQUAL windows)
 endif()
 
 if(VAAPI_FOUND)
-  list(APPEND SOURCES RendererVAAPI.cpp)
-  list(APPEND HEADERS RendererVAAPI.h)
+  if(OPENGL_FOUND)
+    list(APPEND SOURCES RendererVAAPIGL.cpp)
+    list(APPEND HEADERS RendererVAAPIGL.h)
+  elseif(OPENGLES_FOUND)
+    list(APPEND SOURCES RendererVAAPIGLES.cpp)
+    list(APPEND HEADERS RendererVAAPIGLES.h)
+  endif()
 endif()
 
 if(VDPAU_FOUND)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp
similarity index 99%
rename from xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp
rename to xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp
index fda888c0bc9a..0e1edc417143 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.cpp
@@ -18,7 +18,7 @@
  *
  */
 
-#include "RendererVAAPI.h"
+#include "RendererVAAPIGL.h"
 
 #include "cores/VideoPlayer/DVDCodecs/Video/VAAPI.h"
 #include "cores/VideoPlayer/DVDCodecs/DVDCodecUtils.h"
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.h
similarity index 100%
rename from xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPI.h
rename to xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGL.h
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp
new file mode 100644
index 000000000000..7a91d82f7444
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp
@@ -0,0 +1,245 @@
+/*
+ *      Copyright (C) 2007-2015 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "RendererVAAPIGLES.h"
+
+#include "cores/VideoPlayer/DVDCodecs/Video/VAAPI.h"
+#include "cores/VideoPlayer/DVDCodecs/DVDCodecUtils.h"
+#include "settings/Settings.h"
+#include "settings/AdvancedSettings.h"
+#include "utils/log.h"
+#include "utils/GLUtils.h"
+
+CRendererVAAPI::CRendererVAAPI()
+{
+
+}
+
+CRendererVAAPI::~CRendererVAAPI()
+{
+  for (int i = 0; i < NUM_BUFFERS; ++i)
+  {
+    DeleteTexture(i);
+  }
+}
+
+bool CRendererVAAPI::Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height,
+                               float fps, unsigned flags, ERenderFormat format, void *hwPic, unsigned int orientation)
+{
+  VAAPI::CVaapiRenderPicture *vaapi = static_cast<VAAPI::CVaapiRenderPicture*>(hwPic);
+  if (vaapi->textureY)
+    m_isVAAPIBuffer = true;
+  else
+    m_isVAAPIBuffer = false;
+
+  return CLinuxRendererGL::Configure(width, height, d_width, d_height,
+                                     fps, flags, format, hwPic, orientation);
+}
+
+bool CRendererVAAPI::ConfigChanged(void *hwPic)
+{
+  VAAPI::CVaapiRenderPicture *vaapi = static_cast<VAAPI::CVaapiRenderPicture*>(hwPic);
+  if (vaapi->textureY && !m_isVAAPIBuffer)
+    return true;
+
+  return false;
+}
+
+void CRendererVAAPI::AddVideoPictureHW(VideoPicture &picture, int index)
+{
+  VAAPI::CVaapiRenderPicture *vaapi = static_cast<VAAPI::CVaapiRenderPicture*>(picture.hwPic);
+  YUVBUFFER &buf = m_buffers[index];
+  VAAPI::CVaapiRenderPicture *pic = vaapi->Acquire();
+  if (buf.hwDec)
+    ((VAAPI::CVaapiRenderPicture*)buf.hwDec)->Release();
+  buf.hwDec = pic;
+
+  if (!m_isVAAPIBuffer)
+  {
+    YV12Image &im = m_buffers[index].image;
+    CDVDCodecUtils::CopyNV12Picture(&im, &vaapi->DVDPic);
+  }
+}
+
+void CRendererVAAPI::ReleaseBuffer(int idx)
+{
+  YUVBUFFER &buf = m_buffers[idx];
+  if (buf.hwDec)
+    ((VAAPI::CVaapiRenderPicture*)buf.hwDec)->Release();
+  buf.hwDec = NULL;
+}
+
+CRenderInfo CRendererVAAPI::GetRenderInfo()
+{
+  CRenderInfo info;
+  info.formats = m_formats;
+  info.max_buffer_size = NUM_BUFFERS;
+  if (!m_isVAAPIBuffer)
+    info.optimal_buffer_size = 4;
+  else
+    info.optimal_buffer_size = 5;
+  return info;
+}
+
+bool CRendererVAAPI::Supports(ERENDERFEATURE feature)
+{
+  return CLinuxRendererGL::Supports(feature);
+}
+
+bool CRendererVAAPI::Supports(ESCALINGMETHOD method)
+{
+  return CLinuxRendererGL::Supports(method);
+}
+
+EShaderFormat CRendererVAAPI::GetShaderFormat(ERenderFormat renderFormat)
+{
+  EShaderFormat ret = SHADER_NONE;
+
+  if (m_isVAAPIBuffer)
+    ret = SHADER_NV12_RRG;
+  else
+    ret = SHADER_NV12;
+
+  return ret;
+}
+
+bool CRendererVAAPI::LoadShadersHook()
+{
+  return false;
+}
+
+bool CRendererVAAPI::RenderHook(int idx)
+{
+  return false;
+}
+
+bool CRendererVAAPI::CreateTexture(int index)
+{
+  if (!m_isVAAPIBuffer)
+  {
+    return CreateNV12Texture(index);
+  }
+
+  YV12Image &im     = m_buffers[index].image;
+  YUVFIELDS &fields = m_buffers[index].fields;
+  YUVPLANE  &plane  = fields[0][0];
+
+  DeleteTexture(index);
+
+  memset(&im    , 0, sizeof(im));
+  memset(&fields, 0, sizeof(fields));
+  im.height = m_sourceHeight;
+  im.width  = m_sourceWidth;
+  im.cshift_x = 1;
+  im.cshift_y = 1;
+
+  plane.pixpertex_x = 1;
+  plane.pixpertex_y = 1;
+
+  plane.id = 1;
+
+  return true;
+}
+
+void CRendererVAAPI::DeleteTexture(int index)
+{
+  if (!m_isVAAPIBuffer)
+  {
+    DeleteNV12Texture(index);
+    return;
+  }
+
+  if (m_buffers[index].hwDec)
+    ((VAAPI::CVaapiRenderPicture*)m_buffers[index].hwDec)->Release();
+  m_buffers[index].hwDec = NULL;
+
+  YUVFIELDS &fields = m_buffers[index].fields;
+  fields[FIELD_FULL][0].id = 0;
+  fields[FIELD_FULL][1].id = 0;
+  fields[FIELD_FULL][2].id = 0;
+}
+
+bool CRendererVAAPI::UploadTexture(int index)
+{
+  if (!m_isVAAPIBuffer)
+  {
+    return UploadNV12Texture(index);
+  }
+
+  VAAPI::CVaapiRenderPicture *vaapi = (VAAPI::CVaapiRenderPicture*)m_buffers[index].hwDec;
+
+  YV12Image &im = m_buffers[index].image;
+
+  YUVFIELDS &fields = m_buffers[index].fields;
+
+  if (!vaapi || !vaapi->valid)
+  {
+    return false;
+  }
+
+  YUVPLANES &planes = fields[0];
+
+  planes[0].texwidth  = vaapi->texWidth;
+  planes[0].texheight = vaapi->texHeight;
+
+  planes[1].texwidth  = planes[0].texwidth  >> im.cshift_x;
+  planes[1].texheight = planes[0].texheight >> im.cshift_y;
+  planes[2].texwidth  = planes[1].texwidth;
+  planes[2].texheight = planes[1].texheight;
+
+  for (int p = 0; p < 3; p++)
+  {
+    planes[p].pixpertex_x = 1;
+    planes[p].pixpertex_y = 1;
+  }
+
+  // set textures
+  fields[0][0].id = vaapi->textureY;
+  fields[0][1].id = vaapi->textureVU;
+  fields[0][2].id = vaapi->textureVU;
+
+  glEnable(m_textureTarget);
+
+  for (int p=0; p<2; p++)
+  {
+    glBindTexture(m_textureTarget,fields[0][p].id);
+    glTexParameteri(m_textureTarget, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    glTexParameteri(m_textureTarget, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+    glTexParameteri(m_textureTarget, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+    glTexParameteri(m_textureTarget, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+
+    glBindTexture(m_textureTarget, 0);
+    VerifyGLState();
+  }
+
+  CalculateTextureSourceRects(index, 3);
+  glDisable(m_textureTarget);
+  return true;
+}
+
+void CRendererVAAPI::AfterRenderHook(int idx)
+{
+  YUVBUFFER &buf = m_buffers[idx];
+  if (buf.hwDec)
+  {
+    ((VAAPI::CVaapiRenderPicture*)buf.hwDec)->Sync();
+  }
+}
+
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.h
new file mode 100644
index 000000000000..1ae76984047d
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.h
@@ -0,0 +1,60 @@
+/*
+ *      Copyright (C) 2007-2015 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include "system.h"
+
+#include "cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h"
+
+class CRendererVAAPI : public CLinuxRendererGLES
+{
+public:
+  CRendererVAAPI();
+  virtual ~CRendererVAAPI();
+
+  virtual bool Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height,
+                         float fps, unsigned flags, ERenderFormat format, void *hwPic, unsigned int orientation) override;
+
+  // Player functions
+  virtual void AddVideoPictureHW(VideoPicture &picture, int index) override;
+  virtual void ReleaseBuffer(int idx) override;
+  virtual CRenderInfo GetRenderInfo() override;
+  virtual bool ConfigChanged(void *hwPic) override;
+
+  // Feature support
+  virtual bool Supports(ERENDERFEATURE feature) override;
+  virtual bool Supports(ESCALINGMETHOD method) override;
+
+protected:
+  virtual bool LoadShadersHook() override;
+  virtual bool RenderHook(int idx) override;
+  virtual void AfterRenderHook(int idx) override;
+
+  // textures
+  virtual bool UploadTexture(int index) override;
+  virtual void DeleteTexture(int index) override;
+  virtual bool CreateTexture(int index) override;
+
+  virtual EShaderFormat GetShaderFormat(ERenderFormat renderFormat) override;
+
+  bool m_isVAAPIBuffer = true;
+};
+

From b6cc36c3e80b4b918d30f6752ca6e4dc886d7c78 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Tue, 16 May 2017 16:53:25 -0700
Subject: [PATCH 08/10] Video/RenderManager: add RendererVAAPIGLES.h

---
 xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
index 0ca29e9979a3..78f1ef8aaca5 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
@@ -37,13 +37,14 @@
 
 #if defined(HAS_GL)
 #include "LinuxRendererGL.h"
-#include "HwDecRender/RendererVAAPI.h"
+#include "HwDecRender/RendererVAAPIGL.h"
 #include "HwDecRender/RendererVDPAU.h"
 #if defined(TARGET_DARWIN_OSX)
 #include "HwDecRender/RendererVTBGL.h"
 #endif
 #elif HAS_GLES == 2
   #include "LinuxRendererGLES.h"
+  #include "HwDecRender/RendererVAAPIGLES.h"
 #if defined(HAS_MMAL)
 #include "HwDecRender/MMALRenderer.h"
 #endif

From 3b435a4ec12081f6c91d87e8b47f003ec710d93a Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Wed, 17 May 2017 19:59:28 -0700
Subject: [PATCH 09/10] fixup! Video/RendererVAAPI: allow using GL or GLES

---
 .../VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp    | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp
index 7a91d82f7444..512c11ff5882 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererVAAPIGLES.cpp
@@ -49,7 +49,7 @@ bool CRendererVAAPI::Configure(unsigned int width, unsigned int height, unsigned
   else
     m_isVAAPIBuffer = false;
 
-  return CLinuxRendererGL::Configure(width, height, d_width, d_height,
+  return CLinuxRendererGLES::Configure(width, height, d_width, d_height,
                                      fps, flags, format, hwPic, orientation);
 }
 
@@ -100,12 +100,12 @@ CRenderInfo CRendererVAAPI::GetRenderInfo()
 
 bool CRendererVAAPI::Supports(ERENDERFEATURE feature)
 {
-  return CLinuxRendererGL::Supports(feature);
+  return CLinuxRendererGLES::Supports(feature);
 }
 
 bool CRendererVAAPI::Supports(ESCALINGMETHOD method)
 {
-  return CLinuxRendererGL::Supports(method);
+  return CLinuxRendererGLES::Supports(method);
 }
 
 EShaderFormat CRendererVAAPI::GetShaderFormat(ERenderFormat renderFormat)

From f12aa9994a9cfda7f2e2251ce8ae54a30589b532 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Thu, 18 May 2017 15:37:00 -0700
Subject: [PATCH 10/10] fixup! Video/VAAPI: make compatible with GLES2

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
index d462484c08e6..557deec8886c 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/VAAPI.cpp
@@ -2635,6 +2635,8 @@ bool COutput::GLInit()
   }
 #endif
 
+// GL_TEXTURE_RECTANGLE_ARB is not available in GLES
+// ref: http://stackoverflow.com/questions/6883160/opengl-es-gl-texture-rectangle
 #ifdef HAS_GL
   if (!g_Windowing.IsExtSupported("GL_ARB_texture_non_power_of_two") &&
        g_Windowing.IsExtSupported("GL_ARB_texture_rectangle"))
