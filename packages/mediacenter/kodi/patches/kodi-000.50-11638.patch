diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 7032bef82557..a19de5e37b30 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -2236,7 +2236,7 @@ bool CApplication::OnAction(const CAction &action)
       if (action.GetID() == ACTION_PLAYER_FORWARD || action.GetID() == ACTION_PLAYER_REWIND)
       {
         float playSpeed = m_pPlayer->GetPlaySpeed();
-        if (playSpeed >= 0.75 && playSpeed <= 1.55)
+        if (playSpeed >= IPlayer::MinTempo() - 0.05 && playSpeed <= IPlayer::MaxTempo() + 0.05)
           playSpeed = 1;
 
         if (action.GetID() == ACTION_PLAYER_REWIND && (playSpeed == 1)) // Enables Rewinding
--- a/xbmc/cores/IPlayer.h
+++ b/xbmc/cores/IPlayer.h
@@ -388,6 +388,9 @@ class IPlayer
   virtual void RenderCapture(unsigned int captureId, unsigned int width, unsigned int height, int flags) {};
   virtual bool RenderCaptureGetPixels(unsigned int captureId, unsigned int millis, uint8_t *buffer, unsigned int size) { return false; };
 
+  static constexpr float const MinTempo() { return 0.8; };
+  static constexpr float const MaxTempo() { return 1.5; };
+
   std::string m_name;
   std::string m_type;
 
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index a40c6191e5e0..d26c3306575c 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -38,7 +38,7 @@
 #include <math.h>
 
 // allow audio for slow and fast speeds (but not rewind/fastforward)
-#define ALLOW_AUDIO(speed) ((speed) > 5*DVD_PLAYSPEED_NORMAL/10 && (speed) <= 15*DVD_PLAYSPEED_NORMAL/10)
+#define ALLOW_AUDIO(speed) ((speed) > DVD_PLAYSPEED_NORMAL * (IPlayer::MinTempo() - 0.05) && (speed) <= DVD_PLAYSPEED_NORMAL * (IPlayer::MaxTempo() + 0.05))
 
 class CDVDMsgAudioCodecChange : public CDVDMsg
 {
diff --git a/xbmc/interfaces/builtins/PlayerBuiltins.cpp b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
index 9464dea60bcc..ee1da537762d 100644
--- a/xbmc/interfaces/builtins/PlayerBuiltins.cpp
+++ b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
@@ -142,7 +142,7 @@ static int PlayerControl(const std::vector<std::string>& params)
     if (g_application.m_pPlayer->IsPlaying() && !g_application.m_pPlayer->IsPaused())
     {
       float playSpeed = g_application.m_pPlayer->GetPlaySpeed();
-      if (playSpeed >= 0.75 && playSpeed <= 1.55)
+      if (playSpeed >= IPlayer::MinTempo() - 0.05 && playSpeed <= IPlayer::MaxTempo() + 0.05)
         playSpeed = 1;
 
       if (paramlow == "rewind" && playSpeed == 1) // Enables Rewinding
@@ -170,11 +170,11 @@ static int PlayerControl(const std::vector<std::string>& params)
         g_application.m_pPlayer->IsPlaying() && !g_application.m_pPlayer->IsPaused())
     {
       float playSpeed = g_application.m_pPlayer->GetPlaySpeed();
-      if (playSpeed >= 0.75 && playSpeed <= 1.55)
+      if (playSpeed >= IPlayer::MinTempo() - 0.05 && playSpeed <= IPlayer::MaxTempo() + 0.05)
       {
-        if (paramlow == "tempodown" && playSpeed > 0.85)
+        if (paramlow == "tempodown" && playSpeed > IPlayer::MinTempo() + 0.05)
           playSpeed -= 0.1;
-        else if (paramlow == "tempoup" && playSpeed < 1.45)
+        else if (paramlow == "tempoup" && playSpeed < IPlayer::MaxTempo() - 0.05)
           playSpeed += 0.1;
 
         playSpeed = floor(playSpeed * 100 + 0.5) / 100;
diff --git a/xbmc/video/windows/GUIWindowFullScreen.cpp b/xbmc/video/windows/GUIWindowFullScreen.cpp
index 1c06aae57174..9d6e6b86e419 100644
--- a/xbmc/video/windows/GUIWindowFullScreen.cpp
+++ b/xbmc/video/windows/GUIWindowFullScreen.cpp
@@ -301,7 +301,7 @@ EVENT_RESULT CGUIWindowFullScreen::OnMouseEvent(const CPoint &point, const CMous
 void CGUIWindowFullScreen::FrameMove()
 {
   float playspeed = g_application.m_pPlayer->GetPlaySpeed();
-  if (playspeed < 0.75 || playspeed > 1.55)
+  if (playspeed < IPlayer::MinTempo() - 0.05 || playspeed > IPlayer::MaxTempo() + 0.05)
     g_infoManager.SetDisplayAfterSeek();
 
   if (!g_application.m_pPlayer->HasPlayer())
diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index a19de5e37b30..37ca5652ddd5 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -2236,7 +2236,7 @@ bool CApplication::OnAction(const CAction &action)
       if (action.GetID() == ACTION_PLAYER_FORWARD || action.GetID() == ACTION_PLAYER_REWIND)
       {
         float playSpeed = m_pPlayer->GetPlaySpeed();
-        if (playSpeed >= IPlayer::MinTempo() - 0.05 && playSpeed <= IPlayer::MaxTempo() + 0.05)
+        if (m_pPlayer->IsPlayingTempo())
           playSpeed = 1;
 
         if (action.GetID() == ACTION_PLAYER_REWIND && (playSpeed == 1)) // Enables Rewinding
diff --git a/xbmc/ApplicationPlayer.cpp b/xbmc/ApplicationPlayer.cpp
index 300038bb62e8..beb5227f518b 100644
--- a/xbmc/ApplicationPlayer.cpp
+++ b/xbmc/ApplicationPlayer.cpp
@@ -210,6 +210,12 @@ bool CApplicationPlayer::IsPlaying() const
   return (player && player->IsPlaying());
 }
 
+bool CApplicationPlayer::IsPlayingTempo() const
+{
+  std::shared_ptr<IPlayer> player = GetInternal();
+  return (IsPlaying() && player->IsPlayingTempo());
+}
+
 bool CApplicationPlayer::IsPausedPlayback()
 {
   return (IsPlaying() && (GetPlaySpeed() == 0));
@@ -745,6 +751,24 @@ bool CApplicationPlayer::SupportsTempo()
     return false;
 }
 
+float CApplicationPlayer::MinTempo() const
+{
+  std::shared_ptr<IPlayer> player = GetInternal();
+  if (player)
+    return player->MinTempo();
+  else
+    return 1.0f;
+}
+
+float CApplicationPlayer::MaxTempo() const
+{
+  std::shared_ptr<IPlayer> player = GetInternal();
+  if (player)
+    return player->MaxTempo();
+  else
+    return 1.0f;
+}
+
 void CApplicationPlayer::FrameMove()
 {
   std::shared_ptr<IPlayer> player = GetInternal();
diff --git a/xbmc/ApplicationPlayer.h b/xbmc/ApplicationPlayer.h
index 3462bfb9a979..2f6fd178e3a6 100644
--- a/xbmc/ApplicationPlayer.h
+++ b/xbmc/ApplicationPlayer.h
@@ -140,6 +140,7 @@ class CApplicationPlayer
   bool  IsPausedPlayback();
   bool  IsPassthrough() const;
   bool  IsPlaying() const;
+  bool  IsPlayingTempo() const;
   bool  IsPlayingAudio() const;
   bool  IsPlayingVideo() const;
   bool  IsPlayingGame() const;
@@ -172,6 +173,8 @@ class CApplicationPlayer
   bool  SwitchChannel(const PVR::CPVRChannelPtr &channel);
   void  SetSpeed(float speed);
   bool SupportsTempo();
+  float MinTempo() const;
+  float MaxTempo() const;
 
   protected:
     std::shared_ptr<IPlayer> GetInternal() const;
--- a/xbmc/cores/IPlayer.h
+++ b/xbmc/cores/IPlayer.h
@@ -234,6 +234,7 @@ class IPlayer
   virtual void OnNothingToQueueNotify() {}
   virtual bool CloseFile(bool reopen = false) = 0;
   virtual bool IsPlaying() const { return false;}
+  virtual bool IsPlayingTempo() {return IsPlaying(); }
   virtual bool CanPause() { return true; };
   virtual void Pause() = 0;
   virtual bool HasVideo() const = 0;
@@ -328,6 +329,8 @@ class IPlayer
   virtual void SetSpeed(float speed) = 0;
   virtual float GetSpeed() = 0;
   virtual bool SupportsTempo() { return false; }
+  virtual float const MinTempo() { return 1.0f; };
+  virtual float const MaxTempo() { return 1.0f; };
 
   // Skip to next track/item inside the current media (if supported).
   virtual bool SkipNext(){return false;}
@@ -388,9 +391,6 @@ class IPlayer
   virtual void RenderCapture(unsigned int captureId, unsigned int width, unsigned int height, int flags) {};
   virtual bool RenderCaptureGetPixels(unsigned int captureId, unsigned int millis, uint8_t *buffer, unsigned int size) { return false; };
 
-  static constexpr float const MinTempo() { return 0.8; };
-  static constexpr float const MaxTempo() { return 1.5; };
-
   std::string m_name;
   std::string m_type;
 
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index 5945d06dea8a..c606474f8ebb 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -763,6 +763,11 @@ bool CVideoPlayer::IsPlaying() const
   return !m_bStop;
 }
 
+bool CVideoPlayer::IsPlayingTempo()
+{
+  return IsPlaying() && GetSpeed() >= MinTempo() - 0.05 && GetSpeed() <= MaxTempo() + 0.05;
+}
+
 void CVideoPlayer::OnStartup()
 {
   m_CurrentVideo.Clear();
@@ -3672,6 +3677,16 @@ bool CVideoPlayer::SupportsTempo()
   return m_canTempo;
 }
 
+const float CVideoPlayer::MinTempo() const
+{
+  return 0.8;
+}
+
+const float CVideoPlayer::MaxTempo() const
+{
+  return 1.5;
+}
+
 bool CVideoPlayer::OpenStream(CCurrentStream& current, int64_t demuxerId, int iStream, int source, bool reset /*= true*/)
 {
   CDemuxStream* stream = NULL;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.h b/xbmc/cores/VideoPlayer/VideoPlayer.h
index 1cc1abbf5a59..e143c4a3297c 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.h
@@ -296,6 +296,7 @@ class CVideoPlayer : public IPlayer, public CThread, public IVideoPlayer, public
   virtual bool OpenFile(const CFileItem& file, const CPlayerOptions &options);
   virtual bool CloseFile(bool reopen = false);
   virtual bool IsPlaying() const;
+  virtual bool IsPlayingTempo();
   virtual void Pause() override;
   virtual bool HasVideo() const;
   virtual bool HasAudio() const;
@@ -357,6 +358,8 @@ class CVideoPlayer : public IPlayer, public CThread, public IVideoPlayer, public
   virtual void SetSpeed(float speed) override;
   virtual float GetSpeed() override;
   virtual bool SupportsTempo() override;
+  virtual float const MinTempo() const;
+  virtual float const MaxTempo() const;
   virtual bool OnAction(const CAction &action);
 
   virtual int GetSourceBitrate();
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index d26c3306575c..a40c6191e5e0 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -38,7 +38,7 @@
 #include <math.h>
 
 // allow audio for slow and fast speeds (but not rewind/fastforward)
-#define ALLOW_AUDIO(speed) ((speed) > DVD_PLAYSPEED_NORMAL * (IPlayer::MinTempo() - 0.05) && (speed) <= DVD_PLAYSPEED_NORMAL * (IPlayer::MaxTempo() + 0.05))
+#define ALLOW_AUDIO(speed) ((speed) > 5*DVD_PLAYSPEED_NORMAL/10 && (speed) <= 15*DVD_PLAYSPEED_NORMAL/10)
 
 class CDVDMsgAudioCodecChange : public CDVDMsg
 {
diff --git a/xbmc/interfaces/builtins/PlayerBuiltins.cpp b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
index ee1da537762d..578e70e236fb 100644
--- a/xbmc/interfaces/builtins/PlayerBuiltins.cpp
+++ b/xbmc/interfaces/builtins/PlayerBuiltins.cpp
@@ -142,7 +142,7 @@ static int PlayerControl(const std::vector<std::string>& params)
     if (g_application.m_pPlayer->IsPlaying() && !g_application.m_pPlayer->IsPaused())
     {
       float playSpeed = g_application.m_pPlayer->GetPlaySpeed();
-      if (playSpeed >= IPlayer::MinTempo() - 0.05 && playSpeed <= IPlayer::MaxTempo() + 0.05)
+      if (g_application.m_pPlayer->IsPlayingTempo())
         playSpeed = 1;
 
       if (paramlow == "rewind" && playSpeed == 1) // Enables Rewinding
@@ -170,11 +170,11 @@ static int PlayerControl(const std::vector<std::string>& params)
         g_application.m_pPlayer->IsPlaying() && !g_application.m_pPlayer->IsPaused())
     {
       float playSpeed = g_application.m_pPlayer->GetPlaySpeed();
-      if (playSpeed >= IPlayer::MinTempo() - 0.05 && playSpeed <= IPlayer::MaxTempo() + 0.05)
+      if (g_application.m_pPlayer->IsPlayingTempo())
       {
-        if (paramlow == "tempodown" && playSpeed > IPlayer::MinTempo() + 0.05)
+        if (paramlow == "tempodown" && playSpeed > g_application.m_pPlayer->MinTempo() + 0.05)
           playSpeed -= 0.1;
-        else if (paramlow == "tempoup" && playSpeed < IPlayer::MaxTempo() - 0.05)
+        else if (paramlow == "tempoup" && playSpeed < g_application.m_pPlayer->MaxTempo() - 0.05)
           playSpeed += 0.1;
 
         playSpeed = floor(playSpeed * 100 + 0.5) / 100;
diff --git a/xbmc/video/windows/GUIWindowFullScreen.cpp b/xbmc/video/windows/GUIWindowFullScreen.cpp
index 9d6e6b86e419..c95d2e99b8a4 100644
--- a/xbmc/video/windows/GUIWindowFullScreen.cpp
+++ b/xbmc/video/windows/GUIWindowFullScreen.cpp
@@ -300,8 +300,7 @@ EVENT_RESULT CGUIWindowFullScreen::OnMouseEvent(const CPoint &point, const CMous
 
 void CGUIWindowFullScreen::FrameMove()
 {
-  float playspeed = g_application.m_pPlayer->GetPlaySpeed();
-  if (playspeed < IPlayer::MinTempo() - 0.05 || playspeed > IPlayer::MaxTempo() + 0.05)
+  if (!g_application.m_pPlayer->IsPlayingTempo())
     g_infoManager.SetDisplayAfterSeek();
 
   if (!g_application.m_pPlayer->HasPlayer())