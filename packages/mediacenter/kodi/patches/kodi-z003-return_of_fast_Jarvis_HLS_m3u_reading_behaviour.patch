From f2122db411026704c2d8b961458c073824cb4a4a Mon Sep 17 00:00:00 2001
From: primaeval <primaeval@users.noreply.github.com>
Date: Sat, 8 Apr 2017 19:03:32 +0200
Subject: [PATCH] return of fast Jarvis HLS m3u reading behaviour

---
 .../DVDInputStreams/DVDInputStreamFFmpeg.cpp       | 16 +++++
 xbmc/playlists/PlayListM3U.cpp                     | 82 ++++++++++++++++++++++
 xbmc/playlists/PlayListM3U.h                       |  1 +
 3 files changed, 99 insertions(+)

diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpeg.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpeg.cpp
index 45c2cb9..a576dd3 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpeg.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamFFmpeg.cpp
@@ -56,6 +56,22 @@ bool CDVDInputStreamFFmpeg::IsEOF()
 
 bool CDVDInputStreamFFmpeg::Open()
 {
+  std::string selected;
+  if (m_item.IsInternetStream()
+      && (m_item.IsType(".m3u8") || m_item.GetMimeType() == "application/vnd.apple.mpegurl"))
+  {
+    // get the available bandwidth and  determine the most appropriate stream
+    int bandwidth = CSettings::GetInstance().GetInt(CSettings::SETTING_NETWORK_BANDWIDTH);
+    if(bandwidth <= 0)
+      bandwidth = INT_MAX;
+    selected = PLAYLIST::CPlayListM3U::GetBestBandwidthStream(m_item.GetPath(), bandwidth);
+    if (selected.compare(m_item.GetPath()) != 0)
+    {
+      CLog::Log(LOGINFO, "CDVDInputStreamFFmpeg: Auto-selecting %s based on configured bandwidth.", selected.c_str());
+      m_item.SetPath(selected);
+    }
+  }
+
   if (!CDVDInputStream::Open())
     return false;
 
diff --git a/xbmc/playlists/PlayListM3U.cpp b/xbmc/playlists/PlayListM3U.cpp
index 2c56128..8e1e22a 100644
--- a/xbmc/playlists/PlayListM3U.cpp
+++ b/xbmc/playlists/PlayListM3U.cpp
@@ -250,6 +250,88 @@ void CPlayListM3U::Save(const std::string& strFileName) const
   file.Close();
 }
 
+std::string CPlayListM3U::GetBestBandwidthStream(const std::string &strFileName, size_t bandwidth)
+{
+  // we may be passed a playlist that does not contain playlists of different
+  // bitrates (eg: this playlist is really the HLS video). So, default the
+  // return to the filename so it can be played
+  char szLine[4096];
+  std::string strLine;
+  size_t maxBandwidth = 0;
+
+  // open the file, and if it fails, return
+  CFile file;
+  if (!file.Open(strFileName) )
+  {
+    file.Close();
+    return strFileName;
+  }
+
+  // get protocol options if they were set, so we can restore them again at the end
+  CURL playlistUrl(strFileName);
+
+  // and set the fallback value
+  CURL subStreamUrl = CURL(strFileName);
+
+  // determine the base
+  CURL basePlaylistUrl(URIUtils::GetParentPath(strFileName));
+  basePlaylistUrl.SetOptions("");
+  basePlaylistUrl.SetProtocolOptions("");
+  std::string basePart = basePlaylistUrl.Get();
+
+  // convert bandwidth specified in kbps to bps used by the m3u8
+  bandwidth *= 1000;
+
+  while (file.ReadString(szLine, 1024))
+  {
+    // read and trim a line
+    strLine = szLine;
+    StringUtils::Trim(strLine);
+
+    // skip the first line
+    if (strLine == StartMarker)
+        continue;
+    else if (StringUtils::StartsWith(strLine, StreamMarker))
+    {
+      // parse the line so we can pull out the bandwidth
+      std::map< std::string, std::string > params = ParseStreamLine(strLine);
+      std::map< std::string, std::string >::iterator it = params.find(BandwidthMarker);
+
+      if (it != params.end())
+      {
+        size_t streamBandwidth = atoi(it->second.c_str());
+        if ((maxBandwidth < streamBandwidth) && (streamBandwidth <= bandwidth))
+        {
+          // read the next line
+          if (!file.ReadString(szLine, 1024))
+            continue;
+
+          strLine = szLine;
+          StringUtils::Trim(strLine);
+
+          // this line was empty
+          if (strLine.empty())
+            continue;
+
+          // store the max bandwidth
+          maxBandwidth = streamBandwidth;
+
+          // if the path is absolute just use it
+          if (CURL::IsFullPath(strLine))
+            subStreamUrl = CURL(strLine);
+          else
+            subStreamUrl = CURL(basePart + strLine);
+        }
+      }
+    }
+  }
+
+  // if any protocol options were set, restore them
+  subStreamUrl.SetProtocolOptions(playlistUrl.GetProtocolOptions());
+  return subStreamUrl.Get();
+}
+
+
 std::map< std::string, std::string > CPlayListM3U::ParseStreamLine(const std::string &streamLine)
 {
   std::map< std::string, std::string > params;
diff --git a/xbmc/playlists/PlayListM3U.h b/xbmc/playlists/PlayListM3U.h
index 0dfcd57..6ea59d6 100644
--- a/xbmc/playlists/PlayListM3U.h
+++ b/xbmc/playlists/PlayListM3U.h
@@ -43,6 +43,7 @@ class CPlayListM3U :
   virtual bool Load(const std::string& strFileName);
   virtual void Save(const std::string& strFileName) const;
 
+  static std::string GetBestBandwidthStream(const std::string &strFileName, size_t bandwidth);
   static std::map<std::string,std::string> ParseStreamLine(const std::string &streamLine);
 };
 }
