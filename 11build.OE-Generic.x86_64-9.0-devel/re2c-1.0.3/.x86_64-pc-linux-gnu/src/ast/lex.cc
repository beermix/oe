/* Generated by re2c 1.0.3 on Wed Nov  8 20:39:40 2017 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	mar
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 37 "../src/ast/lex.re"


#line 58 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	ptr = cur;


#line 56 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 17) YYFILL(17);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 135 "../src/ast/lex.re"
	{
		if (cur != eof) goto echo;
		out.wraw(tok, ptr);
		return Stop;
	}
#line 120 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 152 "../src/ast/lex.re"
	{ goto echo; }
#line 126 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 146 "../src/ast/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 141 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 72 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Parse;
	}
#line 189 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 's':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy32;
	if (yych == 't') goto yy33;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy36;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy37;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy38;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy43;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy44;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy45;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy47;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy50;
	if (yych <= '9') goto yy13;
	goto yy50;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy51;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy52;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy53;
	if (yych == 'n') goto yy54;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy55;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy57;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy59;
	goto yy13;
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy50:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy49;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy49;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy60;
		}
		goto yy13;
	}
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy62;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy65;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy66;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy67;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy68;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy69;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy70;
	goto yy13;
yy60:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy60;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy71;
		if (yych <= '\n') goto yy73;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy75;
		if (yych == ' ') goto yy71;
		goto yy13;
	}
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy76;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy77;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy78;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy79;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy80;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy81;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy82;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy83;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy84;
	goto yy13;
yy71:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy71;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy71;
		if (yych == '"') goto yy85;
		goto yy13;
	}
yy73:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 141 "../src/ast/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 452 "src/ast/lex.cc"
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy87;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy88;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy89;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy90;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy91;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy92;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy94;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy95;
	goto yy13;
yy85:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy85;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy96;
	goto yy97;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy99;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy100;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy102;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy103;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy105;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy106;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy107;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	if (yych == '\r') goto yy75;
	goto yy13;
yy97:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy85;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy109;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy110;
	goto yy13;
yy100:
	++YYCURSOR;
#line 93 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_yymaxfill();
		lex_end_of_comment(out);
		goto echo;
	}
#line 567 "src/ast/lex.cc"
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy111;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy112;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy115;
	goto yy13;
yy107:
	++YYCURSOR;
#line 82 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Reuse;
	}
#line 595 "src/ast/lex.cc"
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy118;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy119;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy123;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy127;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy130;
	goto yy13;
yy119:
	++YYCURSOR;
#line 129 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags(out, true);
		goto echo;
	}
#line 644 "src/ast/lex.cc"
yy121:
	++YYCURSOR;
#line 77 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Rules;
	}
#line 652 "src/ast/lex.cc"
yy123:
	++YYCURSOR;
#line 123 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags(out, false);
		goto echo;
	}
#line 661 "src/ast/lex.cc"
yy125:
	++YYCURSOR;
#line 114 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_line_info();
		out.wdelay_types();
		out.wline_info(cline, get_fname().c_str());
		lex_end_of_comment(out);
		goto echo;
	}
#line 673 "src/ast/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy128:
	++YYCURSOR;
#line 87 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_end_of_comment(out);
		goto echo;
	}
#line 686 "src/ast/lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy132;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy133;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy133:
	++YYCURSOR;
#line 107 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_state_goto(0);
		lex_end_of_comment(out);
		goto echo;
	}
#line 708 "src/ast/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 100 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_yymaxnmatch();
		lex_end_of_comment(out);
		goto echo;
	}
#line 720 "src/ast/lex.cc"
}
#line 153 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
	uint32_t ignored = 0;
	for (;;) {
#line 730 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy140;
		if (yych == '\n') goto yy144;
		goto yy142;
	} else {
		if (yych <= '\r') goto yy146;
		if (yych == '*') goto yy147;
		goto yy142;
	}
yy140:
	++YYCURSOR;
#line 160 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "expected end of block"); }
#line 748 "src/ast/lex.cc"
yy142:
	++YYCURSOR;
yy143:
#line 162 "../src/ast/lex.re"
	{ continue; }
#line 754 "src/ast/lex.cc"
yy144:
	++YYCURSOR;
#line 163 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 759 "src/ast/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy144;
	goto yy143;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy143;
	++YYCURSOR;
#line 164 "../src/ast/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 777 "src/ast/lex.cc"
}
#line 172 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool mtags)
{
	std::string fmt, sep;
	for (;;) {
#line 787 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy157;
		} else {
			if (yych == '\r') goto yy159;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy160;
			if (yych >= 'f') goto yy161;
		} else {
			if (yych == 's') goto yy162;
		}
	}
	++YYCURSOR;
yy153:
#line 179 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "unrecognized configuration"); }
#line 847 "src/ast/lex.cc"
yy154:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
#line 184 "../src/ast/lex.re"
	{ continue; }
#line 857 "src/ast/lex.cc"
yy157:
	++YYCURSOR;
#line 185 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 862 "src/ast/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy157;
	goto yy153;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy163;
	goto yy153;
yy161:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy165;
	goto yy153;
yy162:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy167;
	goto yy153;
yy163:
	++YYCURSOR;
#line 186 "../src/ast/lex.re"
	{
			out.wdelay_tags(new ConfTags(fmt, sep), mtags);
			tok = pos = cur;
			return;
		}
#line 887 "src/ast/lex.cc"
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy168;
yy166:
	YYCURSOR = YYMARKER;
	goto yy153;
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy169;
	goto yy166;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy170;
	goto yy166;
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy171;
	goto yy166;
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy172;
	goto yy166;
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy173;
	goto yy166;
yy172:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy174;
	goto yy166;
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy176;
	goto yy166;
yy174:
	++YYCURSOR;
#line 181 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 926 "src/ast/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy166;
	++YYCURSOR;
#line 182 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 937 "src/ast/lex.cc"
}
#line 191 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
	uint32_t depth, code_line;
scan:
	tchar = cur - pos;
	tok = cur;

#line 950 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
	if (yych <= '.') {
		if (yych <= '#') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy183;
				if (yych <= '\n') goto yy188;
				if (yych >= '\r') goto yy190;
			} else {
				if (yych <= 0x1F) goto yy183;
				if (yych <= '!') goto yy191;
				if (yych <= '"') goto yy193;
				goto yy195;
			}
		} else {
			if (yych <= '\'') {
				if (yych == '%') goto yy196;
				if (yych >= '\'') goto yy197;
			} else {
				if (yych <= '*') {
					if (yych <= ')') goto yy191;
					goto yy199;
				} else {
					if (yych <= ',') goto yy191;
					if (yych >= '.') goto yy200;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '?') {
				if (yych <= '/') goto yy202;
				if (yych <= '9') goto yy183;
				if (yych <= ':') goto yy203;
				goto yy191;
			} else {
				if (yych <= '@') goto yy195;
				if (yych <= 'Z') goto yy204;
				if (yych <= '[') goto yy206;
				goto yy191;
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy204;
				if (yych >= 'a') goto yy204;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy208;
					goto yy204;
				} else {
					if (yych <= '{') goto yy209;
					if (yych <= '|') goto yy191;
				}
			}
		}
	}
yy183:
	++YYCURSOR;
yy184:
#line 351 "../src/ast/lex.re"
	{
					fatal_lc(get_cline(), get_column(), "unexpected character: '%c'", *tok);
					goto scan;
				}
#line 1055 "src/ast/lex.cc"
yy185:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
#line 330 "../src/ast/lex.re"
	{
					goto scan;
				}
#line 1067 "src/ast/lex.cc"
yy188:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy211;
	} else {
		if (yych <= ' ') goto yy211;
		if (yych == '#') goto yy214;
	}
yy189:
#line 339 "../src/ast/lex.re"
	{
		if (cur == eof) return 0;
		pos = cur;
		cline++;
		if (lexer_state == LEX_FLEX_NAME) {
			lexer_state = LEX_NORMAL;
			return TOKEN_FID_END;
		} else {
			goto scan;
		}
	}
#line 1090 "src/ast/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy188;
	goto yy184;
yy191:
	++YYCURSOR;
yy192:
#line 243 "../src/ast/lex.re"
	{ return *tok; }
#line 1100 "src/ast/lex.cc"
yy193:
	++YYCURSOR;
#line 233 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1105 "src/ast/lex.cc"
yy195:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych <= 'Z') goto yy216;
		goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych <= 'z') goto yy216;
		goto yy184;
	}
yy196:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy219;
	goto yy184;
yy197:
	++YYCURSOR;
#line 232 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1125 "src/ast/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy219;
	goto yy192;
yy200:
	++YYCURSOR;
#line 325 "../src/ast/lex.re"
	{
					yylval.regexp = ast_dot(cline, get_column());
					return TOKEN_REGEXP;
				}
#line 1137 "src/ast/lex.cc"
yy202:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy221;
	if (yych == '/') goto yy223;
	goto yy192;
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy225;
	goto yy184;
yy204:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy205:
	if (yybm[0+yych] & 32) {
		goto yy204;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy229;
		}
		if (yych <= 0x1F) goto yy227;
		YYCTXMARKER = YYCURSOR;
		goto yy229;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy227;
			YYCTXMARKER = YYCURSOR;
			goto yy231;
		} else {
			if (yych <= '<') goto yy227;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy231;
			}
			goto yy227;
		}
	}
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy233;
#line 234 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1182 "src/ast/lex.cc"
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy235;
	goto yy205;
yy209:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy236;
		if (yych >= 'A') goto yy240;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy240;
		} else {
			if (yych <= '`') goto yy210;
			if (yych <= 'z') goto yy240;
		}
	}
yy210:
#line 201 "../src/ast/lex.re"
	{
					depth = 1;
					code_line = cline;
					goto code;
				}
#line 1211 "src/ast/lex.cc"
yy211:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy211;
	} else {
		if (yych <= ' ') goto yy211;
		if (yych == '#') goto yy214;
	}
yy213:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy189;
		} else {
			goto yy210;
		}
	} else {
		goto yy237;
	}
yy214:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy214;
		goto yy213;
	} else {
		if (yych <= ' ') goto yy214;
		if (yych == 'l') goto yy242;
		goto yy213;
	}
yy216:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy218;
		if (yych <= '9') goto yy216;
		if (yych >= 'A') goto yy216;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy216;
		} else {
			if (yych <= '`') goto yy218;
			if (yych <= 'z') goto yy216;
		}
	}
yy218:
#line 237 "../src/ast/lex.re"
	{
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
		return TOKEN_REGEXP;
	}
#line 1268 "src/ast/lex.cc"
yy219:
	++YYCURSOR;
#line 227 "../src/ast/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1276 "src/ast/lex.cc"
yy221:
	++YYCURSOR;
#line 221 "../src/ast/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1284 "src/ast/lex.cc"
yy223:
	++YYCURSOR;
#line 218 "../src/ast/lex.re"
	{
				goto nextLine;
			}
#line 1291 "src/ast/lex.cc"
yy225:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy243;
#line 211 "../src/ast/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					code_line = cline;
					goto code;
				}
#line 1302 "src/ast/lex.cc"
yy227:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 308 "../src/ast/lex.re"
	{
					if (!globopts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						std::vector<ASTChar> *str = new std::vector<ASTChar>;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t
								chr = static_cast<uint8_t>(*s),
								col = static_cast<uint32_t>(s - tok);
							str->push_back(ASTChar(chr, col));
						}
						yylval.regexp = ast_str(cline, get_column(), str, false);
						return TOKEN_REGEXP;
					}
				}
#line 1323 "src/ast/lex.cc"
yy229:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy229;
		if (yych <= 0x1F) goto yy245;
		goto yy229;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy245;
		} else {
			if (yych <= '<') goto yy245;
			if (yych >= '?') goto yy245;
		}
	}
yy231:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 303 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1348 "src/ast/lex.cc"
yy233:
	++YYCURSOR;
#line 235 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1353 "src/ast/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy247;
	goto yy205;
yy236:
	++YYCURSOR;
yy237:
#line 276 "../src/ast/lex.re"
	{
					fatal_lc(get_cline(), get_column(), "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1365 "src/ast/lex.cc"
yy238:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych == ',') goto yy248;
	if (yych == '}') goto yy249;
	goto yy213;
yy240:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy213;
			goto yy240;
		} else {
			if (yych <= '@') goto yy213;
			if (yych <= 'Z') goto yy240;
			goto yy213;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy213;
			goto yy240;
		} else {
			if (yych == '}') goto yy251;
			goto yy213;
		}
	}
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy253;
	goto yy213;
yy243:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 207 "../src/ast/lex.re"
	{
					return *tok;
				}
#line 1409 "src/ast/lex.cc"
yy245:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 290 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (globopts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1426 "src/ast/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy254;
	goto yy205;
yy248:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy237;
	if (yych <= '9') goto yy255;
	if (yych == '}') goto yy257;
	goto yy237;
yy249:
	++YYCURSOR;
#line 245 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min))
					{
						fatal_lc(get_cline(), get_column(), "repetition count overflow");
					}
					yylval.bounds.max = yylval.bounds.min;
					return TOKEN_CLOSESIZE;
				}
#line 1449 "src/ast/lex.cc"
yy251:
	++YYCURSOR;
#line 280 "../src/ast/lex.re"
	{
					if (!globopts->FFlag) {
						fatal_lc(get_cline(), get_column(), "curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1460 "src/ast/lex.cc"
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy259;
	goto yy213;
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy260;
	goto yy205;
yy255:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy213;
	if (yych <= '9') goto yy255;
	if (yych == '}') goto yy262;
	goto yy213;
yy257:
	++YYCURSOR;
#line 267 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min))
					{
						fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
					}
					yylval.bounds.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1488 "src/ast/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy264;
	goto yy213;
yy260:
	++YYCURSOR;
#line 288 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1497 "src/ast/lex.cc"
yy262:
	++YYCURSOR;
#line 254 "../src/ast/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min))
					{
						fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max))
					{
						fatal_lc(get_cline(), get_column(), "repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1513 "src/ast/lex.cc"
yy264:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy266;
	if (yych <= '9') goto yy213;
	goto yy266;
yy265:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy266:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy265;
		goto yy213;
	} else {
		if (yych <= ' ') goto yy265;
		if (yych <= '0') goto yy213;
		if (yych >= ':') goto yy213;
		YYCTXMARKER = YYCURSOR;
	}
yy267:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy213;
		} else {
			if (yych <= '\n') goto yy271;
			if (yych <= '\f') goto yy213;
			goto yy273;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy213;
		} else {
			if (yych <= '/') goto yy213;
			if (yych <= '9') goto yy267;
			goto yy213;
		}
	}
yy269:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy269;
		goto yy213;
	} else {
		if (yych <= ' ') goto yy269;
		if (yych == '"') goto yy274;
		goto yy213;
	}
yy271:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 334 "../src/ast/lex.re"
	{
		set_sourceline ();
		return TOKEN_LINE_INFO;
	}
#line 1574 "src/ast/lex.cc"
yy273:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy271;
	goto yy213;
yy274:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy274;
	}
	if (yych <= '\n') goto yy213;
	if (yych >= '#') goto yy277;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy271;
	if (yych == '\r') goto yy273;
	goto yy213;
yy277:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy213;
	goto yy274;
}
#line 355 "../src/ast/lex.re"


code:

#line 1604 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy280;
			if (yych <= '\t') goto yy282;
			goto yy284;
		} else {
			if (yych == '"') goto yy286;
			goto yy282;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy287;
			if (yych <= 'z') goto yy282;
			goto yy288;
		} else {
			if (yych == '}') goto yy290;
			goto yy282;
		}
	}
yy280:
	++YYCURSOR;
#line 418 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal_l(get_cline(), "missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1677 "src/ast/lex.cc"
yy282:
	++YYCURSOR;
yy283:
#line 432 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1685 "src/ast/lex.cc"
yy284:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy292;
		} else {
			if (yych <= '\n') goto yy294;
			if (yych >= '\r') goto yy294;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy292;
		} else {
			if (yych == '#') goto yy295;
		}
	}
yy285:
#line 399 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal_l(get_cline(), "missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1724 "src/ast/lex.cc"
yy286:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy283;
	goto yy299;
yy287:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy283;
	goto yy304;
yy288:
	++YYCURSOR;
#line 371 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal_l(get_cline(), "Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1749 "src/ast/lex.cc"
yy290:
	++YYCURSOR;
#line 359 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal_l(get_cline(), "Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1765 "src/ast/lex.cc"
yy292:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy306;
	} else {
		if (yych <= ' ') goto yy306;
		if (yych == '#') goto yy295;
	}
yy293:
	YYCURSOR -= 1;
#line 386 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal_l(get_cline(), "missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1791 "src/ast/lex.cc"
yy294:
	++YYCURSOR;
	goto yy293;
yy295:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy295;
	}
	if (yych == 'l') goto yy308;
yy297:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy285;
		} else {
			goto yy283;
		}
	} else {
		goto yy293;
	}
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy299:
	if (yybm[0+yych] & 32) {
		goto yy298;
	}
	if (yych <= '\n') goto yy297;
	if (yych >= '#') goto yy302;
yy300:
	++YYCURSOR;
#line 429 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1830 "src/ast/lex.cc"
yy302:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy297;
	goto yy298;
yy303:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy304:
	if (yybm[0+yych] & 64) {
		goto yy303;
	}
	if (yych <= '\n') goto yy297;
	if (yych <= '\'') goto yy300;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy297;
	goto yy303;
yy306:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy306;
		goto yy297;
	} else {
		if (yych <= ' ') goto yy306;
		if (yych == '#') goto yy295;
		goto yy297;
	}
yy308:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy297;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy297;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy297;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy313;
	if (yych <= '9') goto yy297;
	goto yy313;
yy312:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy313:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy297;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych <= '0') goto yy297;
		if (yych >= ':') goto yy297;
		YYCTXMARKER = YYCURSOR;
	}
yy314:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy314;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy297;
		if (yych <= '\t') goto yy316;
		if (yych <= '\n') goto yy318;
		goto yy297;
	} else {
		if (yych <= '\r') goto yy320;
		if (yych != ' ') goto yy297;
	}
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy316;
		goto yy297;
	} else {
		if (yych <= ' ') goto yy316;
		if (yych == '"') goto yy321;
		goto yy297;
	}
yy318:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 382 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1925 "src/ast/lex.cc"
yy320:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy318;
	goto yy297;
yy321:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy297;
		goto yy321;
	} else {
		if (yych <= '"') goto yy323;
		if (yych == '\\') goto yy324;
		goto yy321;
	}
yy323:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy318;
	if (yych == '\r') goto yy320;
	goto yy297;
yy324:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy297;
	goto yy321;
}
#line 435 "../src/ast/lex.re"


comment:

#line 1959 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy329;
	} else {
		if (yych <= '*') goto yy331;
		if (yych == '/') goto yy332;
	}
	++YYCURSOR;
yy328:
#line 467 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2014 "src/ast/lex.cc"
yy329:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy333;
	}
	if (yych == '#') goto yy336;
yy330:
#line 458 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2032 "src/ast/lex.cc"
yy331:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy338;
	goto yy328;
yy332:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy340;
	goto yy328;
yy333:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy333;
	}
	if (yych == '#') goto yy336;
yy335:
	YYCURSOR = YYMARKER;
	goto yy330;
yy336:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy336;
		goto yy335;
	} else {
		if (yych <= ' ') goto yy336;
		if (yych == 'l') goto yy342;
		goto yy335;
	}
yy338:
	++YYCURSOR;
#line 439 "../src/ast/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2077 "src/ast/lex.cc"
yy340:
	++YYCURSOR;
#line 449 "../src/ast/lex.re"
	{
					++depth;
					fatal_lc(get_cline(), get_column(), "ambiguous /* found");
					goto comment;
				}
#line 2086 "src/ast/lex.cc"
yy342:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy335;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy335;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy335;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy347;
	if (yych <= '9') goto yy335;
	goto yy347;
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy347:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy346;
		goto yy335;
	} else {
		if (yych <= ' ') goto yy346;
		if (yych <= '0') goto yy335;
		if (yych >= ':') goto yy335;
		YYCTXMARKER = YYCURSOR;
	}
yy348:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy348;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy335;
		if (yych <= '\t') goto yy350;
		if (yych <= '\n') goto yy352;
		goto yy335;
	} else {
		if (yych <= '\r') goto yy354;
		if (yych != ' ') goto yy335;
	}
yy350:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy350;
		goto yy335;
	} else {
		if (yych <= ' ') goto yy350;
		if (yych == '"') goto yy355;
		goto yy335;
	}
yy352:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 454 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2148 "src/ast/lex.cc"
yy354:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy352;
	goto yy335;
yy355:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy355;
	}
	if (yych <= '\n') goto yy335;
	if (yych >= '#') goto yy358;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy352;
	if (yych == '\r') goto yy354;
	goto yy335;
yy358:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy335;
	goto yy355;
}
#line 474 "../src/ast/lex.re"


nextLine:

#line 2178 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy363;
	++YYCURSOR;
#line 485 "../src/ast/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2191 "src/ast/lex.cc"
yy363:
	++YYCURSOR;
#line 478 "../src/ast/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2202 "src/ast/lex.cc"
}
#line 490 "../src/ast/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const AST *Scanner::lex_cls(bool neg)
{
	std::vector<ASTRange> *cls = new std::vector<ASTRange>;
	uint32_t u, l, c, c0 = get_column();
fst:
	tok = cur;
	c = get_column();
	
#line 2230 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy368;
#line 516 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2238 "src/ast/lex.cc"
yy368:
	++YYCURSOR;
#line 515 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2243 "src/ast/lex.cc"
}
#line 517 "../src/ast/lex.re"

snd:
	
#line 2249 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy373;
yy372:
#line 520 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2258 "src/ast/lex.cc"
yy373:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy375;
	YYCURSOR = YYMARKER;
	goto yy372;
yy375:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 521 "../src/ast/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(cline, l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2276 "src/ast/lex.cc"
}
#line 529 "../src/ast/lex.re"

add:
	cls->push_back(ASTRange(l, u, c));
	goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	const uint32_t l = get_cline(), c = get_column();
	
#line 2290 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych == '\n') goto yy381;
	} else {
		if (yych <= '\r') goto yy383;
		if (yych == '\\') goto yy384;
	}
	++YYCURSOR;
yy380:
#line 546 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2306 "src/ast/lex.cc"
yy381:
	++YYCURSOR;
#line 541 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2311 "src/ast/lex.cc"
yy383:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy381;
	goto yy380;
yy384:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= ']') {
		if (yych <= '3') {
			if (yych <= '\r') {
				if (yych == '\n') goto yy381;
				if (yych >= '\r') goto yy387;
			} else {
				if (yych == '-') goto yy388;
				if (yych >= '0') goto yy390;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy392;
				if (yych == 'U') goto yy393;
			} else {
				if (yych <= 'X') goto yy395;
				if (yych <= '[') goto yy385;
				if (yych <= '\\') goto yy396;
				goto yy398;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= '`') goto yy385;
				if (yych <= 'a') goto yy400;
				if (yych <= 'b') goto yy402;
			} else {
				if (yych <= 'f') goto yy404;
				if (yych == 'n') goto yy406;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy408;
				if (yych <= 's') goto yy385;
				if (yych <= 't') goto yy410;
				goto yy395;
			} else {
				if (yych <= 'v') goto yy412;
				if (yych == 'x') goto yy414;
			}
		}
	}
yy385:
	++YYCURSOR;
yy386:
#line 559 "../src/ast/lex.re"
	{
			warn.useless_escape(cline, get_column(), tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2368 "src/ast/lex.cc"
yy387:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy381;
	goto yy386;
yy388:
	++YYCURSOR;
#line 557 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2377 "src/ast/lex.cc"
yy390:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy391;
	if (yych <= '7') goto yy415;
yy391:
#line 543 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2386 "src/ast/lex.cc"
yy392:
	++YYCURSOR;
	goto yy391;
yy393:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy394;
		if (yych <= '9') goto yy417;
	} else {
		if (yych <= 'F') goto yy417;
		if (yych <= '`') goto yy394;
		if (yych <= 'f') goto yy417;
	}
yy394:
#line 542 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2404 "src/ast/lex.cc"
yy395:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy394;
		if (yych <= '9') goto yy418;
		goto yy394;
	} else {
		if (yych <= 'F') goto yy418;
		if (yych <= '`') goto yy394;
		if (yych <= 'f') goto yy418;
		goto yy394;
	}
yy396:
	++YYCURSOR;
#line 556 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2422 "src/ast/lex.cc"
yy398:
	++YYCURSOR;
#line 558 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2427 "src/ast/lex.cc"
yy400:
	++YYCURSOR;
#line 549 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2432 "src/ast/lex.cc"
yy402:
	++YYCURSOR;
#line 550 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2437 "src/ast/lex.cc"
yy404:
	++YYCURSOR;
#line 551 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2442 "src/ast/lex.cc"
yy406:
	++YYCURSOR;
#line 552 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2447 "src/ast/lex.cc"
yy408:
	++YYCURSOR;
#line 553 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2452 "src/ast/lex.cc"
yy410:
	++YYCURSOR;
#line 554 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2457 "src/ast/lex.cc"
yy412:
	++YYCURSOR;
#line 555 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2462 "src/ast/lex.cc"
yy414:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy394;
		if (yych <= '9') goto yy419;
		goto yy394;
	} else {
		if (yych <= 'F') goto yy419;
		if (yych <= '`') goto yy394;
		if (yych <= 'f') goto yy419;
		goto yy394;
	}
yy415:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy416;
	if (yych <= '7') goto yy420;
yy416:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy391;
	} else {
		goto yy394;
	}
yy417:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy422;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy422;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy422;
		goto yy416;
	}
yy418:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy423;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy423;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy423;
		goto yy416;
	}
yy419:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy424;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy424;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy424;
		goto yy416;
	}
yy420:
	++YYCURSOR;
#line 548 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2527 "src/ast/lex.cc"
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy426;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy426;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy426;
		goto yy416;
	}
yy423:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy419;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy419;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy419;
		goto yy416;
	}
yy424:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2556 "src/ast/lex.cc"
yy426:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych >= ':') goto yy416;
	} else {
		if (yych <= 'F') goto yy427;
		if (yych <= '`') goto yy416;
		if (yych >= 'g') goto yy416;
	}
yy427:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy418;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy418;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy418;
		goto yy416;
	}
}
#line 563 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	const uint32_t l = get_cline(), c = get_column();
	
#line 2590 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych == '\n') goto yy432;
	} else {
		if (yych <= '\r') goto yy434;
		if (yych == '\\') goto yy435;
	}
	++YYCURSOR;
yy431:
#line 578 "../src/ast/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2609 "src/ast/lex.cc"
yy432:
	++YYCURSOR;
#line 573 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 2614 "src/ast/lex.cc"
yy434:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy432;
	goto yy431;
yy435:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= '\f') {
				if (yych == '\n') goto yy432;
			} else {
				if (yych <= '\r') goto yy438;
				if (yych <= '/') goto yy436;
				if (yych <= '3') goto yy439;
				goto yy441;
			}
		} else {
			if (yych <= 'W') {
				if (yych == 'U') goto yy442;
			} else {
				if (yych <= 'X') goto yy444;
				if (yych == '\\') goto yy445;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy447;
				if (yych <= 'b') goto yy449;
			} else {
				if (yych <= 'f') goto yy451;
				if (yych == 'n') goto yy453;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy455;
				if (yych <= 's') goto yy436;
				if (yych <= 't') goto yy457;
				goto yy444;
			} else {
				if (yych <= 'v') goto yy459;
				if (yych == 'x') goto yy461;
			}
		}
	}
yy436:
	++YYCURSOR;
yy437:
#line 592 "../src/ast/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(cline, get_column(), tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2670 "src/ast/lex.cc"
yy438:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy432;
	goto yy437;
yy439:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy440;
	if (yych <= '7') goto yy462;
yy440:
#line 575 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2683 "src/ast/lex.cc"
yy441:
	++YYCURSOR;
	goto yy440;
yy442:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy443;
		if (yych <= '9') goto yy464;
	} else {
		if (yych <= 'F') goto yy464;
		if (yych <= '`') goto yy443;
		if (yych <= 'f') goto yy464;
	}
yy443:
#line 574 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2701 "src/ast/lex.cc"
yy444:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy443;
		if (yych <= '9') goto yy465;
		goto yy443;
	} else {
		if (yych <= 'F') goto yy465;
		if (yych <= '`') goto yy443;
		if (yych <= 'f') goto yy465;
		goto yy443;
	}
yy445:
	++YYCURSOR;
#line 591 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2719 "src/ast/lex.cc"
yy447:
	++YYCURSOR;
#line 584 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2724 "src/ast/lex.cc"
yy449:
	++YYCURSOR;
#line 585 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2729 "src/ast/lex.cc"
yy451:
	++YYCURSOR;
#line 586 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2734 "src/ast/lex.cc"
yy453:
	++YYCURSOR;
#line 587 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2739 "src/ast/lex.cc"
yy455:
	++YYCURSOR;
#line 588 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2744 "src/ast/lex.cc"
yy457:
	++YYCURSOR;
#line 589 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2749 "src/ast/lex.cc"
yy459:
	++YYCURSOR;
#line 590 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2754 "src/ast/lex.cc"
yy461:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy443;
		if (yych <= '9') goto yy466;
		goto yy443;
	} else {
		if (yych <= 'F') goto yy466;
		if (yych <= '`') goto yy443;
		if (yych <= 'f') goto yy466;
		goto yy443;
	}
yy462:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy463;
	if (yych <= '7') goto yy467;
yy463:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy440;
	} else {
		goto yy443;
	}
yy464:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych <= '9') goto yy469;
		goto yy463;
	} else {
		if (yych <= 'F') goto yy469;
		if (yych <= '`') goto yy463;
		if (yych <= 'f') goto yy469;
		goto yy463;
	}
yy465:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych <= '9') goto yy470;
		goto yy463;
	} else {
		if (yych <= 'F') goto yy470;
		if (yych <= '`') goto yy463;
		if (yych <= 'f') goto yy470;
		goto yy463;
	}
yy466:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych <= '9') goto yy471;
		goto yy463;
	} else {
		if (yych <= 'F') goto yy471;
		if (yych <= '`') goto yy463;
		if (yych <= 'f') goto yy471;
		goto yy463;
	}
yy467:
	++YYCURSOR;
#line 583 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2819 "src/ast/lex.cc"
yy469:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych <= '9') goto yy473;
		goto yy463;
	} else {
		if (yych <= 'F') goto yy473;
		if (yych <= '`') goto yy463;
		if (yych <= 'f') goto yy473;
		goto yy463;
	}
yy470:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych <= '9') goto yy466;
		goto yy463;
	} else {
		if (yych <= 'F') goto yy466;
		if (yych <= '`') goto yy463;
		if (yych <= 'f') goto yy466;
		goto yy463;
	}
yy471:
	++YYCURSOR;
#line 582 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2848 "src/ast/lex.cc"
yy473:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych >= ':') goto yy463;
	} else {
		if (yych <= 'F') goto yy474;
		if (yych <= '`') goto yy463;
		if (yych >= 'g') goto yy463;
	}
yy474:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy463;
		if (yych <= '9') goto yy465;
		goto yy463;
	} else {
		if (yych <= 'F') goto yy465;
		if (yych <= '`') goto yy463;
		if (yych <= 'f') goto yy465;
		goto yy463;
	}
}
#line 598 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
	const uint32_t column = get_column();
	std::vector<ASTChar> *str = new std::vector<ASTChar>;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) return ast_str(cline, column, str, quote == '\'');
		str->push_back(ASTChar(c, get_column()));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2892 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy479;
	} else {
		if (yych <= '"') goto yy481;
		if (yych <= '0') goto yy477;
		if (yych <= '9') goto yy482;
	}
yy477:
	++YYCURSOR;
yy478:
#line 640 "../src/ast/lex.re"
	{
  					goto sourceline;
  				}
#line 2945 "src/ast/lex.cc"
yy479:
	++YYCURSOR;
#line 628 "../src/ast/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2961 "src/ast/lex.cc"
yy481:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy478;
	goto yy486;
yy482:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy482;
	}
#line 617 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal_lc(get_cline(), get_column(), "line number overflow");
					}
					goto sourceline; 
				}
#line 2981 "src/ast/lex.cc"
yy485:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy486:
	if (yybm[0+yych] & 128) {
		goto yy485;
	}
	if (yych <= '\n') goto yy487;
	if (yych <= '"') goto yy488;
	goto yy490;
yy487:
	YYCURSOR = YYMARKER;
	goto yy478;
yy488:
	++YYCURSOR;
#line 624 "../src/ast/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 3003 "src/ast/lex.cc"
yy490:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy487;
	goto yy485;
}
#line 643 "../src/ast/lex.re"

}

} // end namespace re2c
