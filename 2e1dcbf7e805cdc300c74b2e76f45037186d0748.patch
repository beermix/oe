From 2e1dcbf7e805cdc300c74b2e76f45037186d0748 Mon Sep 17 00:00:00 2001
From: dimitriss <sakellariou.d@gmail.com>
Date: Wed, 13 Jul 2016 14:26:26 +0300
Subject: [PATCH] sync code with 1.0.9

---
 torrent2http.go | 65 +++++++++++++++++++++++++--------------------------------
 torrentfs.go    | 28 ++++++++++---------------
 2 files changed, 39 insertions(+), 54 deletions(-)

diff --git a/torrent2http.go b/torrent2http.go
index 9f9a224..608657a 100644
--- a/torrent2http.go
+++ b/torrent2http.go
@@ -108,7 +108,6 @@ var (
 	config Config
 	session lt.Session
 	torrentHandle lt.TorrentHandle
-	sessionHandle lt.SessionHandle
 	torrentFS *TorrentFS
 	forceShutdown chan bool
 	httpListener net.Listener
@@ -268,7 +267,7 @@ func waitForAlert(name string, timeout time.Duration) lt.Alert {
 	start := time.Now()
 	for {
 		for {
-			alert := sessionHandle.WaitForAlert(lt.Milliseconds__SWIG_0(100))
+			alert := session.GetHandle().WaitForAlert(lt.Milliseconds__SWIG_0(100))
 			if time.Now().Sub(start) > timeout {
 				return nil
 			}
@@ -287,7 +286,7 @@ func removeTorrent() {
 	var files []string
 
 	state := torrentHandle.Status().GetState()
-	if int(state) < 2 && !config.keepFiles {
+	if state != STATE_CHECKING_FILES && state != STATE_QUEUED_FOR_CHECKING && !config.keepFiles {
 		if !config.keepComplete && !config.keepIncomplete {
 			flag = int(lt.SessionHandleDeleteFiles)
 		} else {
@@ -295,7 +294,7 @@ func removeTorrent() {
 		}
 	}
 	log.Println("Removing the torrent")
-	sessionHandle.RemoveTorrent(torrentHandle, flag)
+	session.GetHandle().RemoveTorrent(torrentHandle, flag)
 	if flag != 0 || len(files) > 0 {
 		log.Println("Waiting for files to be removed")
 		waitForAlert("cache_flushed_alert", 15*time.Second)
@@ -307,17 +306,13 @@ func saveResumeData(async bool) bool {
 	if !torrentHandle.Status().GetNeedSaveResume() || config.resumeFile == "" {
 		return false
 	}
-	state := torrentHandle.Status().GetState()
-        if state != STATE_QUEUED_FOR_CHECKING && state != STATE_CHECKING_FILES && state != STATE_QUEUED_FOR_CHECKING && config.keepFiles {
-
-		torrentHandle.SaveResumeData(3)
-		if !async {
-			alert := waitForAlert("save_resume_data_alert", 5*time.Second)
-			if alert == nil {
-				return false
-			}
-			processSaveResumeDataAlert(alert)
+	torrentHandle.SaveResumeData(3)
+	if !async {
+		alert := waitForAlert("save_resume_data_alert", 5*time.Second)
+		if alert == nil {
+			return false
 		}
+		processSaveResumeDataAlert(alert)
 	}
 	return true
 }
@@ -327,7 +322,7 @@ func shutdown(wg *sync.WaitGroup) {
 	log.Println("Stopping torrent2http...")
 	torrentFS.Shutdown()
 	if session != nil {
-		sessionHandle.Pause()
+		session.GetHandle().Pause()
 		waitForAlert("torrent_paused_alert", 10*time.Second)
 		if torrentHandle != nil {
 			saveResumeData(false)
@@ -348,7 +343,7 @@ func parseFlags(wg *sync.WaitGroup) {
 	flag.IntVar(&config.listenPort, "listen-port", 6881, "Use specified port for incoming connections")
 	flag.IntVar(&config.maxDownloadRate, "dl-rate", -1, "Max download rate (kB/s)")
 	flag.IntVar(&config.maxUploadRate, "ul-rate", -1, "Max upload rate (kB/s)")
-	flag.IntVar(&config.connectionsLimit, "connections-limit", 200, "Number of connections")
+	flag.IntVar(&config.connectionsLimit, "connections-limit", 100, "Number of connections")
 	flag.IntVar(&config.encryption, "encryption", 1, "Encryption: 0=forced 1=enabled (default) 2=disabled")
 
 	flag.Parse()
@@ -364,7 +359,7 @@ func parseFlags(wg *sync.WaitGroup) {
 	}
 
 	//add static config
-	config.fileIndex = -1
+	config.fileIndex = -2
 	config.idleTimeout = -1
 	config.keepComplete = false
 	config.keepIncomplete = false
@@ -453,7 +448,7 @@ func startHTTP(wg *sync.WaitGroup) {
 }
 
 func popAlert(logAlert bool) lt.Alert {
-	alert := sessionHandle.PopAlert()
+	alert := session.GetHandle().PopAlert()
 	if alert.Swigcptr() == 0 {
 		return nil
 	}
@@ -499,10 +494,7 @@ func consumeAlerts() {
 			break
 		}
 		if alert.What() == "save_resume_data_alert" {
-			state := torrentHandle.Status().GetState()
-			if state != STATE_QUEUED_FOR_CHECKING && state != STATE_CHECKING_FILES && state != STATE_QUEUED_FOR_CHECKING && config.keepFiles {
-				processSaveResumeDataAlert(alert)
-			}
+			processSaveResumeDataAlert(alert)
 		}
 	}
 }
@@ -573,19 +565,19 @@ func buildTorrentParams(uri string) lt.AddTorrentParams {
 func startServices(wg *sync.WaitGroup) {
 	if config.enableDHT {
 		log.Println("Starting DHT...")
-		sessionHandle.StartDht()
+		session.GetHandle().StartDht()
 	}
 	if config.enableLSD {
 		log.Println("Starting LSD...")
-		sessionHandle.StartLsd()
+		session.GetHandle().StartLsd()
 	}
 	if config.enableUPNP {
 		log.Println("Starting UPNP...")
-		sessionHandle.StartUpnp()
+		session.GetHandle().StartUpnp()
 	}
 	if config.enableNATPMP {
 		log.Println("Starting NATPMP...")
-		sessionHandle.StartNatpmp()
+		session.GetHandle().StartNatpmp()
 	}
 	defer wg.Done()
 }
@@ -597,15 +589,14 @@ func startSession(wg *sync.WaitGroup) {
 		lt.NewFingerprint("LT", lt.LIBTORRENT_VERSION_MAJOR, lt.LIBTORRENT_VERSION_MINOR, 0, 0),
 		int(lt.SessionHandleAddDefaultPlugins),
 	)
-	sessionHandle = session.GetHandle()
 	alertMask := uint(lt.AlertErrorNotification) | uint(lt.AlertStorageNotification) |
 	uint(lt.AlertTrackerNotification) | uint(lt.AlertStatusNotification)
 	if config.debugAlerts {
 		alertMask |= uint(lt.AlertDebugNotification)
 	}
-	sessionHandle.SetAlertMask(alertMask)
+	session.GetHandle().SetAlertMask(alertMask)
 
-	settings := sessionHandle.Settings()
+	settings := session.GetHandle().Settings()
 	//default
 	settings.SetRequestTimeout(config.requestTimeout)
 	settings.SetPeerConnectTimeout(config.peerConnectTimeout)
@@ -643,7 +634,7 @@ func startSession(wg *sync.WaitGroup) {
 
 
 	//set
-	sessionHandle.SetSettings(settings)
+	session.GetHandle().SetSettings(settings)
 
 
 	err := lt.NewErrorCode()
@@ -653,12 +644,12 @@ func startSession(wg *sync.WaitGroup) {
 		portLower = rand.Intn(16374)+49152
 	}
 	portUpper := portLower + 10
-	sessionHandle.ListenOn(lt.NewStd_pair_int_int(portLower, portUpper), err)
+	session.GetHandle().ListenOn(lt.NewStd_pair_int_int(portLower, portUpper), err)
 	if err.Value() != 0 {
 		log.Fatalln(err.Message())
 	}
 
-	settings = sessionHandle.Settings()
+	settings = session.GetHandle().Settings()
 	if (config.userAgent != "") {
 		settings.SetUserAgent(config.userAgent)
 	}
@@ -675,7 +666,7 @@ func startSession(wg *sync.WaitGroup) {
 	settings.SetEnableOutgoingTcp(config.enableTCP)
 	settings.SetEnableIncomingUtp(config.enableUTP)
 	settings.SetEnableOutgoingUtp(config.enableUTP)
-	sessionHandle.SetSettings(settings)
+	session.GetHandle().SetSettings(settings)
 
 	if config.dhtRouters != "" {
 		routers := strings.Split(config.dhtRouters, ",")
@@ -692,7 +683,7 @@ func startSession(wg *sync.WaitGroup) {
 						log.Fatalln(err)
 					}
 				}
-				sessionHandle.AddDhtRouter(lt.NewStd_pair_string_int(host, port))
+				session.GetHandle().AddDhtRouter(lt.NewStd_pair_string_int(host, port))
 				log.Printf("Added DHT router: %s:%d", host, port)
 			}
 		}
@@ -704,7 +695,7 @@ func startSession(wg *sync.WaitGroup) {
 	encryptionSettings.SetInEncPolicy(byte(lt.LibtorrentPe_settingsEnc_policy(config.encryption)))
 	encryptionSettings.SetAllowedEncLevel(byte(lt.PeSettingsBoth))
 	encryptionSettings.SetPreferRc4(true)
-	sessionHandle.SetPeSettings(encryptionSettings)
+	session.GetHandle().SetPeSettings(encryptionSettings)
 
 	defer wg.Done()
 }
@@ -712,7 +703,7 @@ func startSession(wg *sync.WaitGroup) {
 func addTorrent(torrentParams lt.AddTorrentParams, wg *sync.WaitGroup) {
 	log.Println("Adding torrent")
 	error := lt.NewErrorCode()
-	torrentHandle = sessionHandle.AddTorrent(torrentParams, error)
+	torrentHandle = session.GetHandle().AddTorrent(torrentParams, error)
 	if error.Value() != 0 {
 		log.Fatalln(error.Message())
 	}
@@ -799,4 +790,4 @@ func main() {
 	wg.Wait()
 	log.Println("Shutdown completed")
 	os.Exit(0)
-}
+}
\ No newline at end of file
diff --git a/torrentfs.go b/torrentfs.go
index 559b146..d375f92 100644
--- a/torrentfs.go
+++ b/torrentfs.go
@@ -53,19 +53,16 @@ func NewTorrentFS(handle lt.TorrentHandle, startIndex int) *TorrentFS {
 	}
 	go func() {
 		tfs.waitForMetadata()
-		time.Sleep(1500 * time.Millisecond)
 		tfs.waitForStart()
-		time.Sleep(1500 * time.Millisecond)
-		//TODO: Investigate why setting priority breaks fast resume
-		//if startIndex < 0 {
-		//	startIndex = tfs.FindLargestFileIndex()
-		//}
+		if startIndex < 0 {
+			startIndex = tfs.FindLargestFileIndex()
+		}
 		for i := 0; i < tfs.TorrentInfo().NumFiles(); i++ {
-			//if startIndex == i {
+			if startIndex == i {
 				tfs.setPriority(i, 1)
-			//} else {
-			//	tfs.setPriority(i, 0)
-			//}
+			} else {
+				tfs.setPriority(i, 0)
+			}
 		}
 	}()
 	return &tfs
@@ -124,13 +121,11 @@ func (tfs *TorrentFS) waitForMetadata() {
 }
 
 func (tfs *TorrentFS) waitForStart() {
-        for int(tfs.handle.Status().GetState()) < 3 || int(tfs.handle.Status().GetState()) > 5  {
-                time.Sleep(250 * time.Millisecond)
-        }
+	for int(tfs.handle.Status().GetState()) < 3 || int(tfs.handle.Status().GetState()) > 5  {
+		time.Sleep(250 * time.Millisecond)
+	}
 }
 
-
-
 func (tfs *TorrentFS) HasTorrentInfo() bool {
 	return tfs.info != nil
 }
@@ -182,7 +177,6 @@ func (tfs *TorrentFS) FindLargestFileIndex() int {
 	return index
 }
 
-
 func (tfs *TorrentFS) SavePath() string {
 	return tfs.handle.Status().GetSavePath()
 }
@@ -507,4 +501,4 @@ func (td *TorrentDir) IsDir() bool {
 
 func (td *TorrentDir) Sys() interface {} {
 	return nil
-}
+}
\ No newline at end of file
