FROM cross-compiler:linux-x64

RUN mkdir -p /build
WORKDIR /build

# Install Boost.System
ENV BOOST_VERSION 1.62.0
RUN apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade && apt-get install -y busybox automake apt-utils libtool git
RUN curl -L http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_`echo ${BOOST_VERSION} | sed 's/\\./_/g'`.tar.bz2/download | tar xvj && \
    cd boost_`echo ${BOOST_VERSION} | sed 's/\\./_/g'`/ && \
    ./bootstrap.sh --prefix=${CROSS_ROOT} && \
    echo "using gcc : linux : ${CROSS_TRIPLE}-c++ ;" > ${HOME}/user-config.jam && \
    ./b2 --with-date_time --with-system --with-regex --with-exception --with-random --with-signals --with-serialization --with-atomic --with-chrono --with-thread --prefix=${CROSS_ROOT} toolset=gcc-linux link=static variant=release threading=multi target-os=linux install && \
    rm -rf ${HOME}/user-config.jam && \
    rm -rf `pwd`

# Install OpenSSL
ENV OPENSSL_VERSION 1.1.0c
RUN curl -L http://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar xvz && \
    cd openssl-${OPENSSL_VERSION}/ && \
    CROSS_COMPILE=${CROSS_TRIPLE}- ./Configure threads no-shared enable-ec_nistp_64_gcc_128 linux-x86_64 --prefix=${CROSS_ROOT} && \
    make && make install_sw && \
    rm -rf `pwd`

# Install SWIG
ENV SWIG_VERSION 3.0.10
RUN curl -L https://sourceforge.net/projects/swig/files/swig/swig-3.0.10/swig-3.0.10.tar.gz | tar xvz && \
    cd swig-3.0.10 && \
    CFLAGS="${CFLAGS} -O2 -pipe -fstack-protector-strong" \
    CPPFLAGS="-D_FORTIFY_SOURCE=2" \
    CXXFLAGS="${CXXFLAGS} ${CFLAGS}" \
    ./configure && \
    make && \
    make install && \
    rm -rf `pwd`

# Build Golang
ENV GOPATH=/usr/.go
ENV GOOS=linux
ENV GOARCH=amd64
ENV CGO_ENABLED=0
RUN git clone --progress --depth 1 -b release-branch.go1.4 git://github.com/golang/go /usr/go1.4 && \
	cd /usr/go1.4/src && \
	\
	bash make.bash
	
ENV GOPATH=/usr/.go
ENV GOROOT_BOOTSTRAP=/usr/go1.4
ENV GOOS=linux
ENV CGO_ENABLED=1
ENV CGO_NO_EMULATION=1
RUN git clone --progress --depth 1 -b release-branch.go1.7 git://github.com/golang/go /usr/go && \
	cd /usr/go/src && \
	\
	bash make.bash && \
	rm -rf `pwd`

# Install libtorrent
ENV LIBTORRENT_VERSION 1.0.10
RUN curl -L https://github.com/arvidn/libtorrent/releases/download/libtorrent-1_0_10/libtorrent-rasterbar-1.0.10.tar.gz | tar xvz && \
    cd libtorrent-* && \
    autoreconf --verbose --install --force -I m4 && \
    \
    sed -i 's/$PKG_CONFIG openssl --libs-only-/$PKG_CONFIG openssl --static --libs-only-/' ./configure && \
    sed -i -e s/Windows.h/windows.h/ -e s/Wincrypt.h/wincrypt.h/ ./ed25519/src/seed.cpp && \
    \
    CC=${CROSS_TRIPLE}-gcc CXX=${CROSS_TRIPLE}-g++ \
    CFLAGS="${CFLAGS} -O3 -pipe -fstack-protector-strong" \
    CPPFLAGS="-D_FORTIFY_SOURCE=2" \
    LDFLAGS="-Wl,-O1,--as-needed" \
    CXXFLAGS="${CXXFLAGS} ${CFLAGS}" \
    ./configure \
        --enable-static \
        --disable-geoip \
        --disable-shared \
        --disable-deprecated-functions \
        --host=${CROSS_TRIPLE} \
        --prefix=${CROSS_ROOT} \
        --with-boost=${CROSS_ROOT} --with-boost-libdir=${CROSS_ROOT}/lib && \
    \
    make && make install && \
    rm -rf `pwd`

# Building T2Http
#ENV install Go

RUN wget http://debian.volia.net/debian/pool/main/g/golang-1.7/golang-1.7-go_1.7.4-1_amd64.deb && \
    wget http://debian.volia.net/debian/pool/main/g/golang-1.7/golang-1.7-src_1.7.4-1_amd64.deb && \
    dpkg -i golang-1.7-*_amd64.deb && \
    rm -rf `pwd`
    
ENV PATH="$PATH:/usr/lib/go-1.7/bin"
ENV GOPATH=/usr/.go
ENV GOOS=linux
ENV CGO_ENABLED=1
ENV CGO_NO_EMULATION=1
ENV CGO_CFLAGS="-O3 -pipe -fstack-protector-strong"

RUN go get -u -v -buildmode=exe -ldflags "-s -w" github.com/anteo/torrent2http
RUN ldd -v /usr/.go/bin/torrent2http

WORKDIR /
