diff --git a/config/functions b/config/functions
index a1c08e890d..4aa19da2b0 100644
--- a/config/functions
+++ b/config/functions
@@ -268,8 +268,47 @@ setup_toolchain() {
     export MAKEFLAGS="$MAKEFLAGS V=1 VERBOSE=1"
   fi
 
-  case "$1" in
-    target|init)
+  case "$1:$2" in
+    target:meson)
+      export DESTIMAGE="target"
+      export AWK="gawk"
+      export CC="$TOOLCHAIN/bin/host-gcc"
+      export CXX="$TOOLCHAIN/bin/host-g++"
+      export CPP="cpp"
+      export LD="ld"
+      export AS="as"
+      export AR="ar"
+      export NM="nm"
+      export RANLIB="ranlib"
+      export OBJCOPY="objcopy"
+      export OBJDUMP="objdump"
+      export STRIP="strip"
+      export CPPFLAGS="$HOST_CPPFLAGS"
+      export CFLAGS="$HOST_CFLAGS"
+      export CXXFLAGS="$HOST_CXXFLAGS"
+      export LDFLAGS="$HOST_LDFLAGS"
+      setup_pkg_config_target
+      export TARGET_CC="${TARGET_PREFIX}gcc"
+      export TARGET_CXX="${TARGET_PREFIX}g++"
+      export TARGET_AR="${TARGET_PREFIX}ar"
+      export TARGET_STRIP="${TARGET_PREFIX}strip"
+      export TARGET_CFLAGS="$TARGET_CFLAGS"
+      export TARGET_CXXFLAGS="$TARGET_CXXFLAGS"
+      export TARGET_LDFLAGS="$TARGET_LDFLAGS"
+      export HOST_CC="$CC"
+      export HOST_CXX="$CXX"
+      export HOSTCC="$CC"
+      export HOSTCXX="$CXX"
+      export CC_FOR_BUILD="$CC"
+      export CXX_FOR_BUILD="$CXX"
+      export BUILD_CC="$CC"
+      export BUILD_CXX="$CXX"
+      export _python_sysroot="$SYSROOT_PREFIX"
+      export _python_prefix=/usr
+      export _python_exec_prefix=/usr
+      ;;
+
+    target:*|init:*)
       export DESTIMAGE="target"
       export CC="${TARGET_PREFIX}gcc"
       export CXX="${TARGET_PREFIX}g++"
@@ -315,7 +354,7 @@ setup_toolchain() {
       export _python_prefix=/usr
       export _python_exec_prefix=/usr
       ;;
-    host|bootstrap)
+    host:*|bootstrap:*)
       export DESTIMAGE="host"
       export AWK="gawk"
       export CC="$TOOLCHAIN/bin/host-gcc"
@@ -366,15 +405,8 @@ setup_toolchain() {
   esac
 }
 
-create_meson_conf() {
-  local endian root properties
-  case "$1" in
-    target|init)    root="$SYSROOT_PREFIX/usr"
-                    ;;
-    host|bootstrap) root="$TOOLCHAIN"
-                    ;;
-  esac
-
+create_meson_conf_host() {
+  local properties
   properties="PKG_MESON_PROPERTIES_${1^^}"
 
   cat > $2 <<EOF
@@ -394,7 +426,7 @@ cpu = '$TARGET_SUBARCH'
 endian = 'little'
 
 [properties]
-root = '$root'
+root = '$TOOLCHAIN'
 $(python -c "import os; print('c_args = {}'.format([x for x in os.getenv('CFLAGS').split()]))")
 $(python -c "import os; print('c_link_args = {}'.format([x for x in os.getenv('LDFLAGS').split()]))")
 $(python -c "import os; print('cpp_args = {}'.format([x for x in os.getenv('CXXFLAGS').split()]))")
@@ -403,6 +435,37 @@ ${!properties}
 EOF
 }
 
+create_meson_conf_target() {
+  local properties
+  properties="PKG_MESON_PROPERTIES_${1^^}"
+
+  cat > $2 <<EOF
+[binaries]
+c = '$TARGET_CC'
+cpp = '$TARGET_CXX'
+ar = '$TARGET_AR'
+strip = '$TARGET_STRIP'
+pkgconfig = '$PKG_CONFIG'
+llvm-config = '$SYSROOT_PREFIX/usr/bin/llvm-config-host'
+libgcrypt-config = '$SYSROOT_PREFIX/usr/bin/libgcrypt-config'
+
+[host_machine]
+system = 'linux'
+cpu_family = '$TARGET_ARCH'
+cpu = '$TARGET_SUBARCH'
+endian = 'little'
+
+[properties]
+root = '$SYSROOT_PREFIX/usr'
+$(python -c "import os; print('c_args = {}'.format([x for x in os.getenv('TARGET_CFLAGS').split()]))")
+$(python -c "import os; print('c_link_args = {}'.format([x for x in os.getenv('TARGET_LDFLAGS').split()]))")
+$(python -c "import os; print('cpp_args = {}'.format([x for x in os.getenv('TARGET_CXXFLAGS').split()]))")
+$(python -c "import os; print('cpp_link_args = {}'.format([x for x in os.getenv('TARGET_LDFLAGS').split()]))")
+${!properties}
+EOF
+}
+
+
 # unset all PKG_* vars apart from those exported by setup_toolchain, then set default values
 reset_pkg_vars() {
   local vars var
diff --git a/scripts/build b/scripts/build
index 7eed9b8959..22c9f7fb7b 100755
--- a/scripts/build
+++ b/scripts/build
@@ -85,7 +85,34 @@ else
   build_msg "CLR_BUILD" "BUILD" "${PKG_NAME} $(print_color "CLR_TARGET" "(${TARGET})")" "indent"
 fi
 
-setup_toolchain ${TARGET}
+# setup configure scripts
+PKG_CONFIGURE_SCRIPT="${PKG_CONFIGURE_SCRIPT:-${PKG_BUILD}/configure}"
+PKG_CMAKE_SCRIPT="${PKG_CMAKE_SCRIPT:-${PKG_BUILD}/CMakeLists.txt}"
+PKG_MESON_SCRIPT="${PKG_MESON_SCRIPT:-${PKG_BUILD}/meson.build}"
+
+# auto detect toolchain
+_auto_toolchain=""
+if [ -z "${PKG_TOOLCHAIN}" -o "${PKG_TOOLCHAIN}" = "auto" ]; then
+  if [ -f "${PKG_MESON_SCRIPT}" ]; then
+    PKG_TOOLCHAIN="meson"
+  elif [ -f "${PKG_CMAKE_SCRIPT}" ]; then
+    PKG_TOOLCHAIN="cmake"
+  elif [ -f "${PKG_CONFIGURE_SCRIPT}" ]; then
+    PKG_TOOLCHAIN="configure"
+  elif [ -f "${PKG_BUILD}/Makefile" ]; then
+    PKG_TOOLCHAIN="make"
+  else
+    die "Not possible to detect toolchain automatically. Add PKG_TOOLCHAIN= to package.mk"
+  fi
+  _auto_toolchain=" (auto-detect)"
+fi
+if ! listcontains "meson cmake cmake-make configure ninja make autotools manual" "${PKG_TOOLCHAIN}"; then
+  die "$(print_color "CLR_ERROR" "ERROR:") unknown toolchain ${PKG_TOOLCHAIN}"
+fi
+build_msg "CLR_TOOLCHAIN" "TOOLCHAIN" "${PKG_TOOLCHAIN}${_auto_toolchain}"
+
+# setup toolchain
+setup_toolchain ${TARGET} ${PKG_TOOLCHAIN}
 
 # configure install directory
 if [ "${TARGET}" = "target" ]; then
@@ -173,32 +200,6 @@ BOOTSTRAP_CONFIGURE_OPTS="${HOST_CONFIGURE_OPTS}"
 BOOTSTRAP_CMAKE_OPTS="${HOST_CMAKE_OPTS}"
 BOOTSTRAP_MESON_OPTS="${HOST_MESON_OPTS}"
 
-# setup configure scripts
-PKG_CONFIGURE_SCRIPT="${PKG_CONFIGURE_SCRIPT:-${PKG_BUILD}/configure}"
-PKG_CMAKE_SCRIPT="${PKG_CMAKE_SCRIPT:-${PKG_BUILD}/CMakeLists.txt}"
-PKG_MESON_SCRIPT="${PKG_MESON_SCRIPT:-${PKG_BUILD}/meson.build}"
-
-# auto detect toolchain
-_auto_toolchain=""
-if [ -z "${PKG_TOOLCHAIN}" -o "${PKG_TOOLCHAIN}" = "auto" ]; then
-  if [ -f "${PKG_MESON_SCRIPT}" ]; then
-    PKG_TOOLCHAIN="meson"
-  elif [ -f "${PKG_CMAKE_SCRIPT}" ]; then
-    PKG_TOOLCHAIN="cmake"
-  elif [ -f "${PKG_CONFIGURE_SCRIPT}" ]; then
-    PKG_TOOLCHAIN="configure"
-  elif [ -f "${PKG_BUILD}/Makefile" ]; then
-    PKG_TOOLCHAIN="make"
-  else
-    die "Not possible to detect toolchain automatically. Add PKG_TOOLCHAIN= to package.mk"
-  fi
-  _auto_toolchain=" (auto-detect)"
-fi
-if ! listcontains "meson cmake cmake-make configure ninja make autotools manual" "${PKG_TOOLCHAIN}"; then
-  die "$(print_color "CLR_ERROR" "ERROR:") unknown toolchain ${PKG_TOOLCHAIN}"
-fi
-build_msg "CLR_TOOLCHAIN" "TOOLCHAIN" "${PKG_TOOLCHAIN}${_auto_toolchain}"
-
 # make autoreconf
 if [ "${PKG_TOOLCHAIN}" = "autotools" ]; then
   ${SCRIPTS}/autoreconf "${PKG_NAME}" "${PARENT_PKG}"
@@ -237,22 +238,22 @@ else
   case "${PKG_TOOLCHAIN}:${TARGET}" in
     # meson builds
     "meson:target")
-      create_meson_conf ${TARGET} ${MESON_CONF}
+      create_meson_conf_target ${TARGET} ${MESON_CONF}
       echo "Executing (target): meson ${TARGET_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_TARGET} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
       CC="${HOST_CC}" CXX="${HOST_CXX}" meson ${TARGET_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_TARGET} $(dirname ${PKG_MESON_SCRIPT})
       ;;
     "meson:host")
-      create_meson_conf ${TARGET} ${MESON_CONF}
+      create_meson_conf_host ${TARGET} ${MESON_CONF}
       echo "Executing (host): meson ${HOST_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_HOST} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
       meson ${HOST_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_HOST} $(dirname ${PKG_MESON_SCRIPT})
       ;;
     "meson:init")
-      create_meson_conf ${TARGET} ${MESON_CONF}
+      create_meson_conf_target ${TARGET} ${MESON_CONF}
       echo "Executing (init): meson ${INIT_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_INIT} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
       meson ${INIT_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_INIT} $(dirname ${PKG_MESON_SCRIPT})
       ;;
     "meson:bootstrap")
-      create_meson_conf ${TARGET} ${MESON_CONF}
+      create_meson_conf_host ${TARGET} ${MESON_CONF}
       echo "Executing (bootstrap): meson ${BOOTSTRAP_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_BOOTSTRAP} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
       meson ${BOOTSTRAP_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_BOOTSTRAP} $(dirname ${PKG_MESON_SCRIPT})
       ;;
diff --git a/scripts/create_addon b/scripts/create_addon
index 4dbea27608..4961f0cd9d 100755
--- a/scripts/create_addon
+++ b/scripts/create_addon
@@ -132,7 +132,7 @@ fi
 # check environment and configure toolchains
 ${SCRIPTS}/checkdeps
 
-(setup_toolchain host)
+( setup_toolchain host )
 setup_toolchain target
 
 # collect list of addons for building
